<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>罗森塔尔效应</title>
      <link href="/ce930643.html"/>
      <url>/ce930643.html</url>
      
        <content type="html"><![CDATA[<div class="bvideo">  <a href="//www.bilibili.com/video/BV1mWhyzYEBh" target="_blank">    <div class="bvideo-box">      <div class="bvideo-cover">        <div class="cover-default"></div>        <div class="bvideo-cover-layer" style="background-image:url(https://images.weserv.nl/?url=http://i0.hdslb.com/bfs/archive/6b5d8584bfd9a578fefbb3ea42055048e81a716c.jpg)">          <i class="icon-video"></i>        </div>        <span class="duration">00:09:17</span>      </div>      <div class="bvideo-info">        <p class="title">心理学中有个词叫：罗森塔尔效应｜可以让「任何人」喜欢你、信任你，最有效的方法</p>        <div class="partition">          <span class="svg-up"></span>          <span class="up-name">强者心理学</span>        </div>        <div class="card-status">          <span class="play-num">            <span class="svg-play"></span>            <span style="vertical-align:middle;">25.4万</span>          </span>          <span>          <span class="svg-danmaku"></span>            <span style="vertical-align:middle;">207</span>          </span>        </div>      </div>    </div>  </a></div><blockquote><p>视频源链接</p></blockquote><p>你有没有遇见过这样的人?第一次见面,就让你莫名放下防备。一句话,就让你觉得自己被理解,被看见,被重视。你以为那是天生的美丽,或者只是运气好。心理学告诉我们,那背后藏着一套隐秘的力量,一种能悄悄改变一个人表现,甚至改写两个人关系走向的力量。他的名字是罗森塔尔效应。1968年,心理学家罗森塔尔在一所小学做了一个实验。</p><p>他随机选出百分之二十的学生,告诉老师,这些孩子是天生的高智商苗子。这只是一个谎言。可八个月后,这些孩子的智商真的大幅提高,老师也更喜欢他们,对他们更温柔、更耐心、更鼓励。仿佛一颗无形的种子,被悄悄中进了彼此心里。你期待什么,就会得到什么?这种心理暗示,像空气中的信号,穿过语言、动作、眼神。</p><p>潜移默化地塑造着对方的行为和自我认知。当你真诚地相信你一个人会变好,他就会开始朝着你相信的方向努力。</p><p>而这股力量,不仅存在于课堂,他也在你的职场、家庭、爱情、友谊里。</p><p>无处不在,很多人想让别人喜欢自己,信任自己,却总是走错了方向。他们拼命取悦,小心翼翼揣摩,却忽略了最有效的方式。</p><p>不是你做了多少事,而是你让对方感觉自己在你眼中有多重要。高期待,不是空洞的夸奖,而是精准、具体、真诚的信号。</p><p>第一次见同事,不要寒暄式地说你好,而是点亮红标签。听说你的方案特别有创意,真想向你学两招。</p><p>和新朋友第一次喝咖啡,不要聊天气,而是给他一个黄标签。</p><p>你身上有种很安定的气场,让人很放松。和客户第一次合作,不要急着谈条件,而是给他一个绿标签。</p><p>下次讨论项目的时候,我第一个想到的就是你。</p><p>这不是技巧,而是一种心理投射。当你在别人眼中,放了一面光亮的镜子,他们会忍不住靠近那道光。</p><p>因为在那面镜子里,他们看见了更好的自己。但很多人做不到这一点,他们带着防御进入每一次关系。</p><p>心理先假设,对方可能不喜欢我,他觉得我没价值,我们不是一路人。</p><p>这种付期待,就像在无形中泼冷水,对方也会感知到你的树立和拒绝。</p><p>于是关系在最初就死掉了。真正的高手,从来不急着展示自己有多优秀。</p><p>而是让对方感受到,我在你眼里,是重要的。</p><p>这个信号,不是靠台词背诵,而是用你的表情,眼神,动作去完成。</p><p>当对方说话时,轻轻侧头15度,下额微收,眼神专注地停留3秒。</p><p>像是在认真倾听他生命里的一部分。</p><p>或者镜像他的动作,他脱颔,你也轻轻脱颔。</p><p>他鸣唇,你也轻轻鸣唇。</p><p>只需0.5秒的延迟,就足以让他的潜意识以为我们是同类。</p><p>真正的存在感,是你在传递一个讯息。</p><p>我对你有兴趣,我觉得你值得被理解。</p><p>而人类天生,对这种信号有着无比的敏感。</p><p>它会让对方被松开,让距离缩短,让彼此的磁场被重新调平。</p><p>更重要的是,这种高期待,不只是送给别人,更要送给自己。</p><p>每天起床,对着镜子说一句,今天 我会很开心,会有人因为我而高兴,</p><p>然后去完成一件微小的利他行为,帮同事拿快递。</p><p>替陌生人按住电梯门。</p><p>认真地感谢送你外卖的小哥,让你对自己抱有高期待。</p><p>你的神情、姿态、语气都会不一样。</p><p>别人感知到的是一个值得尊重、值得靠近的人。</p><p>信任,不是一见钟情,而是一次次的小细节,累积出来的闭环。</p><p>今天你记住了他无意中提到的喜好。</p><p>明天你带来了一本他想看的书。</p><p>下周你用上了他建议的方法,并反馈给他。</p><p>这不是讨好,而是让关系有了回响。</p><p>回响,就是关系的呼吸。</p><p>罗森塔尔效应,从来不是玄学。</p><p>他提醒我们,人与人之间的距离始于预期,</p><p>乘于细节,终于闭环。</p><p>所以下一次,你走进一个陌生的电梯。</p><p>会议时,饭局时。</p><p>不要低头刷手机,也不要让尴尬填满空气。</p><p>在心里,默默给对方贴一个红标签。</p><p>他本来就像喜欢我。</p><p>然后,抬头,微笑,侧头15度,用眼神,</p><p>发出那条看不见的WiFi信号。</p><p>我看见你,你会惊讶。</p><p>有些关系,从那一刻,就开始了新的走向。</p><p>因为当你相信,别人会因为你而变得更好。</p><p>你会发现,这个世界,也会因为你而变得更好。</p><p>你必须明白,人与人之间,从来不只是交换信息,而是交换能量。</p><p>当你带着高期待走向别人时,</p><p>你不仅是在说什么,更是在传一种信号。</p><p>我看好你,我相信你,我觉得你可以做到更多。</p><p>这种信号,会穿透对方的逻辑。</p><p>直达潜意识,罗森塔尔效应为什么有效?</p><p>因为我们的大脑里,有一套为生存而设计的社交雷达。</p><p>它不断扫描周围人的反应,判断自己是安全的,被接纳的,还是被拒绝的,处于危险中的。</p><p>如果你捕捉到的是温柔的眼神,真诚的微笑,开放的姿态,你的大脑会分泌多巴胺和催产素。</p><p>这两种化学物质会让你更放松,更愿意表现,更愿意冒险。</p><p>反之,如果你捕捉到的是冷漠的表情,短促的回应,僵硬的姿势。</p><p>你的信任何会迅速拉响警报,让你防御,收缩,逃避,甚至直接关掉表达欲。</p><p>你以为关系是慢慢建立的。</p><p>其实,有时候只需要七秒钟。</p><p>七秒钟,就能让大脑判定。</p><p>我愿意靠近这个人,或者,我最好远离这个人。</p><p>而高期待,就是在这七秒钟里,把一粒你值得被喜欢的种子,悄悄种进对方的心里。</p><p>想想看,你上一次被人高期待的看待是什么时候。</p><p>是面试时,那位HR看你简历时,眼里闪过的那一丝光。</p><p>是聚会里,那个人听你讲故事时,全程没掏一次手机,还是某个深夜,你收到一条信息。</p><p>我觉得你做这件事一定会成功。</p><p>这些细节,比任何宏大的承诺都更有力量。</p><p>因为它们是瞬间的。瞬间里藏着真实,真实才有穿透力。</p><p>很多人误解了罗森塔尔效应,以为它是嘴巴上的夸奖,或者是社交技巧的包装。</p><p>不用怀疑,它的核心,是你真的选择相信,别人会因为你的存在而变得更好。</p><p>这种力量,也能反向治愈你自己。</p><p>当你长期处在低期待环境中,</p><p>比如家人总说你不行,老板总怀疑你能力,朋友总用负面评价调侃你。</p><p>你的大脑会默认,我就是这样的人。</p><p>可一旦你开始给自己提高期待标签,比如每天对自己说,</p><p>今天我会给某个人带去好心情,然后刻意去做一件利他的事。</p><p>你的大脑会用正反馈帮你稳住这种状态。</p><p>而这种状态,会一点点改变你发出去的信号。</p><p>别人收到信号,再反过来影响你。</p><p>这,就是自我实现的罗森塔尔效应。</p><p>我见过一个案例,一位销售员,业绩连续三个月垫底,</p><p>每天都觉得自己不行。</p><p>见客户是眼神闪躲,话语急促。</p><p>她的主管有一天在会议上说,我觉得她很适合处理大客户。</p><p>因为她细心,这句话完全出乎她意料。</p><p>可从那天起,她真的开始用细心去定义自己的工作方式。</p><p>准备客户资料更全面,跟进更耐心,记录更仔细。</p><p>三个月后,她成了团队业绩第一。</p><p>不是主管那句话有魔力,而是主管给了她一个我值得被信任的身份标签。</p><p>而她,开始努力去符合这个身份。</p><p>你要明白,这种力量你也可以给别人。</p><p>不需要昂贵的礼物,不需要复杂的套路。</p><p>只需要真诚的关注和具体的期待。</p><p>和一个人对话时,在心里问自己。</p><p>如果我真心希望她变得更好,我会怎么说,怎么看,怎么做。</p><p>当你用这种方式去对待别人,你就会成为她生命中。</p><p>那少数几个在你还不够好时,就看见你最好一面的人。</p><p>而人,会用一生记住这种人。</p><p>更有趣的是,高期待的力量是会回流的。</p><p>你对别人笑,别人就会对你笑。</p><p>你在别人身上看见优点,别人就更容易在你身上看见光。</p><p>这种互相点亮的关系,会让你的人生轨迹发生偏移。</p><p>从孤立,防御,猜忌,走向连接,信任,供应。</p><p>所以,从今天开始,走进任何一段关系前,不要先想我该怎么表现。</p><p>而是先想,我能给对方什么样的高期待。</p><p>因为你永远无法预知,一句真诚的期待,能在一个人心里生长多久,</p><p>又会在什么时候,变成他人生的转折点。</p><p>下一次,你走进一个陌生的房间,别急着找熟人,别急着低头刷手机,更别急着套用那些空洞的寒暄。</p><p>抬头,微笑,轻轻侧头15度,看向你第一个遇见的人,在心里默默贴上标签。</p><p>他本来就想喜欢我。</p><p>然后,你会发现,世界的门正在为你悄悄打开。</p><p>现在,请记住最后一句话。</p><p>你投出去的光,终有一天,会照亮回你的路。</p><div class="note warning modern"><p>本篇内容来自网络，仅供参考, 内容为视频转写字幕,可能有地方不准确，如有侵权，请联系删除。</p></div>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #人际 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于无状态和有状态</title>
      <link href="/ddcc45b2.html"/>
      <url>/ddcc45b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="在-kubernetes-里"><a class="markdownIt-Anchor" href="#在-kubernetes-里"></a> 🌐 在 Kubernetes 里</h2><ul><li><p><strong>无状态应用（Stateless Application）</strong></p><ul><li><p>特点：Pod 不依赖于本地存储，随时销毁/重建都不会丢数据。</p></li><li><p>举例：Nginx、React 前端服务、API Gateway。你丢到任何节点跑都行，因为数据（日志、缓存）存在外部系统，比如数据库、对象存储（S3）。</p></li><li><p>优势：扩缩容快，容错性好。</p></li><li><p>类比：吃快餐🍔，你走到哪家麦当劳点餐都一样，不需要“记住你上次吃什么”。</p></li></ul></li><li><p><strong>有状态应用（Stateful Application）</strong></p><ul><li><p>特点：Pod 需要维持状态，比如持久化存储、固定网络 ID、会话信息。</p></li><li><p>举例：MySQL、Redis、Kafka、ElasticSearch。需要保证数据一致性和身份稳定。</p></li><li><p>在 K8s 里会用到 <strong>StatefulSet</strong>（保证 Pod 名字、顺序和存储卷固定）。</p></li><li><p>类比：去银行办卡💳，你必须回到同一个账户柜台，因为数据和身份绑定在一起。</p></li></ul></li></ul><hr /><h2 id="在-ipv6-里"><a class="markdownIt-Anchor" href="#在-ipv6-里"></a> 📡 在 IPv6 里</h2><p>IPv6 地址分配也分 <strong>有状态</strong> 和 <strong>无状态</strong>：</p><ul><li><p><strong>无状态自动配置（SLAAC, Stateless Address Autoconfiguration）</strong></p><ul><li><p>设备自己根据路由器发的前缀 + 本机 MAC 地址（或者随机数）生成 IPv6 地址。</p></li><li><p>不需要中心服务器（DHCPv6）。</p></li><li><p>类比：自己起名字✍️，比如“我姓李，那我叫李小明”，不用去户籍中心申请。</p></li></ul></li><li><p><strong>有状态配置（Stateful）</strong></p><ul><li><p>依赖 <strong>DHCPv6 服务器</strong> 分配 IPv6 地址。</p></li><li><p>服务器会维护“谁拿了哪个地址”的状态。</p></li><li><p>类比：户籍办给你派发身份证号📇，统一管理。</p></li></ul></li></ul><hr /><h2 id="总结一句话"><a class="markdownIt-Anchor" href="#总结一句话"></a> 💡 总结一句话</h2><ul><li><p><strong>无状态</strong>：系统不记得你是谁，每次都是全新。</p></li><li><p><strong>有状态</strong>：系统必须记得你是谁，记录你的信息。</p></li></ul><p>👉 所以在 K8s 里讲的是 <strong>应用数据/Pod身份</strong>，在 IPv6 里讲的是 <strong>地址分配方式</strong>，但本质都是：要不要依赖历史记录。</p><hr /><p>要不要我帮你画一张 <strong>K8s/IPv6 有状态 vs 无状态的对比表格</strong>？这样你复习时一眼就能看出差别。太好了😆！那我给你来一张简明对比表格，方便以后秒回忆👇</p><table><thead><tr><th>场景</th><th>无状态（Stateless）</th><th>有状态（Stateful）</th></tr></thead><tbody><tr><td><strong>K8s 应用</strong></td><td>Pod 可随便重建，不依赖本地存储；适合 Nginx、前端服务</td><td>Pod 有固定身份和存储；适合 MySQL、Redis</td></tr><tr><td><strong>IPv6 地址</strong></td><td>SLAAC：设备自己生成地址，不靠服务器</td><td>DHCPv6：服务器分配地址并记录谁用哪个</td></tr><tr><td><strong>类比</strong></td><td>吃快餐 🍔（哪家店都一样）</td><td>办银行卡 💳（必须回到同一个账户）</td></tr></tbody></table><p>一句口诀：<br />👉 <strong>无状态=不记人，有状态=记住你</strong>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些有用的知识点</title>
      <link href="/e0af8eef.html"/>
      <url>/e0af8eef.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的一主两从"><a class="markdownIt-Anchor" href="#数据库的一主两从"></a> 数据库的一主两从</h2><p>“一主两从”是数据库系统中一种<strong>主从复制架构（Master-Slave Replication Architecture）</strong>，常用于提升<strong>系统的可用性（availability）与读取性能（read scalability）</strong>。</p><hr /><h3 id="什么是一主两从"><a class="markdownIt-Anchor" href="#什么是一主两从"></a> 🔧 什么是“一主两从”？</h3><ul><li><p><strong>一主</strong>（Master）：负责所有的写操作（插入、更新、删除），也可以承担读取。</p></li><li><p><strong>两从</strong>（Slave）：负责复制主库的数据更新，一般只做读操作，不能写入。</p></li></ul><p>💡 简单说就是：<br />主库写、从库读，一主库写的内容会同步到两个从库上。</p><hr /><h3 id="架构图示意口头版"><a class="markdownIt-Anchor" href="#架构图示意口头版"></a> 🧱 架构图示意（口头版）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       写操作（写入）</span><br><span class="line">           ↓</span><br><span class="line">        主数据库</span><br><span class="line">        /       \</span><br><span class="line">    复制同步    复制同步</span><br><span class="line">     /              \</span><br><span class="line">从库1（只读）     从库2（只读）</span><br><span class="line"></span><br><span class="line">       ↑        ↑</span><br><span class="line">     读操作    读操作</span><br></pre></td></tr></table></figure><hr /><h3 id="主要好处"><a class="markdownIt-Anchor" href="#主要好处"></a> ✅ 主要好处</h3><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td><strong>读写分离</strong></td><td>主库处理写，从库处理读，减轻压力</td></tr><tr><td><strong>高可用性</strong></td><td>主库挂了可以手动或自动切换为从库（主从切换）</td></tr><tr><td><strong>数据冗余</strong></td><td>从库就是备份，避免数据丢失</td></tr></tbody></table><hr /><h3 id="️-潜在问题"><a class="markdownIt-Anchor" href="#️-潜在问题"></a> ⚠️ 潜在问题</h3><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td><strong>数据延迟</strong></td><td>主库更新后，从库同步可能会有延迟（Replication Lag）</td></tr><tr><td><strong>切换复杂</strong></td><td>主库宕机时手动或自动切换需要较复杂配置</td></tr><tr><td><strong>一致性风险</strong></td><td>某些时候从库还没同步完数据，读到的就是旧数据（Eventually Consistent）</td></tr></tbody></table><hr /><h3 id="案例参考"><a class="markdownIt-Anchor" href="#案例参考"></a> 📚 案例参考</h3><ul><li><p><strong>MySQL</strong> 支持 <code>一主多从</code> 的异步复制，通过 <code>binlog</code>（二进制日志）机制。</p></li><li><p><strong>PostgreSQL</strong> 支持 <code>Streaming Replication</code>，可以实现一主两从。</p></li><li><p>阿里云 RDS 就可以一键搭建一主两从结构，自动故障转移。</p></li></ul><hr /><h3 id="英文关键词devops相关"><a class="markdownIt-Anchor" href="#英文关键词devops相关"></a> 💡 英文关键词（DevOps相关）</h3><table><thead><tr><th>中文</th><th>英文</th></tr></thead><tbody><tr><td>主从复制</td><td>Master-Slave Replication</td></tr><tr><td>主库</td><td>Primary / Master</td></tr><tr><td>从库</td><td>Replica / Slave</td></tr><tr><td>延迟</td><td>Replication Lag</td></tr><tr><td>高可用</td><td>High Availability</td></tr><tr><td>自动故障转移</td><td>Automatic Failover</td></tr></tbody></table><hr /><p>如果你是做 DevOps 或分布式系统设计的，这种架构是常见的高可用部署手段之一。未来 3 年里，很多企业数据库架构都会往“一主多从 + 自动容灾 + 云上备份”演进。</p><p>需要我帮你画个一主两从的流程图或者配置方式也可以继续说哈 🙂</p><p>MyCat 的读写分离，说白了就是：<strong>让写操作走主库，读操作走从库</strong>，从而减轻主库压力、提高性能。这是它作为**数据库中间件（Database Middleware）**的核心功能之一。</p><hr /><h2 id="什么是-mycat读写分离"><a class="markdownIt-Anchor" href="#什么是-mycat读写分离"></a> 🧱 什么是 MyCat读写分离？</h2><p>MyCat 是一个基于 Java 的开源数据库中间件，支持<strong>分库分表、读写分离、负载均衡、分布式事务</strong>等功能。</p><p>👉 它位于应用程序和数据库之间，相当于数据库的“代理服务器”。</p><hr /><p>📥 一般架构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  应用层（Java、Python等）</span><br><span class="line">            ↓</span><br><span class="line">       MyCat中间件</span><br><span class="line">       /           \</span><br><span class="line"> 写操作          读操作</span><br><span class="line">  ↓                  ↓</span><br><span class="line">主库              从库1、从库2……</span><br></pre></td></tr></table></figure><p>🛠 实现方式：</p><ol><li><p>应用只连接 MyCat（而不是直接连数据库）</p></li><li><p>MyCat 根据 SQL 类型自动路由：</p><ul><li><p><code>INSERT / UPDATE / DELETE</code> → 主库</p></li><li><p><code>SELECT</code> → 从库（轮询/负载均衡）</p></li></ul></li><li><p>从库数据通过 MySQL 自带的主从复制机制保持同步</p></li></ol><hr /><h3 id="好处"><a class="markdownIt-Anchor" href="#好处"></a> ✅ 好处</h3><table><thead><tr><th>优点</th><th>说明</th></tr></thead><tbody><tr><td>⚡ 提高性能</td><td>写操作主库集中处理，读操作多个从库分担，性能提升明显</td></tr><tr><td>🧠 中间件智能路由</td><td>应用代码不需要修改 SQL 路由逻辑</td></tr><tr><td>🧩 支持多种数据库</td><td>支持 MySQL、MariaDB、Oracle 等</td></tr><tr><td>🧮 配置灵活</td><td>支持权重分配、读写比例控制</td></tr></tbody></table><hr /><h3 id="️-注意事项"><a class="markdownIt-Anchor" href="#️-注意事项"></a> ⚠️ 注意事项</h3><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td>🕓 数据延迟</td><td>主从同步可能有延迟，导致读到旧数据</td></tr><tr><td>❌ 事务不一致</td><td>一些跨主从的事务或读写顺序要求高的业务要小心处理</td></tr><tr><td>🔒 强一致性需求场景不适合</td><td>例如刚插入再查询的数据可能查不到（除非设置强制走主库）</td></tr><tr><td>🛠 SQL识别误差</td><td>某些写入 SQL 被错误识别为读操作（比如 <code>SELECT ... FOR UPDATE</code>）</td></tr></tbody></table><hr /><h3 id="配置方式简化示意"><a class="markdownIt-Anchor" href="#配置方式简化示意"></a> 📦 配置方式（简化示意）</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.xml 中定义读写分离策略</span></span><br><span class="line"><span class="attr">&lt;dataHost</span> <span class="string">name=&quot;mysqlCluster&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;&gt;</span></span><br><span class="line">    <span class="attr">&lt;writeHost</span> <span class="string">host=&quot;hostM&quot; url=&quot;主库IP:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;</span></span><br><span class="line">        <span class="attr">&lt;readHost</span> <span class="string">host=&quot;hostS1&quot; url=&quot;从库1IP:3306&quot; /&gt;</span></span><br><span class="line">        <span class="attr">&lt;readHost</span> <span class="string">host=&quot;hostS2&quot; url=&quot;从库2IP:3306&quot; /&gt;</span></span><br><span class="line">    <span class="attr">&lt;/writeHost&gt;</span></span><br><span class="line"><span class="attr">&lt;/dataHost&gt;</span></span><br></pre></td></tr></table></figure><p>🔍 balance=“1” 表示使用简单的轮询负载均衡策略。</p><p>好的！下面我来用通俗又专业的方式，讲清楚 <strong>Nginx</strong> 和 <strong>LVS（Linux Virtual Server）</strong> 两种负载均衡技术的原理、对比和使用场景。</p><hr /><h2 id="什么是负载均衡load-balancing"><a class="markdownIt-Anchor" href="#什么是负载均衡load-balancing"></a> 🍃 什么是负载均衡（Load Balancing）？</h2><p>负载均衡的核心目标是：<br /><strong>把用户请求合理地分发到多个后端服务器上，提高系统的并发能力和可用性。</strong></p><p>就像饭店排队时有多个窗口，前台决定你去哪一窗口点餐，这个前台就是“负载均衡器”。</p><hr /><h2 id="nginx-的负载均衡"><a class="markdownIt-Anchor" href="#nginx-的负载均衡"></a> 🧰 Nginx 的负载均衡</h2><h3 id="nginx-是什么"><a class="markdownIt-Anchor" href="#nginx-是什么"></a> ✅ Nginx 是什么？</h3><p>Nginx 是一个轻量级的 Web 服务器 / 反向代理服务器，也可以作为 <strong>应用层负载均衡器</strong>。</p><p>👉 它运行在第 7 层（HTTP），对请求内容可以“看得懂”，可以根据 URL、头部、Cookie 等做分发。</p><h3 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 🛠 工作原理</h3><ul><li><p>用户请求到达 Nginx</p></li><li><p>Nginx 根据配置（如轮询、IP hash、权重）把请求转发到后端服务器</p></li><li><p>后端返回响应，Nginx再转发给用户</p></li></ul><h3 id="️-常用策略"><a class="markdownIt-Anchor" href="#️-常用策略"></a> ⚙️ 常用策略</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>round-robin（轮询）</td><td>默认，按顺序分发</td></tr><tr><td>ip_hash</td><td>按客户端 IP 保证请求打到同一台服务器</td></tr><tr><td>least_conn</td><td>谁连接少分发给谁</td></tr><tr><td>weight</td><td>给每台服务器设定权重</td></tr></tbody></table><h3 id="配置示例"><a class="markdownIt-Anchor" href="#配置示例"></a> 📦 配置示例</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.0.0.2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.0.0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h2 id="lvs-的负载均衡"><a class="markdownIt-Anchor" href="#lvs-的负载均衡"></a> 🧱 LVS 的负载均衡</h2><h3 id="lvs-是什么"><a class="markdownIt-Anchor" href="#lvs-是什么"></a> ✅ LVS 是什么？</h3><p>LVS（Linux Virtual Server）是基于 Linux 内核层的负载均衡解决方案。</p><p>👉 它工作在第 4 层（传输层，TCP/UDP），是一个 <strong>IP级别的调度器</strong>，效率非常高。</p><h3 id="工作原理-2"><a class="markdownIt-Anchor" href="#工作原理-2"></a> 🛠 工作原理</h3><ul><li><p>用户请求先到达 LVS 所在的虚拟 IP（VIP）</p></li><li><p>LVS 根据配置选择一台真实服务器（Real Server）</p></li><li><p>将数据包转发到该服务器</p></li><li><p>有三种模式（后面说）</p></li></ul><h3 id="三种-lvs-模式"><a class="markdownIt-Anchor" href="#三种-lvs-模式"></a> 🔁 三种 LVS 模式</h3><table><thead><tr><th>模式</th><th>特点</th><th>简介</th></tr></thead><tbody><tr><td><strong>NAT模式</strong></td><td>改 IP 和端口，性能较低</td><td>LVS 改包再发出，服务器回包经 LVS</td></tr><tr><td><strong>TUN模式</strong></td><td>高性能，对后端要求高</td><td>使用 IP 隧道，服务器自己回包</td></tr><tr><td><strong>DR模式</strong>（最常用）</td><td>高性能，不改包</td><td>LVS 把包直接转给服务器，服务器直接回复客户端</td></tr></tbody></table><hr /><h2 id="nginx-vs-lvs-对比"><a class="markdownIt-Anchor" href="#nginx-vs-lvs-对比"></a> 🔍 Nginx vs LVS 对比</h2><table><thead><tr><th>对比项</th><th>Nginx</th><th>LVS</th></tr></thead><tbody><tr><td>工作层</td><td>第7层（应用层）</td><td>第4层（传输层）</td></tr><tr><td>性能</td><td>中等偏高</td><td>非常高</td></tr><tr><td>功能</td><td>支持内容分发、缓存、静态资源</td><td>仅基于 IP/端口做分发</td></tr><tr><td>配置复杂度</td><td>简单，适合中小公司</td><td>稍复杂，适合大型网站</td></tr><tr><td>宕机检测</td><td>内建支持</td><td>需配合 Keepalived</td></tr><tr><td>适用场景</td><td>Web 应用、接口服务</td><td>高性能网络服务（如 TCP游戏服务器）</td></tr></tbody></table><hr /><h2 id="英文术语中英对照带解释"><a class="markdownIt-Anchor" href="#英文术语中英对照带解释"></a> 📚 英文术语中英对照（带解释）</h2><table><thead><tr><th>英文术语</th><th>中文解释</th></tr></thead><tbody><tr><td>Load Balancing</td><td>负载均衡</td></tr><tr><td>Reverse Proxy</td><td>反向代理（常用于 Nginx）</td></tr><tr><td>Real Server</td><td>实际处理请求的后端服务器</td></tr><tr><td>NAT (Network Address Translation)</td><td>网络地址转换</td></tr><tr><td>DR (Direct Routing)</td><td>直接路由转发模式</td></tr><tr><td>VIP (Virtual IP)</td><td>虚拟 IP 地址，用于外部访问</td></tr></tbody></table><hr /><h2 id="小结与建议"><a class="markdownIt-Anchor" href="#小结与建议"></a> 🚀 小结与建议</h2><table><thead><tr><th>如果你是…</th><th>推荐方案</th></tr></thead><tbody><tr><td>中小型公司，做 Web 开发</td><td>Nginx，配置简单，功能强大</td></tr><tr><td>要支持数百万连接，高性能要求</td><td>LVS（配合 Keepalived 做高可用）</td></tr><tr><td>想要二者结合</td><td>前端 LVS，后端 Nginx，经典双层结构</td></tr></tbody></table><h2 id="redis-集群"><a class="markdownIt-Anchor" href="#redis-集群"></a> Redis 集群</h2><p>Redis 集群的作用简单一句话就是：</p><blockquote><p><strong>让 Redis 能“分布式运行”，存得下更多数据，扛得住更多请求，还能在节点故障时自动容错。</strong></p></blockquote><p>下面我从用途、原理、架构、优缺点四方面，给你讲清楚 Redis 集群到底干嘛的👇</p><hr /><h2 id="redis-集群是干嘛的"><a class="markdownIt-Anchor" href="#redis-集群是干嘛的"></a> 🌟 Redis 集群是干嘛的？</h2><p>默认情况下，<strong>单个 Redis 实例的数据是单机存的、单线程处理的</strong>，它有以下限制：</p><ul><li><p>内存容量受限（32GB 以上就危险了）</p></li><li><p>QPS（每秒请求数）受限</p></li><li><p>容错性差，一挂全挂</p></li></ul><p>➡️ 所以 Redis 官方推出了 <strong>Redis Cluster 模式</strong>，将数据和请求分布到多个节点上，<strong>实现高可用（HA）+ 高性能（Scalability）</strong>。</p><hr /><h2 id="redis-集群架构原理"><a class="markdownIt-Anchor" href="#redis-集群架构原理"></a> 🧱 Redis 集群架构原理</h2><p>Redis Cluster 是一种 <strong>分布式架构</strong>，有以下关键特点：</p><h3 id="关键词分片-主从-自动故障转移"><a class="markdownIt-Anchor" href="#关键词分片-主从-自动故障转移"></a> 🔑 关键词：<strong>分片 + 主从 + 自动故障转移</strong></h3><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td><strong>分片（Sharding）</strong></td><td>将整个数据库划分成 16384 个槽（slot），不同键根据 CRC16 算法分配到不同 slot，再由不同节点处理</td></tr><tr><td><strong>主节点（Master）</strong></td><td>存储数据、响应请求</td></tr><tr><td><strong>从节点（Slave）</strong></td><td>备份主节点数据，当主节点挂掉可自动切换</td></tr><tr><td><strong>自动发现 / 故障转移</strong></td><td>节点之间互相通信（gossip 协议），发现异常后自动重新选主</td></tr></tbody></table><hr /><h3 id="架构示意图口头版"><a class="markdownIt-Anchor" href="#架构示意图口头版"></a> 📦 架构示意图（口头版）</h3><p>假设有一个 3 主 3 从 的 Redis 集群：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      Client</span><br><span class="line">        |</span><br><span class="line">   ---------------------</span><br><span class="line">   |        |         |</span><br><span class="line"> Master1  Master2   Master3   （负责写/读）</span><br><span class="line">   |        |         |</span><br><span class="line">Slave1   Slave2    Slave3     （负责备份）</span><br><span class="line"></span><br><span class="line">        ↓数据槽分配</span><br><span class="line"> slot 0~5460 → Master1</span><br><span class="line">slot 5461~10922 → Master2</span><br><span class="line">slot 10923~16383 → Master3</span><br></pre></td></tr></table></figure><p>🧠 所以：</p><ul><li><p>Client 发起请求前，会根据 key 的哈希 slot 定位到某个 master</p></li><li><p>如果该 master 挂了，它的 slave 会升级为新的 master</p></li><li><p>集群之间用 gossip 协议定期“互相问候”检查健康状况</p></li></ul><hr /><h2 id="redis-集群的好处"><a class="markdownIt-Anchor" href="#redis-集群的好处"></a> ✅ Redis 集群的好处</h2><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td>🌍 水平扩展</td><td>增加节点即可扩容（读写、内存、吞吐量）</td></tr><tr><td>📦 数据分片</td><td>大数据集可以拆分到多个节点上，避免内存爆炸</td></tr><tr><td>🔁 自动故障恢复</td><td>节点挂了，从节点自动补位，系统不中断</td></tr><tr><td>🚀 高并发处理</td><td>多主节点并行处理请求，QPS 成倍提升</td></tr></tbody></table><hr /><h2 id="️-redis-集群的坑点要注意"><a class="markdownIt-Anchor" href="#️-redis-集群的坑点要注意"></a> ⚠️ Redis 集群的坑点（要注意）</h2><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td>❌ 不支持多 key 跨 slot 的事务</td><td>比如 <code>MGET k1 k2</code> 如果 k1、k2 属于不同 slot，会失败</td></tr><tr><td>🚦 客户端必须支持 Cluster 协议</td><td>否则收到 <code>MOVED</code> 响应后自己不会跳转</td></tr><tr><td>🔒 数据一致性弱</td><td>主从复制是异步的，有短暂数据丢失风险（可以搭配 <code>wait</code> 命令缓解）</td></tr><tr><td>⚙️ 运维稍复杂</td><td>部署、监控、扩容需要一定 DevOps 能力（但有脚本和工具支持）</td></tr></tbody></table><hr /><h2 id="使用案例"><a class="markdownIt-Anchor" href="#使用案例"></a> 🔧 使用案例</h2><table><thead><tr><th>场景</th><th>Redis 集群能解决的问题</th></tr></thead><tbody><tr><td>电商秒杀</td><td>高并发请求，库存缓存写入压力大</td></tr><tr><td>分布式 session 存储</td><td>用户量大，session 数据分散到不同节点</td></tr><tr><td>热点排行榜</td><td>每天上亿次访问，单节点 Redis 无法承载</td></tr><tr><td>游戏排行榜</td><td>用户多，实时性要求高，Redis Cluster 并行处理请求</td></tr></tbody></table><hr />]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
            <tag> #Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus入门</title>
      <link href="/f54067b.html"/>
      <url>/f54067b.html</url>
      
        <content type="html"><![CDATA[<h1 id="prometheus-grafana-监控系统实战教学"><a class="markdownIt-Anchor" href="#prometheus-grafana-监控系统实战教学"></a> Prometheus + Grafana 监控系统实战教学</h1><p>这是一个完整的Prometheus和Grafana监控系统教学项目，通过实际的Flask应用演示如何搭建企业级监控平台。您将学习指标收集、可视化面板创建以及完整的可观测性技术栈。</p><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 📋 目录</h2><ul><li><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0">项目概述</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E8%A6%81%E6%B1%82">系统要求</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">快速开始</a></li><li><a href="#%E7%9B%91%E6%8E%A7%E7%89%B9%E6%80%A7">监控特性</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84">系统架构</a></li><li><a href="#%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0">实战练习</a><ul><li><a href="#%E7%BB%83%E4%B9%A01%E5%9B%9B%E5%A4%A7%E9%BB%84%E9%87%91%E4%BF%A1%E5%8F%B7%E7%9B%91%E6%8E%A7%E4%B8%8Epromql%E6%9F%A5%E8%AF%A2">练习1：四大黄金信号监控与PromQL查询</a></li><li><a href="#%E7%BB%83%E4%B9%A02grafana%E4%BB%AA%E8%A1%A8%E6%9D%BF%E5%88%9B%E5%BB%BA">练习2：Grafana仪表板创建</a></li></ul></li><li><a href="#%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4">故障排除</a></li><li><a href="#%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87">学习目标</a></li></ul><h2 id="项目概述"><a class="markdownIt-Anchor" href="#项目概述"></a> 🎯 项目概述</h2><p>本教学项目提供了Prometheus和Grafana监控的实际体验，包含：</p><ul><li><strong>Flask应用程序</strong>：集成Prometheus指标的Python Web应用</li><li><strong>Prometheus</strong>：时间序列数据库，用于指标收集</li><li><strong>Grafana</strong>：可视化和仪表板平台</li><li><strong>容器监控</strong>：cAdvisor用于Docker容器指标</li><li><strong>系统监控</strong>：Node exporter用于系统指标</li><li><strong>StatsD集成</strong>：通过StatsD exporter自定义指标</li></ul><h2 id="系统要求"><a class="markdownIt-Anchor" href="#系统要求"></a> 💻 系统要求</h2><h3 id="软件需求"><a class="markdownIt-Anchor" href="#软件需求"></a> 软件需求</h3><ul><li>Docker 和 Docker Compose</li><li>curl（用于流量生成）</li><li>bc（基础计算器，用于shell脚本）</li></ul><h3 id="硬件需求"><a class="markdownIt-Anchor" href="#硬件需求"></a> 硬件需求</h3><ul><li>最少6GB内存（组件比其他模块多）</li><li>15GB可用磁盘空间</li><li>可用端口：3000（Grafana）、3001（应用）、8080（cAdvisor）、9090（Prometheus）</li></ul><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 🚀 快速开始</h2><ol><li><p><strong>启动所有服务：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> prometheus/</span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 所有服务按正确顺序启动，包含健康检查（需要2-3分钟）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>生成测试流量：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./generate_traffic.sh quick</span><br></pre></td></tr></table></figure></li><li><p><strong>访问监控界面：</strong></p><ul><li><strong>Prometheus</strong>：<a href="http://localhost:9090">http://localhost:9090</a></li><li><strong>Grafana</strong>：<a href="http://localhost:3000">http://localhost:3000</a>（用户名：admin，密码：foobar）</li><li><strong>应用指标</strong>：<a href="http://localhost:3001/metrics">http://localhost:3001/metrics</a></li></ul></li></ol><h2 id="监控特性"><a class="markdownIt-Anchor" href="#监控特性"></a> 📊 监控特性</h2><h3 id="四大黄金信号监控"><a class="markdownIt-Anchor" href="#四大黄金信号监控"></a> 四大黄金信号监控</h3><p>本Flask应用演示了<strong>四大黄金信号</strong>的监控：</p><ol><li><strong>延迟（Latency）</strong>：<code>/delay?seconds=X</code> - 测试响应时间监控</li><li><strong>流量（Traffic）</strong>：通过prometheus-flask-exporter自动HTTP请求计数</li><li><strong>错误（Errors）</strong>：<code>/error?rate=X</code> - 生成400/404/500错误用于错误率监控</li><li><strong>饱和度（Saturation）</strong>：<code>/cpu-intensive</code>和<code>/memory-usage</code> - 测试资源监控</li></ol><h3 id="自定义业务指标"><a class="markdownIt-Anchor" href="#自定义业务指标"></a> 自定义业务指标</h3><p>应用包含自定义业务指标，演示如何跟踪业务特定事件：</p><ul><li><strong><code>webapp_custom_requests_total</code></strong>：按端点统计请求数</li><li><strong><code>webapp_business_operations_total</code></strong>：按类型统计业务操作（用户登录、支付等）</li></ul><h3 id="python装饰器如何工作"><a class="markdownIt-Anchor" href="#python装饰器如何工作"></a> Python装饰器如何工作</h3><p>理解自定义指标的工作原理对实现您自己的业务指标至关重要。以下是Python装饰器如何实现自动指标收集：</p><h4 id="装饰器基础"><a class="markdownIt-Anchor" href="#装饰器基础"></a> 装饰器基础</h4><p>当您看到这样的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/business-metrics&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@request_counter</span></span><br><span class="line"><span class="meta">@business_operations</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">business_metrics</span>():</span><br><span class="line">    request.operation_type = <span class="string">&quot;payment&quot;</span>  <span class="comment"># 设置标签值</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>Python从下到上处理装饰器，包装您的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等同于：</span></span><br><span class="line">business_metrics = app.route(<span class="string">&quot;/business-metrics&quot;</span>)(business_metrics)</span><br><span class="line">business_metrics = request_counter(business_metrics)</span><br><span class="line">business_metrics = business_operations(business_operations)</span><br></pre></td></tr></table></figure><h4 id="执行流程"><a class="markdownIt-Anchor" href="#执行流程"></a> 执行流程</h4><p>当请求到达时，发生以下过程：</p><ol><li><strong>请求到达</strong>：<code>GET /business-metrics?operation=payment</code></li><li><strong>Flask路由到函数</strong></li><li><strong>装饰器包装器开始执行</strong>（以相反顺序）</li><li><strong>您的函数运行</strong>：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">operation = request.args.get(<span class="string">&quot;operation&quot;</span>, <span class="string">&quot;payment&quot;</span>)</span><br><span class="line">request.operation_type = operation  <span class="comment"># ← 关键：设置标签值</span></span><br></pre></td></tr></table></figure></li><li><strong>装饰器包装器完成</strong>（prometheus-flask-exporter魔法）：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># business_operations装饰器读取标签：</span></span><br><span class="line">operation_type = <span class="built_in">getattr</span>(request, <span class="string">&#x27;operation_type&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line"><span class="comment"># 增加：webapp_business_operations_total&#123;operation_type=&quot;payment&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># request_counter装饰器读取端点：</span></span><br><span class="line">endpoint = request.endpoint  <span class="comment"># &quot;business_metrics&quot;</span></span><br><span class="line"><span class="comment"># 增加：webapp_custom_requests_total&#123;endpoint=&quot;business_metrics&quot;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="可用端点"><a class="markdownIt-Anchor" href="#可用端点"></a> 可用端点</h3><table><thead><tr><th>端点</th><th>用途</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>/</code></td><td>基础hello world</td><td>无</td><td><code>curl http://localhost:3001/</code></td></tr><tr><td><code>/health</code></td><td>健康检查</td><td>无</td><td><code>curl http://localhost:3001/health</code></td></tr><tr><td><code>/business-metrics</code></td><td><strong>自定义指标演示</strong></td><td><code>operation</code></td><td><code>curl &quot;http://localhost:3001/business-metrics?operation=payment&quot;</code></td></tr><tr><td><code>/delay</code></td><td>延迟测试</td><td><code>seconds</code></td><td><code>curl &quot;http://localhost:3001/delay?seconds=2&quot;</code></td></tr><tr><td><code>/error</code></td><td>错误率测试</td><td><code>rate</code>（%）</td><td><code>curl &quot;http://localhost:3001/error?rate=80&quot;</code></td></tr><tr><td><code>/cpu-intensive</code></td><td>CPU饱和度测试</td><td><code>iterations</code></td><td><code>curl &quot;http://localhost:3001/cpu-intensive?iterations=50000&quot;</code></td></tr><tr><td><code>/memory-usage</code></td><td>内存饱和度测试</td><td><code>size</code>（MB）</td><td><code>curl &quot;http://localhost:3001/memory-usage?size=10&quot;</code></td></tr><tr><td><code>/metrics</code></td><td><strong>Prometheus指标</strong></td><td>无</td><td><code>curl http://localhost:3001/metrics</code></td></tr></tbody></table><h2 id="️-系统架构"><a class="markdownIt-Anchor" href="#️-系统架构"></a> 🏗️ 系统架构</h2><p>本项目采用微服务架构，包含以下组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐</span><br><span class="line">│    Grafana      │    │   Prometheus    │    │   Flask App     │</span><br><span class="line">│   :3000         │◄───│     :9090       │◄───│     :3001       │</span><br><span class="line">│  (可视化)        │    │  (指标收集)      │    │   (业务应用)     │</span><br><span class="line">└─────────────────┘    └─────────────────┘    └─────────────────┘</span><br><span class="line">                                ▲                       ▲</span><br><span class="line">                                │                       │</span><br><span class="line">                       ┌─────────────────┐    ┌─────────────────┐</span><br><span class="line">                       │   cAdvisor      │    │ Node Exporter   │</span><br><span class="line">                       │    :8080        │    │     :9100       │</span><br><span class="line">                       │  (容器监控)      │    │   (系统监控)     │</span><br><span class="line">                       └─────────────────┘    └─────────────────┘</span><br><span class="line">                                ▲</span><br><span class="line">                       ┌─────────────────┐</span><br><span class="line">                       │StatsD Exporter  │</span><br><span class="line">                       │:9102/9125       │</span><br><span class="line">                       │  (自定义指标)    │</span><br><span class="line">                       └─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="实战练习"><a class="markdownIt-Anchor" href="#实战练习"></a> 🔬 实战练习</h2><h3 id="练习1四大黄金信号监控与promql查询"><a class="markdownIt-Anchor" href="#练习1四大黄金信号监控与promql查询"></a> 练习1：四大黄金信号监控与PromQL查询</h3><p>本练习教您如何使用<strong>PromQL</strong>（Prometheus查询语言）监控四大黄金信号。您将学习编写查询、理解指标和分析应用性能。</p><h4 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h4><ol><li>确保所有服务正在运行：<code>docker-compose up -d</code></li><li>生成一些流量：<code>./generate_traffic.sh quick</code></li><li>打开Prometheus：<a href="http://localhost:9090">http://localhost:9090</a></li></ol><h4 id="a部分流量请求率"><a class="markdownIt-Anchor" href="#a部分流量请求率"></a> A部分：流量（请求率）</h4><p><strong>目标</strong>：监控应用每秒处理多少请求。</p><ol><li><p><strong>打开Prometheus控制台</strong> <a href="http://localhost:9090">http://localhost:9090</a></p></li><li><p><strong>点击页面顶部的&quot;Graph&quot;标签</strong></p></li><li><p><strong>基础请求计数查询</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask_http_request_duration_seconds_count</span><br></pre></td></tr></table></figure><ul><li>点击<strong>Execute</strong>按钮</li><li>切换到<strong>Table</strong>视图查看所有指标</li><li><strong>看到的内容</strong>：自启动以来的总请求数，按端点、方法和状态码分解</li></ul></li><li><p><strong>请求率查询</strong>（每秒请求数）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rate(flask_http_request_duration_seconds_count[5m])</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>rate()</code>计算5分钟窗口内的每秒速率</li><li>切换到<strong>Graph</strong>视图查看随时间变化的速率</li></ul></li><li><p><strong>总应用请求率</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum(rate(flask_http_request_duration_seconds_count[5m]))</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>sum()</code>将所有端点相加得到总应用流量</li></ul></li></ol><h4 id="b部分延迟响应时间"><a class="markdownIt-Anchor" href="#b部分延迟响应时间"></a> B部分：延迟（响应时间）</h4><p><strong>目标</strong>：监控请求完成需要多长时间（p95、p99百分位数）。</p><ol><li><p><strong>95百分位延迟</strong>（95%的请求比这个时间快）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">histogram_quantile(0.95, rate(flask_http_request_duration_seconds_bucket[5m]))</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：计算95百分位数响应时间</li><li><strong>关键洞察</strong>：如果显示2秒，95%的请求在2秒内完成</li></ul></li><li><p><strong>99百分位延迟</strong>（最慢的1%请求）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">histogram_quantile(0.99, rate(flask_http_request_duration_seconds_bucket[5m]))</span><br></pre></td></tr></table></figure></li></ol><h4 id="c部分错误错误率"><a class="markdownIt-Anchor" href="#c部分错误错误率"></a> C部分：错误（错误率）</h4><p><strong>目标</strong>：监控有多少百分比的请求失败。</p><ol><li><strong>错误率百分比</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  sum(rate(flask_http_request_duration_seconds_count&#123;status=~&quot;4..|5..&quot;&#125;[5m])) </span><br><span class="line">  / </span><br><span class="line">  sum(rate(flask_http_request_duration_seconds_count[5m]))</span><br><span class="line">) * 100</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：错误率除以总请求率的百分比</li></ul></li></ol><h4 id="d部分饱和度资源使用"><a class="markdownIt-Anchor" href="#d部分饱和度资源使用"></a> D部分：饱和度（资源使用）</h4><p><strong>目标</strong>：监控CPU和内存使用情况以检测资源瓶颈。</p><ol><li><p><strong>容器CPU使用率</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rate(container_cpu_usage_seconds_total&#123;id=~&quot;/docker/.*&quot;&#125;[5m]) * 100</span><br></pre></td></tr></table></figure></li><li><p><strong>容器内存使用量</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">container_memory_usage_bytes&#123;id=~&quot;/docker/.*&quot;&#125; / 1024 / 1024</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习2grafana仪表板创建"><a class="markdownIt-Anchor" href="#练习2grafana仪表板创建"></a> 练习2：Grafana仪表板创建</h3><p>本练习教您为相同的黄金信号创建Grafana仪表板，包含可视化图表和告警。</p><h4 id="准备工作-2"><a class="markdownIt-Anchor" href="#准备工作-2"></a> 准备工作</h4><ol><li>打开Grafana：<a href="http://localhost:3000">http://localhost:3000</a></li><li>登录：<code>admin</code> / <code>foobar</code></li><li>生成流量：<code>./generate_traffic.sh demo</code></li></ol><h4 id="a部分配置prometheus数据源"><a class="markdownIt-Anchor" href="#a部分配置prometheus数据源"></a> A部分：配置Prometheus数据源</h4><p><strong>重要</strong>：创建仪表板前，必须将Grafana连接到Prometheus。</p><ol><li><p><strong>添加数据源</strong>：</p><ul><li>在Grafana中，点击左侧边栏的**“Connections”**</li><li>点击**“Data sources”**</li><li>点击**“Add data source”**</li><li>选择**“Prometheus”**</li></ul></li><li><p><strong>配置Prometheus连接</strong>：</p><ul><li><strong>名称</strong>：<code>Prometheus</code></li><li><strong>URL</strong>：<code>http://prometheus:9090</code>（Docker内部网络）</li><li><strong>访问</strong>：Server（默认）</li><li>其他设置保持默认</li></ul></li><li><p><strong>测试连接</strong>：</p><ul><li>滚动到底部点击**“Save &amp; test”**</li><li>应显示：<strong>“Data source is working”</strong> ✅</li></ul></li></ol><h4 id="b部分创建您的第一个仪表板"><a class="markdownIt-Anchor" href="#b部分创建您的第一个仪表板"></a> B部分：创建您的第一个仪表板</h4><ol><li><p><strong>创建新仪表板</strong>：</p><ul><li>点击左侧边栏的**“+”** → <strong>“Dashboard”</strong></li><li>点击**“+ Create dashboard”**</li><li>点击**“+ Add visualization”**</li></ul></li><li><p><strong>流量面板 - 请求率</strong>：</p><ul><li><strong>面板标题</strong>：更改为&quot;请求率 (req/s)&quot;</li><li><strong>查询</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum(rate(flask_http_request_duration_seconds_count[5m])) by (path)</span><br></pre></td></tr></table></figure></li><li><strong>单位</strong>：设置为&quot;requests/sec&quot;</li></ul></li><li><p><strong>延迟监控面板</strong>：</p><ul><li><strong>面板标题</strong>：“响应时间百分位数”</li><li><strong>查询A</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">histogram_quantile(0.95, rate(flask_http_request_duration_seconds_bucket[5m]))</span><br></pre></td></tr></table></figure></li><li><strong>图例A</strong>：“p95”</li></ul></li><li><p><strong>错误率面板</strong>：</p><ul><li><strong>面板标题</strong>：“错误率 %”</li><li><strong>查询</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(sum(rate(flask_http_request_duration_seconds_count&#123;status=~&quot;4..|5..&quot;&#125;[5m])) / sum(rate(flask_http_request_duration_seconds_count[5m]))) * 100</span><br></pre></td></tr></table></figure></li><li><strong>可视化</strong>：Stat（单一数字）</li><li><strong>阈值</strong>：黄色：1，红色：5</li></ul></li><li><p><strong>保存仪表板</strong>：</p><ul><li>点击顶部的**“Save”**（磁盘图标）</li><li><strong>名称</strong>：“四大黄金信号工作坊”</li><li>点击<strong>Save</strong></li></ul></li></ol><h2 id="故障排除"><a class="markdownIt-Anchor" href="#故障排除"></a> 🔧 故障排除</h2><h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3><h4 id="服务无法启动"><a class="markdownIt-Anchor" href="#服务无法启动"></a> 服务无法启动</h4><p>如果服务启动失败或有依赖错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查特定服务的日志</span></span><br><span class="line">docker-compose logs &lt;service_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启所有服务</span></span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查状态（所有应显示&quot;Up&quot;）</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h4 id="prometheus无法抓取目标"><a class="markdownIt-Anchor" href="#prometheus无法抓取目标"></a> Prometheus无法抓取目标</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查Prometheus目标</span></span><br><span class="line">curl http://localhost:9090/api/v1/targets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查应用指标端点是否可访问</span></span><br><span class="line">curl http://localhost:3001/metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络连接</span></span><br><span class="line">docker network inspect prometheus_default</span><br></pre></td></tr></table></figure><h4 id="应用健康检查"><a class="markdownIt-Anchor" href="#应用健康检查"></a> 应用健康检查</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查应用日志</span></span><br><span class="line">docker-compose logs webapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证所有服务正在运行</span></span><br><span class="line">docker-compose ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试应用端点</span></span><br><span class="line">curl http://localhost:3001/health</span><br><span class="line">curl http://localhost:3001/metrics</span><br></pre></td></tr></table></figure><h4 id="完全重置"><a class="markdownIt-Anchor" href="#完全重置"></a> 完全重置</h4><p>完全重置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down -v</span><br><span class="line"><span class="comment"># 等待片刻，然后重启：</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 等待2-3分钟让所有服务变健康</span></span><br></pre></td></tr></table></figure><h2 id="学习目标"><a class="markdownIt-Anchor" href="#学习目标"></a> 🎓 学习目标</h2><p>完成这些练习后，您将掌握：</p><p>✅ <strong>PromQL基础</strong>：</p><ul><li><code>rate()</code>计算每秒速率</li><li><code>sum()</code>聚合指标</li><li><code>histogram_quantile()</code>计算百分位数</li><li>标签过滤<code>&#123;status=~&quot;4..|5..&quot;&#125;</code></li><li>分组<code>by (label)</code></li></ul><p>✅ <strong>四大黄金信号监控</strong>：</p><ul><li>流量：请求率和流量</li><li>延迟：响应时间百分位数（p95、p99）</li><li>错误：错误率和错误类型</li><li>饱和度：资源使用和容量</li></ul><p>✅ <strong>Grafana技能</strong>：</p><ul><li>创建仪表板和面板</li><li>使用不同的可视化类型</li><li>设置告警和阈值</li><li>配置图例和单位</li></ul><p>✅ <strong>实用监控</strong>：</p><ul><li>哪些指标对应用健康重要</li><li>如何检测性能问题</li><li>设置有意义的告警阈值</li><li>解释监控数据</li></ul><h2 id="扩展学习"><a class="markdownIt-Anchor" href="#扩展学习"></a> 📚 扩展学习</h2><p>完成本教学后，建议继续学习：</p><ol><li><strong>告警规则配置</strong>：学习Alertmanager配置</li><li><strong>高级PromQL</strong>：复杂查询和函数</li><li><strong>监控最佳实践</strong>：SLI/SLO设计</li><li><strong>性能优化</strong>：监控系统本身的优化</li><li><strong>生产部署</strong>：高可用Prometheus集群</li></ol><hr /><p><strong>项目作者</strong>：监控系统教学团队<br /><strong>最后更新</strong>：2025年7月27日<br /><strong>版本</strong>：v1.0</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible入门</title>
      <link href="/cd6555aa.html"/>
      <url>/cd6555aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="ansible-完整中文使用指南"><a class="markdownIt-Anchor" href="#ansible-完整中文使用指南"></a> Ansible 完整中文使用指南</h1><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 📚 目录</h2><ol><li><p><a href="#ansible-%E7%AE%80%E4%BB%8B">Ansible 简介</a></p></li><li><p><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a></p></li><li><p><a href="#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE">基础配置</a></p></li><li><p><a href="#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">基础概念</a></p></li><li><p><a href="#ad-hoc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8">Ad-hoc 命令使用</a></p></li><li><p><a href="#playbook-%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97">Playbook 编写指南</a></p></li><li><p><a href="#%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3">常用模块详解</a></p></li><li><p><a href="#%E5%AE%9E%E6%88%98%E7%A4%BA%E4%BE%8B">实战示例</a></p></li><li><p><a href="#%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD">高级功能</a></p></li><li><p><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></p></li><li><p><a href="#%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">故障排查</a></p></li></ol><hr /><h2 id="ansible-简介"><a class="markdownIt-Anchor" href="#ansible-简介"></a> Ansible 简介</h2><p>Ansible 是一个开源的自动化工具，用于配置管理、应用部署、任务编排和基础设施管理。它具有以下特点：</p><h3 id="核心优势"><a class="markdownIt-Anchor" href="#核心优势"></a> 核心优势</h3><ul><li><p><strong>无代理架构</strong>：只需要 SSH 连接，无需在目标主机安装代理</p></li><li><p><strong>简单易学</strong>：使用 YAML 语法，可读性强</p></li><li><p><strong>幂等性</strong>：多次执行相同操作结果一致</p></li><li><p><strong>声明式</strong>：描述期望状态而非具体步骤</p></li></ul><h3 id="核心组件"><a class="markdownIt-Anchor" href="#核心组件"></a> 核心组件</h3><ul><li><p><strong>控制节点（Control Node）</strong>：运行 Ansible 的机器</p></li><li><p><strong>被管理节点（Managed Nodes）</strong>：被 Ansible 管理的服务器</p></li><li><p><strong>清单（Inventory）</strong>：定义被管理节点的文件</p></li><li><p><strong>模块（Modules）</strong>：执行具体任务的代码单元</p></li><li><p><strong>剧本（Playbooks）</strong>：定义自动化任务的 YAML 文件</p></li></ul><hr /><h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><h3 id="level-0-使用-terraform-搭建环境"><a class="markdownIt-Anchor" href="#level-0-使用-terraform-搭建环境"></a> Level 0: 使用 Terraform 搭建环境</h3><h4 id="1-生成-ssh-密钥对"><a class="markdownIt-Anchor" href="#1-生成-ssh-密钥对"></a> 1. 生成 SSH 密钥对</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ssh-keygen -t rsa -f deployer-key.pem -q -N <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-部署基础设施"><a class="markdownIt-Anchor" href="#2-部署基础设施"></a> 2. 部署基础设施</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Terraform</span></span><br><span class="line"></span><br><span class="line">terraform init</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用配置，创建 AWS EC2 实例</span></span><br><span class="line"></span><br><span class="line">terraform apply</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-环境配置"><a class="markdownIt-Anchor" href="#3-环境配置"></a> 3. 环境配置</h4><p>基础设施包括：</p><ul><li><p><strong>Ansible 服务器</strong>：Amazon Linux 2，预装 Ansible</p></li><li><p><strong>客户端节点</strong>：Ubuntu 22.04</p></li><li><p><strong>安全组</strong>：允许 SSH (22 端口) 访问</p></li></ul><h4 id="4-ssh-连接配置"><a class="markdownIt-Anchor" href="#4-ssh-连接配置"></a> 4. SSH 连接配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1. 将私钥复制到 Ansible 服务器</span></span><br><span class="line"></span><br><span class="line">scp -i ./deployer-key.pem deployer-key.pem ec2-user@&lt;ansible_server_ip&gt;:~/.ssh</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 连接到 Ansible 服务器</span></span><br><span class="line"></span><br><span class="line">ssh -i ./deployer-key.pem ec2-user@&lt;ansible_server_ip&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 在 Ansible 服务器上创建 SSH 配置</span></span><br><span class="line"></span><br><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SSH 配置内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Host &lt;client_ip&gt;</span><br><span class="line"></span><br><span class="line">    User ubuntu</span><br><span class="line"></span><br><span class="line">    IdentityFile ~/.ssh/deployer-key.pem</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="基础配置"><a class="markdownIt-Anchor" href="#基础配置"></a> 基础配置</h2><h3 id="ansiblecfg-配置文件"><a class="markdownIt-Anchor" href="#ansiblecfg-配置文件"></a> ansible.cfg 配置文件</h3><p>在项目目录创建 <code>ansible.cfg</code> 文件：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用主机密钥检查（生产环境建议开启）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定清单文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inventory</span> = hosts</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认远程用户</span></span><br><span class="line"></span><br><span class="line"><span class="attr">remote_user</span> = ubuntu</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">private_key_file</span> = ~/.ssh/deployer-key.pem</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 并发连接数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">forks</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log_path</span> = ./ansible.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="清单文件-hosts"><a class="markdownIt-Anchor" href="#清单文件-hosts"></a> 清单文件 (hosts)</h3><p>创建 <code>hosts</code> 文件定义被管理的主机：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 基本格式</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tag_node]</span></span><br><span class="line"></span><br><span class="line">192.168.1.100</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 带变量的格式</span></span><br><span class="line"></span><br><span class="line"><span class="section">[webservers]</span></span><br><span class="line"></span><br><span class="line">web1 <span class="attr">ansible_host</span>=<span class="number">192.168</span>.<span class="number">1.100</span> ansible_user=ubuntu</span><br><span class="line"></span><br><span class="line">web2 <span class="attr">ansible_host</span>=<span class="number">192.168</span>.<span class="number">1.101</span> ansible_user=ubuntu</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机组变量</span></span><br><span class="line"></span><br><span class="line"><span class="section">[webservers:vars]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http_port</span>=<span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">max_clients</span>=<span class="number">200</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套组</span></span><br><span class="line"></span><br><span class="line"><span class="section">[production:children]</span></span><br><span class="line"></span><br><span class="line">webservers</span><br><span class="line"></span><br><span class="line">databases</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h2><h3 id="yaml-语法基础"><a class="markdownIt-Anchor" href="#yaml-语法基础"></a> YAML 语法基础</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键值对</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;Ansible Tutorial&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.9</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串</span></span><br><span class="line"></span><br><span class="line"><span class="attr">description:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">  <span class="string">这是一个多行</span></span><br><span class="line"></span><br><span class="line">  <span class="string">字符串示例</span></span><br><span class="line"></span><br><span class="line">  <span class="string">保持换行格式</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ansible-变量"><a class="markdownIt-Anchor" href="#ansible-变量"></a> Ansible 变量</h3><h4 id="变量定义方式"><a class="markdownIt-Anchor" href="#变量定义方式"></a> 变量定义方式</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">http_port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server_name:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">使用变量</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;服务器 <span class="template-variable">&#123;&#123; server_name &#125;&#125;</span> 监听端口 <span class="template-variable">&#123;&#123; http_port &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="变量优先级从高到低"><a class="markdownIt-Anchor" href="#变量优先级从高到低"></a> 变量优先级（从高到低）</h4><ol><li><p>命令行变量 (<code>-e</code>)</p></li><li><p>任务变量</p></li><li><p>剧本变量</p></li><li><p>主机变量</p></li><li><p>组变量</p></li><li><p>默认变量</p></li></ol><hr /><h2 id="ad-hoc-命令使用"><a class="markdownIt-Anchor" href="#ad-hoc-命令使用"></a> Ad-hoc 命令使用</h2><p>Ad-hoc 命令用于执行简单的一次性任务，非常适合开发和调试阶段。</p><h3 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ansible [主机模式] -m [模块名] -a <span class="string">&quot;[模块参数]&quot;</span> [其他选项]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用-ad-hoc-命令示例"><a class="markdownIt-Anchor" href="#常用-ad-hoc-命令示例"></a> 常用 Ad-hoc 命令示例</h3><h4 id="1-连通性测试"><a class="markdownIt-Anchor" href="#1-连通性测试"></a> 1. 连通性测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 测试所有主机连通性</span></span><br><span class="line"></span><br><span class="line">ansible all -m ping</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试特定组</span></span><br><span class="line"></span><br><span class="line">ansible webservers -m ping</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试特定主机</span></span><br><span class="line"></span><br><span class="line">ansible web1 -m ping</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-收集系统信息"><a class="markdownIt-Anchor" href="#2-收集系统信息"></a> 2. 收集系统信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 收集所有系统信息</span></span><br><span class="line"></span><br><span class="line">ansible all -m setup</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集特定信息</span></span><br><span class="line"></span><br><span class="line">ansible all -m setup -a <span class="string">&quot;filter=ansible_os_family&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示内存信息</span></span><br><span class="line"></span><br><span class="line">ansible all -m setup -a <span class="string">&quot;filter=ansible_memory_mb&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-包管理"><a class="markdownIt-Anchor" href="#3-包管理"></a> 3. 包管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装软件包</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m apt -a <span class="string">&quot;name=nginx state=present&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装多个包</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m apt -a <span class="string">&quot;name=nginx,mysql-server state=present&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新包缓存</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m apt -a <span class="string">&quot;update_cache=yes&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载软件包</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m apt -a <span class="string">&quot;name=nginx state=absent&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-服务管理"><a class="markdownIt-Anchor" href="#4-服务管理"></a> 4. 服务管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m systemd -a <span class="string">&quot;name=nginx state=started&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m systemd -a <span class="string">&quot;name=nginx state=stopped&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m systemd -a <span class="string">&quot;name=nginx state=restarted&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置服务开机启动</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m systemd -a <span class="string">&quot;name=nginx enabled=yes&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-用户管理"><a class="markdownIt-Anchor" href="#5-用户管理"></a> 5. 用户管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m user -a <span class="string">&quot;name=testuser shell=/bin/bash&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户并设置密码</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m user -a <span class="string">&quot;name=testuser password=&#123;&#123; &#x27;password123&#x27; | password_hash(&#x27;sha512&#x27;) &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"></span><br><span class="line">ansible all -b -m user -a <span class="string">&quot;name=testuser state=absent remove=yes&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-文件操作"><a class="markdownIt-Anchor" href="#6-文件操作"></a> 6. 文件操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line"></span><br><span class="line">ansible all -m copy -a <span class="string">&quot;src=/etc/hosts dest=/tmp/hosts&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"></span><br><span class="line">ansible all -m file -a <span class="string">&quot;path=/tmp/testdir state=directory mode=0755&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"></span><br><span class="line">ansible all -m file -a <span class="string">&quot;path=/tmp/testfile state=absent&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line"></span><br><span class="line">ansible all -m file -a <span class="string">&quot;path=/tmp/testfile mode=0644 owner=ubuntu group=ubuntu&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-命令执行"><a class="markdownIt-Anchor" href="#7-命令执行"></a> 7. 命令执行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 执行简单命令</span></span><br><span class="line"></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;uptime&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 shell 命令（支持管道等）</span></span><br><span class="line"></span><br><span class="line">ansible all -m shell -a <span class="string">&quot;ps aux | grep nginx&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在特定目录执行命令</span></span><br><span class="line"></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;ls -la&quot;</span> -a <span class="string">&quot;chdir=/tmp&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重要选项说明"><a class="markdownIt-Anchor" href="#重要选项说明"></a> 重要选项说明</h3><ul><li><p><code>-b, --become</code>：使用特权提升（sudo）</p></li><li><p><code>-u USER</code>：指定远程用户</p></li><li><p><code>-i INVENTORY</code>：指定清单文件</p></li><li><p><code>-l LIMIT</code>：限制执行的主机</p></li><li><p><code>-f FORKS</code>：指定并发数</p></li><li><p><code>--check</code>：检查模式，不实际执行</p></li><li><p><code>--diff</code>：显示更改差异</p></li></ul><hr /><h2 id="playbook-编写指南"><a class="markdownIt-Anchor" href="#playbook-编写指南"></a> Playbook 编写指南</h2><h3 id="level-1-基础-playbook"><a class="markdownIt-Anchor" href="#level-1-基础-playbook"></a> Level 1: 基础 Playbook</h3><h4 id="1-第一个-playbook-firstyaml"><a class="markdownIt-Anchor" href="#1-第一个-playbook-firstyaml"></a> 1. 第一个 Playbook (<code>first.yaml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;我的第一个 Playbook&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;测试连通性&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ansible-playbook first.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-hello-world-示例-helloworldyaml"><a class="markdownIt-Anchor" href="#2-hello-world-示例-helloworldyaml"></a> 2. Hello World 示例 (<code>helloworld.yaml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">我的第二个</span> <span class="string">Playbook</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">打印</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-多任务-playbook-mtaskyaml"><a class="markdownIt-Anchor" href="#3-多任务-playbook-mtaskyaml"></a> 3. 多任务 Playbook (<code>mtask.yaml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">运行多个任务</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">测试连通性</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">打印</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="level-2-远程主机-playbook"><a class="markdownIt-Anchor" href="#level-2-远程主机-playbook"></a> Level 2: 远程主机 Playbook</h3><h4 id="远程连通性测试-rfirstyaml"><a class="markdownIt-Anchor" href="#远程连通性测试-rfirstyaml"></a> 远程连通性测试 (<code>rfirst.yaml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;远程主机测试&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;测试远程连通性&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="playbook-结构说明"><a class="markdownIt-Anchor" href="#playbook-结构说明"></a> Playbook 结构说明</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 剧本开始标记</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;剧本描述&quot;</span> <span class="comment"># 剧本名称（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">target_hosts</span> <span class="comment"># 目标主机或主机组</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span> <span class="comment"># 是否使用特权提升（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">root</span> <span class="comment"># 特权提升到的用户（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ubuntu</span> <span class="comment"># 连接用户（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">yes</span> <span class="comment"># 是否收集主机信息（默认yes）</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span> <span class="comment"># 变量定义</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">variable_name:</span> <span class="string">value</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span> <span class="comment"># 任务列表</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;任务描述&quot;</span> <span class="comment"># 任务名称</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">module_name:</span> <span class="comment"># 模块名称</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">parameter:</span> <span class="string">value</span> <span class="comment"># 模块参数</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span> <span class="comment"># 保存任务结果（可选）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">when:</span> <span class="string">condition</span> <span class="comment"># 执行条件（可选）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">handler_name</span> <span class="comment"># 触发处理器（可选）</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span> <span class="comment"># 处理器定义（可选）</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;处理器名称&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">module_name:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">parameter:</span> <span class="string">value</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="常用模块详解"><a class="markdownIt-Anchor" href="#常用模块详解"></a> 常用模块详解</h2><h3 id="1-包管理模块-apt"><a class="markdownIt-Anchor" href="#1-包管理模块-apt"></a> 1. 包管理模块 (<code>apt</code>)</h3><h4 id="基础用法示例-1-builtin-aptyml"><a class="markdownIt-Anchor" href="#基础用法示例-1-builtin-aptyml"></a> 基础用法示例 (<code>1-builtin-apt.yml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">tag_node</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装单个软件包</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装多个软件包</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装软件包列表</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">pkg:</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">lsb-release</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">gnupg</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">zip</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 卸载软件包</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">卸载</span> <span class="string">zip</span> <span class="string">包</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">zip</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加 GPG 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">添加</span> <span class="string">Docker</span> <span class="string">GPG</span> <span class="string">密钥</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.apt_key:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">url:</span> <span class="string">&quot;https://download.docker.com/linux/<span class="template-variable">&#123;&#123; ansible_distribution | lower &#125;&#125;</span>/gpg&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加软件源</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">添加</span> <span class="string">Docker</span> <span class="string">软件源</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.apt_repository:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">repo:</span> <span class="string">&quot;deb [arch=<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>] https://download.docker.com/linux/<span class="template-variable">&#123;&#123; ansible_distribution | lower &#125;&#125;</span> <span class="template-variable">&#123;&#123; ansible_distribution_release &#125;&#125;</span> stable&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">filename:</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装 Docker</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Docker</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">docker.io</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">docker-compose</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">docker-registry</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="apt-模块参数说明"><a class="markdownIt-Anchor" href="#apt-模块参数说明"></a> apt 模块参数说明</h4><ul><li><p><code>name</code>：软件包名称</p></li><li><p><code>state</code>：包状态（present/absent/latest）</p></li><li><p><code>update_cache</code>：是否更新包缓存</p></li><li><p><code>pkg</code>：软件包列表</p></li><li><p><code>force</code>：强制安装</p></li><li><p><code>purge</code>：卸载时是否清除配置文件</p></li></ul><h3 id="2-用户和组管理模块"><a class="markdownIt-Anchor" href="#2-用户和组管理模块"></a> 2. 用户和组管理模块</h3><h4 id="示例-2-builtin-user-groupyml"><a class="markdownIt-Anchor" href="#示例-2-builtin-user-groupyml"></a> 示例 (<code>2-builtin-user-group.yml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">tag_node</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建组</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建</span> <span class="string">devops</span> <span class="string">组</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.group:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">devops</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除组</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">删除</span> <span class="string">docker</span> <span class="string">组</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.group:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建用户</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">添加用户</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.user:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/bin/bash</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">group:</span> <span class="string">devops</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建用户并指定多个组</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">添加用户</span> <span class="string">william</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.user:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">william</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">comment:</span> <span class="string">William</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">1040</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">sudo,admin,devops</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">append:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除用户</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">删除用户</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.user:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">remove:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为用户生成 SSH 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">为</span> <span class="string">william</span> <span class="string">生成</span> <span class="string">SSH</span> <span class="string">密钥</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.user:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">william</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">generate_ssh_key:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ssh_key_bits:</span> <span class="number">2048</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ssh_key_file:</span> <span class="string">.ssh/id_rsa</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="user-模块主要参数"><a class="markdownIt-Anchor" href="#user-模块主要参数"></a> user 模块主要参数</h4><ul><li><p><code>name</code>：用户名</p></li><li><p><code>state</code>：用户状态（present/absent）</p></li><li><p><code>shell</code>：默认 shell</p></li><li><p><code>home</code>：家目录</p></li><li><p><code>groups</code>：附加组列表</p></li><li><p><code>append</code>：是否追加到组（而非替换）</p></li><li><p><code>remove</code>：删除用户时是否删除家目录</p></li><li><p><code>generate_ssh_key</code>：是否生成 SSH 密钥</p></li></ul><h3 id="3-文件和目录管理模块"><a class="markdownIt-Anchor" href="#3-文件和目录管理模块"></a> 3. 文件和目录管理模块</h3><h4 id="示例-3-builtin-file-copyyml"><a class="markdownIt-Anchor" href="#示例-3-builtin-file-copyyml"></a> 示例 (<code>3-builtin-file-copy.yml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">tag_node</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">demo_files:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ubuntu/ansible/demo1.conf</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ubuntu/ansible/demo2.conf</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ubuntu/ansible/demo3.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">demo_directories:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ubuntu/ansible/1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ubuntu/ansible/2</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目录</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建目录</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0755&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; demo_directories &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建文件</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建文件</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">touch</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">u=rw,g=r,o=r</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; demo_files &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归修改目录权限</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">递归修改目录所有权</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/ubuntu/ansible/</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">recurse:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">group:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改特定文件权限</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">修改文件权限</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/ubuntu/ansible/demo2.conf</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">william</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">group:</span> <span class="string">devops</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0644&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文件</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">删除文件</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/ubuntu/ansible/demo2.conf</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复制文件</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">复制本地文件到远程</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.copy:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/zshrc</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/home/ubuntu/ansible/</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">william</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">group:</span> <span class="string">devops</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0644&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 远程复制</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">远程文件复制</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.copy:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/home/ubuntu/ansible/zshrc</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/home/ubuntu/ansible/zshrc.backup</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">remote_src:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归删除目录</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">递归删除目录</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/ubuntu/ansible/</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="file-模块参数说明"><a class="markdownIt-Anchor" href="#file-模块参数说明"></a> file 模块参数说明</h4><ul><li><p><code>path</code>：文件/目录路径</p></li><li><p><code>state</code>：状态（file/directory/touch/absent/link）</p></li><li><p><code>mode</code>：权限（数字或符号模式）</p></li><li><p><code>owner</code>：所有者</p></li><li><p><code>group</code>：所属组</p></li><li><p><code>recurse</code>：是否递归操作</p></li></ul><h4 id="copy-模块参数说明"><a class="markdownIt-Anchor" href="#copy-模块参数说明"></a> copy 模块参数说明</h4><ul><li><p><code>src</code>：源文件路径</p></li><li><p><code>dest</code>：目标路径</p></li><li><p><code>remote_src</code>：源文件是否在远程主机</p></li><li><p><code>backup</code>：是否备份原文件</p></li><li><p><code>force</code>：是否强制覆盖</p></li></ul><h3 id="4-服务管理模块"><a class="markdownIt-Anchor" href="#4-服务管理模块"></a> 4. 服务管理模块</h3><h4 id="示例-4-builtin-service-systemdyml"><a class="markdownIt-Anchor" href="#示例-4-builtin-service-systemdyml"></a> 示例 (<code>4-builtin-service-systemd.yml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">tag_node</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 停止服务</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">停止</span> <span class="string">nginx</span> <span class="string">服务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.service:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">stopped</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 禁用服务</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">禁用</span> <span class="string">nginx</span> <span class="string">服务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.service:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动服务</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启动</span> <span class="string">nginx</span> <span class="string">服务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.service:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启用服务</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启用</span> <span class="string">nginx</span> <span class="string">服务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.service:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="service-模块参数"><a class="markdownIt-Anchor" href="#service-模块参数"></a> service 模块参数</h4><ul><li><p><code>name</code>：服务名称</p></li><li><p><code>state</code>：服务状态（started/stopped/restarted/reloaded）</p></li><li><p><code>enabled</code>：是否开机启动（yes/no）</p></li></ul><h3 id="5-命令执行模块"><a class="markdownIt-Anchor" href="#5-命令执行模块"></a> 5. 命令执行模块</h3><h4 id="示例-5-builtin-command-shellyml"><a class="markdownIt-Anchor" href="#示例-5-builtin-command-shellyml"></a> 示例 (<code>5-builtin-command-shell.yml</code>)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">tag_node</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 command 模块</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">在指定目录创建文件</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.command:</span> <span class="string">touch</span> <span class="number">2.</span><span class="string">txt</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">chdir:</span> <span class="string">/home/ubuntu/ansible/2/</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 shell 模块</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">执行</span> <span class="string">shell</span> <span class="string">命令</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ansible.builtin.shell:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cmd:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">ls</span> <span class="string">-la</span> <span class="string">./2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">chdir:</span> <span class="string">/home/ubuntu/ansible</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="command-vs-shell-模块对比"><a class="markdownIt-Anchor" href="#command-vs-shell-模块对比"></a> command vs shell 模块对比</h4><p>| 特性     | command | shell |</p><p>| -------- | ------- | ----- |</p><p>| 管道支持 | ❌      | ✅    |</p><p>| 重定向   | ❌      | ✅    |</p><p>| 环境变量 | ❌      | ✅    |</p><p>| 安全性   | 更高    | 较低  |</p><p>| 性能     | 更快    | 较慢  |</p><hr /><h2 id="实战示例"><a class="markdownIt-Anchor" href="#实战示例"></a> 实战示例</h2><h3 id="完整的-web-服务器部署-playbook"><a class="markdownIt-Anchor" href="#完整的-web-服务器部署-playbook"></a> 完整的 Web 服务器部署 Playbook</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span> <span class="string">Web</span> <span class="string">服务器</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">web_user:</span> <span class="string">www-data</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">web_group:</span> <span class="string">www-data</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">site_name:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">document_root:</span> <span class="string">/var/www/&#123;&#123;</span> <span class="string">site_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 更新系统</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新包缓存</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cache_valid_time:</span> <span class="number">3600</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 安装必要软件</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Web</span> <span class="string">服务器软件</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">pkg:</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php-fpm</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">mysql-server</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 创建网站目录</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建网站目录</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; document_root &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; web_user &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; web_group &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0755&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 部署网站文件</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建测试页面</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">content:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;!DOCTYPE</span> <span class="string">html&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;html&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;head&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="string">&lt;title&gt;&#123;&#123;</span> <span class="string">site_name</span> <span class="string">&#125;&#125;&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;body&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="string">&lt;h1&gt;欢迎访问</span> &#123;&#123; <span class="string">site_name</span> &#125;&#125;<span class="string">&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="string">&lt;p&gt;服务器时间:</span> &#123;&#123; <span class="string">ansible_date_time.iso8601</span> &#125;&#125;<span class="string">&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;/body&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; document_root &#125;&#125;</span>/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; web_user &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; web_group &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0644&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 配置 Nginx</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置</span> <span class="string">Nginx</span> <span class="string">虚拟主机</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">src:</span> <span class="string">nginx-site.conf.j2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">&quot;/etc/nginx/sites-available/<span class="template-variable">&#123;&#123; site_name &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6. 启用站点</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启用</span> <span class="string">Nginx</span> <span class="string">站点</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">src:</span> <span class="string">&quot;/etc/nginx/sites-available/<span class="template-variable">&#123;&#123; site_name &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">&quot;/etc/nginx/sites-enabled/<span class="template-variable">&#123;&#123; site_name &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">link</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7. 启动服务</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启动并启用服务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">loop:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">php7.4-fpm</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nginx-配置模板-templatesnginx-siteconfj2"><a class="markdownIt-Anchor" href="#nginx-配置模板-templatesnginx-siteconfj2"></a> Nginx 配置模板 (<code>templates/nginx-site.conf.j2</code>)</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server_name</span> &#123;&#123; <span class="attribute">site_name</span> &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="section">root</span> &#123;&#123; <span class="attribute">document_root</span> &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php/php7.4-fpm.sock;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/&#123;&#123; <span class="attribute">site_name</span> &#125;&#125;_error.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/&#123;&#123; <span class="attribute">site_name</span> &#125;&#125;_access.log;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="高级功能"><a class="markdownIt-Anchor" href="#高级功能"></a> 高级功能</h2><h3 id="1-ansible-vault-敏感数据加密"><a class="markdownIt-Anchor" href="#1-ansible-vault-敏感数据加密"></a> 1. Ansible Vault - 敏感数据加密</h3><h4 id="创建加密文件"><a class="markdownIt-Anchor" href="#创建加密文件"></a> 创建加密文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建新的加密文件</span></span><br><span class="line"></span><br><span class="line">ansible-vault create secret.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑加密文件</span></span><br><span class="line"></span><br><span class="line">ansible-vault edit secret.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看加密文件</span></span><br><span class="line"></span><br><span class="line">ansible-vault view secret.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密现有文件</span></span><br><span class="line"></span><br><span class="line">ansible-vault encrypt plain.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密文件</span></span><br><span class="line"></span><br><span class="line">ansible-vault decrypt secret.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在-playbook-中使用加密变量"><a class="markdownIt-Anchor" href="#在-playbook-中使用加密变量"></a> 在 Playbook 中使用加密变量</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">secret.yml</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">使用加密的密码</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;数据库密码是: <span class="template-variable">&#123;&#123; db_password &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行使用加密文件的-playbook"><a class="markdownIt-Anchor" href="#运行使用加密文件的-playbook"></a> 运行使用加密文件的 Playbook</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 交互式输入密码</span></span><br><span class="line"></span><br><span class="line">ansible-playbook --ask-vault-pass playbook.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用密码文件</span></span><br><span class="line"></span><br><span class="line">ansible-playbook --vault-password-file .vault_pass playbook.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-模板-templates"><a class="markdownIt-Anchor" href="#2-模板-templates"></a> 2. 模板 (Templates)</h3><h4 id="jinja2-模板示例"><a class="markdownIt-Anchor" href="#jinja2-模板示例"></a> Jinja2 模板示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 配置文件模板 (templates/app.conf.j2)</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line"></span><br><span class="line">host = &#123;&#123; db_host | default(&#x27;localhost&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">port = &#123;&#123; db_port | default(3306) &#125;&#125;</span><br><span class="line"></span><br><span class="line">name = &#123;&#123; db_name &#125;&#125;</span><br><span class="line"></span><br><span class="line">user = &#123;&#123; db_user &#125;&#125;</span><br><span class="line"></span><br><span class="line">password = &#123;&#123; db_password &#125;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line"></span><br><span class="line">listen_port = &#123;&#123; web_port | default(80) &#125;&#125;</span><br><span class="line"></span><br><span class="line">workers = &#123;&#123; ansible_processor_vcpus * 2 &#125;&#125;</span><br><span class="line"></span><br><span class="line">debug = &#123;&#123; debug_mode | default(false) | bool &#125;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># 生成配置文件的任务</span><br><span class="line"></span><br><span class="line">- name: 生成应用配置文件</span><br><span class="line"></span><br><span class="line">  template:</span><br><span class="line"></span><br><span class="line">    src: app.conf.j2</span><br><span class="line"></span><br><span class="line">    dest: /etc/myapp/app.conf</span><br><span class="line"></span><br><span class="line">    owner: myapp</span><br><span class="line"></span><br><span class="line">    group: myapp</span><br><span class="line"></span><br><span class="line">    mode: &#x27;0600&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-条件执行"><a class="markdownIt-Anchor" href="#3-条件执行"></a> 3. 条件执行</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于操作系统的条件执行</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">在</span> <span class="string">Ubuntu</span> <span class="string">上安装包</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">&quot;Debian&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">在</span> <span class="string">CentOS</span> <span class="string">上安装包</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">&quot;RedHat&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于变量的条件执行</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">仅在生产环境执行</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">when:</span> <span class="string">environment</span> <span class="string">==</span> <span class="string">&quot;production&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复杂条件</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">复杂条件示例</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;执行此任务&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">when:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ansible_memory_mb.real.total</span> <span class="string">&gt;</span> <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ansible_processor_vcpus</span> <span class="string">&gt;=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">inventory_hostname</span> <span class="string">in</span> <span class="string">groups[&#x27;webservers&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-循环-loops"><a class="markdownIt-Anchor" href="#4-循环-loops"></a> 4. 循环 (Loops)</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alice</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">groups:</span> [<span class="string">sudo</span>, <span class="string">developers</span>]</span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">bob</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">groups:</span> [<span class="string">developers</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="attr">packages:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 简单循环</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装包列表</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; packages &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字典循环</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建用户</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.name &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.groups | join(&#x27;,&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">append:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 范围循环</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建目录</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/tmp/dir<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; range(1, 6) | list &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件循环</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">复制配置文件</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">src:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">&quot;/etc/myapp/&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">with_fileglob:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;configs/*.conf&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-错误处理"><a class="markdownIt-Anchor" href="#5-错误处理"></a> 5. 错误处理</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 忽略错误</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">可能失败的任务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/some/command</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于返回码决定是否失败</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查返回码</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/some/command</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">failed_when:</span> <span class="string">result.rc</span> <span class="type">!=</span> <span class="number">0</span> <span class="string">and</span> <span class="string">result.rc</span> <span class="type">!=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重试机制</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">重试下载</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">get_url:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://example.com/file.zip</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/file.zip</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">delay:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 救援任务</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">主要任务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">block:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">尝试执行的任务</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">command:</span> <span class="string">/risky/command</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">rescue:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">失败时执行的任务</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">&quot;主要任务失败，执行救援任务&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">always:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">总是执行的任务</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">&quot;清理工作&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-roles-代码重用"><a class="markdownIt-Anchor" href="#6-roles-代码重用"></a> 6. Roles - 代码重用</h3><h4 id="role-目录结构"><a class="markdownIt-Anchor" href="#role-目录结构"></a> Role 目录结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">roles/</span><br><span class="line"></span><br><span class="line">└── nginx/</span><br><span class="line"></span><br><span class="line">    ├── tasks/</span><br><span class="line"></span><br><span class="line">    │   └── main.yml</span><br><span class="line"></span><br><span class="line">    ├── handlers/</span><br><span class="line"></span><br><span class="line">    │   └── main.yml</span><br><span class="line"></span><br><span class="line">    ├── templates/</span><br><span class="line"></span><br><span class="line">    │   └── nginx.conf.j2</span><br><span class="line"></span><br><span class="line">    ├── files/</span><br><span class="line"></span><br><span class="line">    ├── vars/</span><br><span class="line"></span><br><span class="line">    │   └── main.yml</span><br><span class="line"></span><br><span class="line">    ├── defaults/</span><br><span class="line"></span><br><span class="line">    │   └── main.yml</span><br><span class="line"></span><br><span class="line">    └── meta/</span><br><span class="line"></span><br><span class="line">        └── main.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="role-使用示例"><a class="markdownIt-Anchor" href="#role-使用示例"></a> Role 使用示例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">php</span>, <span class="attr">version:</span> <span class="number">7.4</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="最佳实践"><a class="markdownIt-Anchor" href="#最佳实践"></a> 最佳实践</h2><h3 id="1-目录结构组织"><a class="markdownIt-Anchor" href="#1-目录结构组织"></a> 1. 目录结构组织</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ansible-project/</span><br><span class="line"></span><br><span class="line">├── inventories/</span><br><span class="line"></span><br><span class="line">│   ├── production/</span><br><span class="line"></span><br><span class="line">│   │   ├── hosts</span><br><span class="line"></span><br><span class="line">│   │   └── group_vars/</span><br><span class="line"></span><br><span class="line">│   └── staging/</span><br><span class="line"></span><br><span class="line">│       ├── hosts</span><br><span class="line"></span><br><span class="line">│       └── group_vars/</span><br><span class="line"></span><br><span class="line">├── roles/</span><br><span class="line"></span><br><span class="line">├── playbooks/</span><br><span class="line"></span><br><span class="line">├── group_vars/</span><br><span class="line"></span><br><span class="line">├── host_vars/</span><br><span class="line"></span><br><span class="line">├── ansible.cfg</span><br><span class="line"></span><br><span class="line">└── requirements.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-变量管理"><a class="markdownIt-Anchor" href="#2-变量管理"></a> 2. 变量管理</h3><h4 id="按环境组织变量"><a class="markdownIt-Anchor" href="#按环境组织变量"></a> 按环境组织变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 生产环境变量</span></span><br><span class="line"></span><br><span class="line">inventories/production/group_vars/all.yml</span><br><span class="line"></span><br><span class="line">inventories/production/group_vars/webservers.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试环境变量</span></span><br><span class="line"></span><br><span class="line">inventories/staging/group_vars/all.yml</span><br><span class="line"></span><br><span class="line">inventories/staging/group_vars/webservers.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="敏感数据处理"><a class="markdownIt-Anchor" href="#敏感数据处理"></a> 敏感数据处理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 加密敏感变量</span></span><br><span class="line"></span><br><span class="line">ansible-vault encrypt group_vars/all/vault.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在变量文件中引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># group_vars/all/vars.yml</span></span><br><span class="line"></span><br><span class="line">db_password: <span class="string">&quot;&#123;&#123; vault_db_password &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">api_key: <span class="string">&quot;&#123;&#123; vault_api_key &#125;&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-playbook-编写规范"><a class="markdownIt-Anchor" href="#3-playbook-编写规范"></a> 3. Playbook 编写规范</h3><h4 id="良好的-playbook-结构"><a class="markdownIt-Anchor" href="#良好的-playbook-结构"></a> 良好的 Playbook 结构</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">清晰的</span> <span class="string">Playbook</span> <span class="string">描述</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 变量定义在顶部</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">app_name:</span> <span class="string">myapp</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">app_version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 预任务</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pre_tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新包缓存</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 角色</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 主要任务</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">每个任务都有清晰的描述</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">src:</span> <span class="string">config.j2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/myapp/config.conf</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">restart</span> <span class="string">myapp</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 后任务</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">post_tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">验证服务状态</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">uri:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">status_code:</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 处理器</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">myapp</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-安全考虑"><a class="markdownIt-Anchor" href="#4-安全考虑"></a> 4. 安全考虑</h3><h4 id="安全配置清单"><a class="markdownIt-Anchor" href="#安全配置清单"></a> 安全配置清单</h4><ul><li><p>[ ] 使用 Ansible Vault 加密敏感数据</p></li><li><p>[ ] 限制 sudo 权限，只在必要时使用 <code>become</code></p></li><li><p>[ ] 使用 SSH 密钥而非密码认证</p></li><li><p>[ ] 定期轮换密钥和密码</p></li><li><p>[ ] 在生产环境启用 <code>host_key_checking</code></p></li><li><p>[ ] 使用防火墙限制 SSH 访问</p></li><li><p>[ ] 定期审计 Playbook 和 Role</p></li></ul><h4 id="安全配置示例"><a class="markdownIt-Anchor" href="#安全配置示例"></a> 安全配置示例</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ansible.cfg 安全配置</span></span><br><span class="line"></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ask_pass</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ask_sudo_pass</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">remote_user</span> = ansible</span><br><span class="line"></span><br><span class="line"><span class="attr">private_key_file</span> = ~/.ssh/ansible_key</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="section">[ssh_connection]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ssh_args</span> = -o ControlMaster=auto -o ControlPersist=<span class="number">60</span>s -o StrictHostKeyChecking=<span class="literal">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="故障排查"><a class="markdownIt-Anchor" href="#故障排查"></a> 故障排查</h2><h3 id="1-调试技巧"><a class="markdownIt-Anchor" href="#1-调试技巧"></a> 1. 调试技巧</h3><h4 id="启用调试模式"><a class="markdownIt-Anchor" href="#启用调试模式"></a> 启用调试模式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 详细输出</span></span><br><span class="line"></span><br><span class="line">ansible-playbook -v playbook.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更详细输出</span></span><br><span class="line"></span><br><span class="line">ansible-playbook -vv playbook.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最详细输出</span></span><br><span class="line"></span><br><span class="line">ansible-playbook -vvv playbook.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-debug-模块"><a class="markdownIt-Anchor" href="#使用-debug-模块"></a> 使用 debug 模块</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">调试变量</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">var:</span> <span class="string">ansible_facts</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">调试消息</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;主机名是 <span class="template-variable">&#123;&#123; inventory_hostname &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">条件调试</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;这是生产环境&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">when:</span> <span class="string">environment</span> <span class="string">==</span> <span class="string">&quot;production&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="检查模式"><a class="markdownIt-Anchor" href="#检查模式"></a> 检查模式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 检查模式（不实际执行）</span></span><br><span class="line"></span><br><span class="line">ansible-playbook --check playbook.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示差异</span></span><br><span class="line"></span><br><span class="line">ansible-playbook --check --diff playbook.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-常见问题解决"><a class="markdownIt-Anchor" href="#2-常见问题解决"></a> 2. 常见问题解决</h3><h4 id="ssh-连接问题"><a class="markdownIt-Anchor" href="#ssh-连接问题"></a> SSH 连接问题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 测试 SSH 连接</span></span><br><span class="line"></span><br><span class="line">ansible all -m ping</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 SSH 密钥</span></span><br><span class="line"></span><br><span class="line">ansible all -m ping --private-key ~/.ssh/mykey</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略主机密钥检查</span></span><br><span class="line"></span><br><span class="line">ansible all -m ping -e <span class="string">&#x27;ansible_ssh_common_args=&quot;-o StrictHostKeyChecking=no&quot;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="权限问题"><a class="markdownIt-Anchor" href="#权限问题"></a> 权限问题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 使用 sudo</span></span><br><span class="line"></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;whoami&quot;</span> --become</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 sudo 用户</span></span><br><span class="line"></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;whoami&quot;</span> --become --become-user root</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo 密码</span></span><br><span class="line"></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;whoami&quot;</span> --become --ask-become-pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="语法检查"><a class="markdownIt-Anchor" href="#语法检查"></a> 语法检查</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 检查语法</span></span><br><span class="line"></span><br><span class="line">ansible-playbook --syntax-check playbook.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ansible-lint</span></span><br><span class="line"></span><br><span class="line">pip install ansible-lint</span><br><span class="line"></span><br><span class="line">ansible-lint playbook.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-日志分析"><a class="markdownIt-Anchor" href="#3-日志分析"></a> 3. 日志分析</h3><h4 id="启用日志"><a class="markdownIt-Anchor" href="#启用日志"></a> 启用日志</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ansible.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log_path</span> = /var/log/ansible.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分析失败任务"><a class="markdownIt-Anchor" href="#分析失败任务"></a> 分析失败任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查看最近的失败</span></span><br><span class="line"></span><br><span class="line">grep FAILED /var/log/ansible.log</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看特定主机的执行结果</span></span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;host1&quot;</span> /var/log/ansible.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-性能优化"><a class="markdownIt-Anchor" href="#4-性能优化"></a> 4. 性能优化</h3><h4 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ansible.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">forks</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="section">[ssh_connection]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pipelining</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ssh_args</span> = -o ControlMaster=auto -o ControlPersist=<span class="number">60</span>s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事实缓存"><a class="markdownIt-Anchor" href="#事实缓存"></a> 事实缓存</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ansible.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fact_caching</span> = jsonfile</span><br><span class="line"></span><br><span class="line"><span class="attr">fact_caching_connection</span> = /tmp/ansible_facts_cache</span><br><span class="line"></span><br><span class="line"><span class="attr">fact_caching_timeout</span> = <span class="number">3600</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="减少-ssh-连接"><a class="markdownIt-Anchor" href="#减少-ssh-连接"></a> 减少 SSH 连接</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 使用 gather_facts: no 跳过事实收集</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">简单任务</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="扩展资源"><a class="markdownIt-Anchor" href="#扩展资源"></a> 扩展资源</h2><h3 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> 官方文档</h3><ul><li><p><a href="https://docs.ansible.com/">Ansible 官方文档</a></p></li><li><p><a href="https://docs.ansible.com/ansible/latest/collections/index_module.html">模块索引</a></p></li><li><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html">最佳实践</a></p></li></ul><h3 id="社区资源"><a class="markdownIt-Anchor" href="#社区资源"></a> 社区资源</h3><ul><li><p><a href="https://galaxy.ansible.com/">Ansible Galaxy</a> - 角色和集合仓库</p></li><li><p><a href="https://github.com/ansible/ansible">GitHub Ansible</a> - 源代码</p></li><li><p><a href="https://www.reddit.com/r/ansible/">Reddit Ansible</a> - 社区讨论</p></li></ul><h3 id="学习建议"><a class="markdownIt-Anchor" href="#学习建议"></a> 学习建议</h3><ol><li><p><strong>逐步学习</strong>：从简单的 ad-hoc 命令开始，逐步学习 Playbook 和 Role</p></li><li><p><strong>动手实践</strong>：在测试环境中实际操作，验证理论知识</p></li><li><p><strong>阅读他人代码</strong>：研究 Ansible Galaxy 中的优秀 Role</p></li><li><p><strong>关注最佳实践</strong>：始终考虑安全性、可维护性和可读性</p></li><li><p><strong>持续学习</strong>：Ansible 在不断发展，保持学习新功能和改进</p></li></ol><hr /><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>Ansible 是一个功能强大且易于学习的自动化工具。通过本指南，您应该能够：</p><p>✅ 理解 Ansible 的核心概念和架构</p><p>✅ 搭建 Ansible 环境并进行基本配置</p><p>✅ 编写和执行 Playbook</p><p>✅ 使用常用模块完成系统管理任务</p><p>✅ 应用高级功能如变量、模板、条件执行等</p><p>✅ 遵循最佳实践，编写高质量的自动化代码</p><p>✅ 排查和解决常见问题</p><p>记住，熟练掌握 Ansible 需要时间和实践。建议您从简单的任务开始，逐步增加复杂性，并始终关注代码的可读性和可维护性。</p><p>祝您 Ansible 学习愉快！ 🚀</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荣格八维详细篇</title>
      <link href="/a1c09fa3.html"/>
      <url>/a1c09fa3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>“MBTI 的底层引擎：一文读懂荣格八维功能”</strong></p></blockquote><h2 id="引入你以为你知道-mbti"><a class="markdownIt-Anchor" href="#引入你以为你知道-mbti"></a> 引入：你以为你知道 MBTI？</h2><p><strong>关键词</strong>：16 型只是表象 / 八维才是本体 / MBTI 进阶知识</p><ul><li><p>简单说明：MBTI 的核心其实是“功能组”（Cognitive Functions），不是字母本身</p></li><li><p>举个例子：两个都是“INFP”，但发展顺序不同，其实“长得不像”</p></li><li><p>提出问题引发兴趣：</p><ul><li>为什么有些人是 INFP 但其实超级逻辑？</li><li>为什么你是 ENFJ 却不像外向的人？</li></ul></li></ul><p>💡 例句：“你的人格像一辆车，MBTI 只是车牌，八维才是引擎。”</p><hr /><h2 id="八个功能cognitive-functions介绍"><a class="markdownIt-Anchor" href="#八个功能cognitive-functions介绍"></a> 八个功能（Cognitive Functions）介绍</h2><p>分为两大类：<strong>感知功能（Perceiving Functions）</strong> 和 <strong>判断功能（Judging Functions）</strong><br />每种再分为<strong>内向型（Introverted）</strong> 与 <strong>外向型（Extraverted）</strong></p><p>每一节结构建议为：</p><ul><li>名称（中英文）+ 简写</li><li>功能描述（做什么事）</li><li>举例说明（典型行为）</li><li>对应类型中最常见在哪些</li></ul><hr /><h3 id="感知功能"><a class="markdownIt-Anchor" href="#感知功能"></a> 👁 感知功能</h3><table><thead><tr><th>功能名</th><th>简写</th><th>功能解释</th><th>举例</th></tr></thead><tbody><tr><td>外向直觉 Extraverted Intuition</td><td>Ne</td><td>不断探索可能性、联想力爆棚</td><td>点子王，看到 A 就想到 Z，NTP/NFP 常见</td></tr><tr><td>内向直觉 Introverted Intuition</td><td>Ni</td><td>专注深层趋势与洞察，未来导向</td><td>“直觉型预言家”，常见于 INFJ/INTJ</td></tr><tr><td>外向实感 Extraverted Sensing</td><td>Se</td><td>注重五感、现时感知、享受当下</td><td>行动力强，ESTP/ESFP 典型</td></tr><tr><td>内向实感 Introverted Sensing</td><td>Si</td><td>记忆导向、传统守成、稳定细节</td><td>注重过去经验，ISFJ/ISTJ 常见</td></tr></tbody></table><hr /><h3 id="️-判断功能"><a class="markdownIt-Anchor" href="#️-判断功能"></a> ⚖️ 判断功能</h3><table><thead><tr><th>功能名</th><th>简写</th><th>功能解释</th><th>举例</th></tr></thead><tbody><tr><td>外向思考 Extraverted Thinking</td><td>Te</td><td>注重效率、系统、目标导向</td><td>“有事说事”，ENTJ/ESTJ 强项</td></tr><tr><td>内向思考 Introverted Thinking</td><td>Ti</td><td>内在逻辑系统、概念精炼</td><td>“我得先想清楚再说”，INTP/ISTP 用得多</td></tr><tr><td>外向情感 Extraverted Feeling</td><td>Fe</td><td>关注他人感受、社会和谐</td><td>会读空气、善于调节关系，ENFJ/ESFJ</td></tr><tr><td>内向情感 Introverted Feeling</td><td>Fi</td><td>价值内省、自我一致性</td><td>重视“对我来说对不对”，INFP/ISFP 常见</td></tr></tbody></table><hr /><h2 id="功能堆叠与类型结构八维分布"><a class="markdownIt-Anchor" href="#功能堆叠与类型结构八维分布"></a> 功能堆叠与类型结构（八维分布）</h2><ul><li>每个 MBTI 类型由四个主功能组成：主导（Dominant）/辅助（Auxiliary）/第三（Tertiary）/劣势（Inferior）</li><li>例子：INFJ = Ni（主）Fe（辅）Ti（第三）Se（劣）</li></ul><hr /><h2 id="功能对冲突-成长与阴影"><a class="markdownIt-Anchor" href="#功能对冲突-成长与阴影"></a> 功能对冲突、成长与阴影</h2><p>📌 进阶分析区：</p><ul><li>人格成长通常是“劣势功能”慢慢发展出来的过程</li><li>为什么 INTJ 焦虑时会 Se 暴冲？（走向“劣势功能”）</li><li>INFJ 压力大时会突然变得懒散、逃避现实（劣势 Se）</li><li>阴影功能也可以成为“救命技能”，例如 INFP 学会用 Te 来做计划管理</li></ul><hr /><h2 id="实际生活中八维的表现"><a class="markdownIt-Anchor" href="#实际生活中八维的表现"></a> 实际生活中八维的表现</h2><table><thead><tr><th>功能</th><th>经典台词</th><th>行为密码</th></tr></thead><tbody><tr><td>Ni</td><td>“我有预感…”</td><td>在散乱线索中突然画完思维导图</td></tr><tr><td>Si</td><td>“按去年流程最稳妥”</td><td>对特定气味触发强烈回忆</td></tr><tr><td>Te</td><td>“先定 KPI 再优化”</td><td>把菜谱改成 Excel 表格</td></tr><tr><td>Fi</td><td>“这违背我的信念”</td><td>为虚构角色痛哭整夜</td></tr><tr><td>Se</td><td>“别想那么多，先行动！”</td><td>能精准复现咖啡拉花图案</td></tr><tr><td>Ne</td><td>“这个创意让我想到…”</td><td>把工作会议变成脑洞接龙</td></tr><tr><td>Fe</td><td>“大家开心最重要”</td><td>瞬间察觉房间气氛变化</td></tr><tr><td>Ti</td><td>“理论上存在漏洞”</td><td>拆解洗衣机研究省电原理</td></tr></tbody></table><h2 id="mbti-与-八维的对照表"><a class="markdownIt-Anchor" href="#mbti-与-八维的对照表"></a> MBTI 与 八维的对照表</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">阳面</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">阴面</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:center">第一功能</td><td style="text-align:center">第二功能</td><td style="text-align:center">第三功能</td><td style="text-align:center">第四功能</td><td style="text-align:center">第五功能</td><td style="text-align:center">第六功能</td><td style="text-align:center">第七功能</td><td style="text-align:center">第八功能</td></tr><tr><td style="text-align:center">INTJ</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td></tr><tr><td style="text-align:center">INFJ</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">si</td></tr><tr><td style="text-align:center">ENTJ</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td></tr><tr><td style="text-align:center">ENFJ</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Te</td></tr><tr><td style="text-align:center">ISFP</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td></tr><tr><td style="text-align:center">ISTP</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td><td style="text-align:center">Te</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td></tr><tr><td style="text-align:center">ESFP</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td></tr><tr><td style="text-align:center">ESTP</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td><td style="text-align:center">si</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td></tr><tr><td style="text-align:center">ENFP</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">si</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td></tr><tr><td style="text-align:center">ENTP</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td></tr><tr><td style="text-align:center">INFP</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Te</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td></tr><tr><td style="text-align:center">INTP</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td></tr><tr><td style="text-align:center">ESTJ</td><td style="text-align:center">Te</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td></tr><tr><td style="text-align:center">ESFJ</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td></tr><tr><td style="text-align:center">ISTJ</td><td style="text-align:center">si</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td></tr><tr><td style="text-align:center">ISFJ</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td></tr></tbody></table><hr /><h2 id="结语比起我是什么类型你更该问我如何运作"><a class="markdownIt-Anchor" href="#结语比起我是什么类型你更该问我如何运作"></a> 结语：比起“我是什么类型”，你更该问“我如何运作”</h2><blockquote><p>“理解八维，不是为了限制自己，而是为了拓展自己。”<br />“人格不是房间，而是房间里的光线。”✨</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #MBTI </tag>
            
            <tag> #人际 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MBTI详细篇</title>
      <link href="/eaf36736.html"/>
      <url>/eaf36736.html</url>
      
        <content type="html"><![CDATA[<h2 id="mbti-是什么引入-简介"><a class="markdownIt-Anchor" href="#mbti-是什么引入-简介"></a> MBTI 是什么？（引入 + 简介）</h2><p><strong>关键词</strong>：性格测试 / 人格分类 / 心理学工具</p><ul><li>MBTI 全称：Myers-Briggs Type Indicator（迈尔斯-布里格斯类型指标）</li><li>基于荣格心理类型理论，由 Isabel Briggs Myers 和母亲 Katharine Cook Briggs 开发</li><li>起初用于帮助女性在二战期间匹配工作</li><li>现广泛应用于职场、教育、社交场景</li></ul><p>💡 小语：“你看到的那张 16 型性格图，不是星座魔法，而是一套有脉络的心理学工具。”</p><hr /><h2 id="mbti-的-4-个维度"><a class="markdownIt-Anchor" href="#mbti-的-4-个维度"></a> MBTI 的 4 个维度</h2><ol><li>外向（E）vs 内向（I）</li></ol><ul><li>外向：从外部活动中获得能量，如社交、交流、动手实践</li><li>内向：通过独处、反思中恢复精力</li></ul><blockquote><p>🎯 案例：开完会后，有人聚餐放松（E），有人回家关灯闭麦（I）</p></blockquote><ol start="2"><li>实感（S）vs 直觉（N）</li></ol><ul><li>实感：关注现实、细节、经验</li><li>直觉：关注趋势、可能性、联想</li></ul><blockquote><p>🎯 案例：S 型喜欢列清单，N 型用脑图发散</p></blockquote><ol start="3"><li>思考（T）vs 情感（F）</li></ol><ul><li>T：决策基于逻辑、公正、系统分析</li><li>F：决策基于情感、价值、人际关系</li></ul><blockquote><p>🎯 案例：F 会说“这样说他会伤心”，T 会说“他就是错了”</p></blockquote><ol start="4"><li>判断（J）vs 知觉（P）</li></ol><ul><li>J：喜欢计划、有序、提前准备</li><li>P：偏好灵活、临时调整、随机应变</li></ul><blockquote><p>🎯 案例：J 旅行前做 Excel 表格，P 临出发前看去哪儿</p></blockquote><div class="note warning modern"><p>以上案例皆为刻板印象，实际人们往往是混合型，且情境会影响表现</p></div><hr /><h2 id="16-种人格类型速览"><a class="markdownIt-Anchor" href="#16-种人格类型速览"></a> 16 种人格类型速览</h2><h3 id="紫人组"><a class="markdownIt-Anchor" href="#紫人组"></a> 紫人组</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/intj-architect.svg","alt":"INTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/intp-logician.svg","alt":"INTP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/entj-commander.svg","alt":"ENTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/entp-debater.svg","alt":"ENTP"}]</div>      <div class="gallery-items">      </div>    </div><table><thead><tr><th>类型</th><th>名称</th><th>外号</th><th>性格简述</th></tr></thead><tbody><tr><td>INTJ</td><td>建筑师</td><td>紫老头、紫薯老头</td><td>独立理智，富有战略远见。擅长构建复杂理论体系，追求效率与能力，目标导向。</td></tr><tr><td>INTP</td><td>逻辑学家</td><td>药水姐、薯条姐</td><td>逻辑缜密，痴迷理论与知识。探索抽象概念，构建思想模型，理性客观，热爱智力挑战。</td></tr><tr><td>ENTJ</td><td>指挥官</td><td>大姐头</td><td>强势果断，天生的领导者。眼光长远，擅长战略规划与组织动员，追求效率与目标达成。</td></tr><tr><td>ENTP</td><td>辩论家</td><td>骨折眉</td><td>机智敏捷，热爱智力激辩。思维跳跃，挑战成规，探索新概念，擅长策略与即兴创新。</td></tr></tbody></table><h3 id="绿人组"><a class="markdownIt-Anchor" href="#绿人组"></a> 绿人组</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/infj-advocate.svg","alt":"INFJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/infp-mediator.svg","alt":"INFP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/enfj-protagonist.svg","alt":"ENFJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/enfp-campaigner.svg","alt":"ENFP"}]</div>      <div class="gallery-items">      </div>    </div><table><thead><tr><th>类型</th><th>名称</th><th>外号</th><th>性格简述</th></tr></thead><tbody><tr><td>INFJ</td><td>提倡者</td><td>绿老头、抹茶老头</td><td>深邃理想，富有远见与同情心。寻求意义，渴望助人成长，常具神秘感与坚定信念。</td></tr><tr><td>INFP</td><td>调停者</td><td>小蝴蝶</td><td>理想主义，充满热忱与好奇心。追求真实与和谐，价值观驱动，富有创造力与同情心。</td></tr><tr><td>ENFJ</td><td>主人公</td><td>宝剑哥、大剑</td><td>富有魅力，天生的领导者。洞察他人潜能，鼓舞人心，致力于帮助他人成长与和谐发展。</td></tr><tr><td>ENFP</td><td>活动家</td><td>快乐修勾</td><td>热情洋溢，富有想象力与感染力。灵感迸发，连接可能性，积极鼓励他人，追求意义。</td></tr></tbody></table><h3 id="蓝人组"><a class="markdownIt-Anchor" href="#蓝人组"></a> 蓝人组</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/istj-logistician.svg","alt":"ISTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/isfj-defender.svg","alt":"ISFJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/estj-executive.svg","alt":"ESTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/esfj-consul.svg","alt":"ESFJ"}]</div>      <div class="gallery-items">      </div>    </div><table><thead><tr><th>类型</th><th>名称</th><th>外号</th><th>性格简述</th></tr></thead><tbody><tr><td>ISTJ</td><td>物流师</td><td>蓝老头、人机）</td><td>务实可靠，恪守规则与责任。注重细节与秩序，执行力强，是传统和制度的坚定维护者。</td></tr><tr><td>ISFJ</td><td>守护者</td><td>小护士</td><td>温暖忠诚，无私奉献。关注他人需求，维护和谐稳定，是记忆细节与提供实际关怀的守护者。</td></tr><tr><td>ESTJ</td><td>管理者</td><td>尺子姐</td><td>高效果断，天生的组织者。注重效率与秩序，执行力强，擅长制定计划并领导实施。</td></tr><tr><td>ESFJ</td><td>执政官</td><td>蛋糕人、男妈妈</td><td>热心负责，社交能手。重视和谐与协作，乐于助人，关注他人感受并维护传统联结。</td></tr></tbody></table><h3 id="黄人组"><a class="markdownIt-Anchor" href="#黄人组"></a> 黄人组</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/istp-virtuoso.svg","alt":"ISTP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/isfp-adventurer.svg","alt":"ISFP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/estp-entrepreneur.svg","alt":"ESTP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/esfp-entertainer.svg","alt":"ESFP"}]</div>      <div class="gallery-items">      </div>    </div><table><thead><tr><th>类型</th><th>名称</th><th>外号</th><th>性格简述</th></tr></thead><tbody><tr><td>ISTP</td><td>鉴赏家</td><td>钻头</td><td>冷静灵活，动手能力极强。活在当下，善用工具解决问题，享受探索事物运作原理。</td></tr><tr><td>ISFP</td><td>冒险家</td><td>小画家</td><td>温和敏感，审美独特。热爱自由与美好体验，行动低调优雅，忠于内心价值观。</td></tr><tr><td>ESTP</td><td>企业家</td><td>墨镜</td><td>精力充沛，灵活务实。活在当下，行动迅速，擅长临场应变与影响他人，享受冒险。</td></tr><tr><td>ESFP</td><td>表演者</td><td>沙锤</td><td>热情洋溢，充满活力与感染力。热爱社交与即兴体验，享受当下，善于带动气氛带来欢乐。</td></tr></tbody></table><hr /><h2 id="常见误解与争议"><a class="markdownIt-Anchor" href="#常见误解与争议"></a> 常见误解与争议</h2><ul><li>❌ “INFJ 是最稀有最神秘的类型” → 统计偏差 &amp; 情绪状态影响</li><li>❌ “你是 P 所以拖延” → 拖延是行为，不是性格决定</li><li>❌ “我以前是 INTP，现在变 ENFP 了” → MBTI 测试受情境影响大</li></ul><p>📌 小结：MBTI 是探索工具，不是标签，更不应成为偏见的来源</p><hr /><h2 id="mbti-的实际应用场景"><a class="markdownIt-Anchor" href="#mbti-的实际应用场景"></a> MBTI 的实际应用场景</h2><ul><li>✍️ 自我认知：明确优势、潜在盲点</li><li>🧑‍🤝‍🧑 人际沟通：理解差异，减少冲突</li><li>💼 职业选择：辅助性格与岗位匹配</li><li>🧠 学习风格：因人而异的学习路径规划</li></ul><hr /><h2 id="推荐测试工具-延伸资源"><a class="markdownIt-Anchor" href="#推荐测试工具-延伸资源"></a> 推荐测试工具 &amp; 延伸资源</h2><ul><li>官方认证测试（MBTI® Step I/II）</li><li>免费测试：<a href="https://www.16personalities.com/ch">16personalities.com</a></li><li>推荐阅读：<ul><li>《Please Understand Me》by David Keirsey</li><li>B 站 MBTI 讲解系列</li><li>豆瓣小组 / 微博 MBTI 讨论</li></ul></li></ul><hr /><h2 id="结尾与互动"><a class="markdownIt-Anchor" href="#结尾与互动"></a> 结尾与互动</h2><p>“或许人格并不是我们是谁的唯一答案，但 MBTI 却是个能让我们自我探索的开始。你是什么类型？欢迎留言一起唠嗑 ✨”</p>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #MBTI </tag>
            
            <tag> #人际 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史莱姆牧场攻略</title>
      <link href="/3c6e88b8.html"/>
      <url>/3c6e88b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="世界地图"><a class="markdownIt-Anchor" href="#世界地图"></a> 世界地图</h2><p>【史莱姆牧场攻略•ᗜ•】地图和资源<br /><a href="https://www.bilibili.com/opus/922870755463528457">https://www.bilibili.com/opus/922870755463528457</a></p><h2 id="资源地图"><a class="markdownIt-Anchor" href="#资源地图"></a> 资源地图</h2><table><thead><tr><th>资源分布</th><th>链接</th></tr></thead><tbody><tr><td>钻机篇</td><td><a href="https://www.bilibili.com/opus/167167286873045874">https://www.bilibili.com/opus/167167286873045874</a></td></tr><tr><td>蜂房篇</td><td><a href="https://www.bilibili.com/opus/167167359885393081">https://www.bilibili.com/opus/167167359885393081</a></td></tr><tr><td>泵机篇</td><td><a href="https://www.bilibili.com/opus/167167381360229662">https://www.bilibili.com/opus/167167381360229662</a></td></tr></tbody></table><h2 id="其他攻略"><a class="markdownIt-Anchor" href="#其他攻略"></a> 其他攻略</h2><h3 id="ct-修改表"><a class="markdownIt-Anchor" href="#ct-修改表"></a> CT 修改表</h3><p>来源: <a href="https://fearlessrevolution.com/viewtopic.php?t=4491">https://fearlessrevolution.com/viewtopic.php?t=4491</a></p><h3 id="slime-rancher-ids"><a class="markdownIt-Anchor" href="#slime-rancher-ids"></a> Slime Rancher IDs</h3><p>来源: <a href="https://www.reddit.com/r/slimerancher/comments/lvb836/slime_rancher_ids/">https://www.reddit.com/r/slimerancher/comments/lvb836/slime_rancher_ids/</a></p><h4 id="史莱姆系列"><a class="markdownIt-Anchor" href="#史莱姆系列"></a> 史莱姆系列</h4><table><thead><tr><th>Slime 名称</th><th>翻译</th><th>ID</th><th>结晶 名称</th><th>Plort ID</th><th></th></tr></thead><tbody><tr><td>Rad Slime</td><td>辐射史莱姆</td><td>1</td><td>Rad Plort</td><td>4</td><td></td></tr><tr><td>Rock Slime</td><td>岩石史莱姆</td><td>2</td><td>Rock Plort</td><td>5</td><td></td></tr><tr><td>Pink Slime</td><td>粉红史莱姆</td><td>3</td><td>Pink Plort</td><td>6</td><td></td></tr><tr><td>Tar Slime</td><td>焦油史莱姆</td><td>10</td><td></td><td>-</td><td></td></tr><tr><td>Gold Slime</td><td>黄金史莱姆</td><td>11</td><td>Gold Plort</td><td>7</td><td></td></tr><tr><td>Boom Slime</td><td>炸弹史莱姆</td><td>21</td><td>Boom Plort</td><td>25</td><td></td></tr><tr><td>Phospor Slime</td><td>荧光史莱姆</td><td>31</td><td>Phosphor Plort</td><td>36</td><td></td></tr><tr><td>Tabby Slime</td><td>喵喵史莱姆</td><td>37</td><td>Tabby Plort</td><td>38</td><td></td></tr><tr><td>Hunter Slime</td><td>猎猫史莱姆</td><td>51</td><td>Hunter Plort</td><td>52</td><td></td></tr><tr><td>Honey Slime</td><td>蜂蜜史莱姆</td><td>59</td><td>Honey Plort</td><td>60</td><td></td></tr><tr><td>Puddle Slime</td><td>水滴史莱姆</td><td>72</td><td>Puddle Plort</td><td>73</td><td></td></tr><tr><td>Lucky Slime</td><td>招财史莱姆</td><td>77</td><td></td><td>-</td><td></td></tr><tr><td>Crystal Slime</td><td>水晶史莱姆</td><td>79</td><td>Crystal Plort</td><td>78</td><td></td></tr><tr><td>Quantum Slime</td><td>量子史莱姆</td><td>89</td><td>Quantum Plort</td><td>99</td><td></td></tr><tr><td>Dervish Slime</td><td>旋风史莱姆</td><td>102</td><td>Dervish Plort</td><td>103</td><td></td></tr><tr><td>Mosaic Slime</td><td>马赛克史莱姆</td><td>104</td><td>Mosaic Plort</td><td>105</td><td></td></tr><tr><td>Tangle Slime</td><td>藤蔓史莱姆</td><td>106</td><td>Tangle Plort</td><td>107</td><td></td></tr><tr><td>Fire Slime</td><td>火焰史莱姆</td><td>108</td><td>Fire Plort</td><td>109</td><td></td></tr><tr><td>Saber Slime</td><td>剑齿史莱姆</td><td>150</td><td>Saber Plort</td><td>164</td><td></td></tr><tr><td>Quicksilver Slime</td><td>水银史莱姆</td><td>166</td><td>QuickSilver Plort</td><td>167</td><td></td></tr></tbody></table><h4 id="鸡"><a class="markdownIt-Anchor" href="#鸡"></a> 鸡</h4><table><thead><tr><th>鸡名称</th><th>ID</th></tr></thead><tbody><tr><td>Hen Hen</td><td>16</td></tr><tr><td>Roostro</td><td>17</td></tr><tr><td>Chickadoo</td><td>18</td></tr><tr><td>Elder Hen</td><td>49</td></tr><tr><td>Elder Roostro</td><td>50</td></tr><tr><td>Stony Hen</td><td>68</td></tr><tr><td>Briar Hen</td><td>69</td></tr><tr><td>Stony Chick</td><td>70</td></tr><tr><td>Briar Chick</td><td>71</td></tr><tr><td>Painted Hen</td><td>110</td></tr><tr><td>Painted Chick</td><td>111</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>史莱姆牧场联机</title>
      <link href="/b3d92d9.html"/>
      <url>/b3d92d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="史莱姆牧场联机"><a class="markdownIt-Anchor" href="#史莱姆牧场联机"></a> 史莱姆牧场联机</h2><p>本教程基于 Nexus Mods 上的 <a href="https://www.nexusmods.com/slimerancher/mods/2">SRML (Slime Rancher Mod Loader)</a> 模组实现联机功能。</p><ul><li><a href="https://www.nexusmods.com/slimerancher/mods/2">SRML (Slime Rancher Mod Loader)</a></li><li><a href="https://discord.com/channels/552756741771886593/554510953941696532">Discord 频道</a></li></ul><p>在 discord 频道中可以下载联机模组 SRMP_1525_Standalone</p><h2 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h2><ol><li>下载 <a href="https://www.nexusmods.com/slimerancher/mods/2">SRML (Slime Rancher Mod Loader)</a> 模组。</li><li>将下载的文件解压到 <code>Slime Rancher</code> 的安装目录，例如：<code>C:\Program Files (x86)\Steam\steamapps\common\Slime Rancher</code></li><li>双击 <code>SRML.exe</code> 启动模组加载器。</li><li>根目录会生成一个 SRML 文件夹，里面包含 Mods 文件夹。</li><li>将下载的 SRMP_1525_Standalone 联机模组压缩包的 Mods\SRMP.dll 放入 游戏根目录的<code>SRML\Mods</code> 文件夹。SlimeRancher_Data 文件夹 就覆盖一下。</li></ol><h2 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h2><ol><li>修改用户名：启动游戏后，在模组 UI 界面中设置 username，避免 ID 冲突。</li><li>主机端操作：<ul><li>启动游戏并加载一个存档。</li><li>在模组 UI 界面点击“Host”按钮，创建联机房间。</li><li>端口号可保持默认或自定义。</li></ul></li><li>客户端操作：<ul><li>启动游戏，无需加载存档。</li><li>在模组 UI 界面输入主机的 IP 地址和端口号，点击“Join”按钮加入房间。</li></ul></li></ol><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><ul><li>所有玩家需安装相同版本的 SRML、模组及 DLC。</li><li>如使用 FRP 等工具进行端口转发，请确保端口设置正确。</li><li>联机时请使用 UDP 端口转发，勿用 TCP 端口转发。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>potplayer</title>
      <link href="/2e9d4a92.html"/>
      <url>/2e9d4a92.html</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a class="markdownIt-Anchor" href="#官网"></a> 官网</h2><p><a href="https://potplayer.daum.net/">https://potplayer.daum.net/</a></p><p>PotPlayer 是一款由韩国开发的多媒体播放器，支持几乎所有的视频和音频格式。它以其高性能、丰富的功能和灵活的配置选项而受到用户的喜爱。PotPlayer 提供了多种播放模式、字幕支持、视频截图、音频均衡器等功能，用户可以根据自己的需求进行个性化设置。</p><h2 id="lavfilters"><a class="markdownIt-Anchor" href="#lavfilters"></a> LAVFilters</h2><p><a href="https://github.com/nevcairiel/lavfilters/releases">https://github.com/nevcairiel/lavfilters/releases</a></p><p>LAV Filters 是一组开源的 DirectShow 过滤器，旨在提供对各种音频和视频格式的支持。它们可以与 PotPlayer 一起使用，以增强播放器的功能和兼容性。</p><h2 id="dmitrirender"><a class="markdownIt-Anchor" href="#dmitrirender"></a> DmitriRender</h2><p>目前 DmitriRender 已停止開發，且 官方網站已無法訪問。最後版本並未開源，也無社群接手持續維護。未來可能出現相容性下降的情況，請用戶注意風險。</p><h2 id="转文字"><a class="markdownIt-Anchor" href="#转文字"></a> 转文字</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%USERPROFILE%\AppData\Roaming\PotPlayerMini64</span><br></pre></td></tr></table></figure><p>两个文件夹</p><p>Engine</p><p><a href="https://github.com/Purfview/whisper-standalone-win/releases/tag/Faster-Whisper-XXL">Faster-Whisper-XXL</a></p><p>Model</p><p><a href="https://huggingface.co/deepdml/faster-whisper-large-v3-turbo-ct2">faster-whisper-large-v3-turbo</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5349</title>
      <link href="/24b3f7b9.html"/>
      <url>/24b3f7b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="aurora-大题"><a class="markdownIt-Anchor" href="#aurora-大题"></a> Aurora 大题</h2><p><img src="../attach/Pasted%20image%2020250619194814.png" alt="" /></p><p><strong>1. [2 pts] Max data size stored in Aurora</strong></p><blockquote><p><strong>Answer:</strong> 64 TB<br /><strong>Explanation:</strong> Aurora stores data in 10GB segments replicated across 6 storage nodes per PG. Total maximum size is 64 TB as per AWS Aurora architecture design.</p></blockquote><hr /><p><strong>2. [3 pts] Logs sent by P to R1</strong></p><blockquote><p><strong>Answer:</strong> All logs: 1001–1008<br /><strong>Explanation:</strong> Replicas (R1–R3) receive all logs from primary to update their in-memory buffers, regardless of PG.</p></blockquote><hr /><p><strong>3. [3 pts] Logs sent by P to SN1</strong></p><blockquote><p><strong>Answer:</strong> 1001, 1003, 1005, 1007<br /><strong>Explanation:</strong> SN1 belongs to PG1 only. All odd LSNs belong to PG1, so only odd-numbered logs are sent to SN1.</p></blockquote><hr /><p><strong>4. [3 pts] Distribution of SN4, SN5, SN6</strong></p><blockquote><p><strong>Answer:</strong></p></blockquote><ul><li>SN4 → AZ1</li><li>SN5 → AZ2</li><li>SN6 → AZ3</li></ul><blockquote><p><strong>Explanation:</strong> Each PG must span 3 AZs with 2 copies in each. Current known distribution shows AZ1, AZ2, AZ3 each has 2 nodes. Assign SN4–SN6 one to each AZ to satisfy 6 nodes in 3 AZs, 2 per AZ.</p></blockquote><hr /><p><strong>5. [4 pts] CPL and VDL values</strong></p><blockquote><p><strong>Given:</strong><br />Received LSNs: 1001–1004, 1006–1008<br />Missing: 1005</p></blockquote><blockquote><p><strong>Answer:</strong></p></blockquote><ul><li><strong>CPL:</strong> 1003</li><li><strong>VDL:</strong> 1003</li></ul><blockquote><p><strong>Explanation:</strong><br />Transaction X (1001–1003) fully received → CPL = 1003<br />Transaction Y missing 1005 → not fully committed → no CPL<br />So latest committed transaction is X → VDL = 1003</p></blockquote><p><img src="../attach/Pasted%20image%2020250619194920.png" alt="" /></p><p><strong>1. [5 pts] Storage node distribution across AZs</strong></p><blockquote><p><strong>Answer:</strong><br />One possible AZ distribution to satisfy Aurora’s replication:</p></blockquote><ul><li><strong>AZ1</strong>: SN1, SN6, SN7</li><li><strong>AZ2</strong>: SN2, SN5, SN8</li><li><strong>AZ3</strong>: SN3, SN4</li></ul><blockquote><p><strong>Explanation:</strong><br />Aurora requires each Protection Group to span <strong>3 AZs</strong>, with <strong>2 nodes per AZ</strong>.</p></blockquote><ul><li>PG1 (SN1–SN6) → 6 nodes across 3 AZs, 2 per AZ</li><li>PG2 (SN3–SN8) → same requirement<br />This distribution satisfies both PGs’ replication needs.</li></ul><hr /><p><strong>2. [5 pts] How SN5 fills in missing logs</strong></p><blockquote><p><strong>Given:</strong><br />SN5 received logs: 1001, 1002, 1004, 1006<br />→ Missing: 1003, 1005, 1007</p></blockquote><blockquote><p><strong>Answer:</strong><br />SN5 detects missing LSNs by checking sequence gaps.<br />It sends <strong>“Read Index” or “Gap Fill” requests</strong> to peer storage nodes in the same PG (e.g., SN1–SN6 for PG1, SN3–SN8 for PG2) asking for missing logs.<br />If at least 3 other nodes have the log, SN5 can fetch and fill the gap.</p></blockquote><blockquote><p><strong>Example:</strong></p></blockquote><ul><li>Missing 1003 (PG1) → request from SN1, SN2, SN6</li><li>Missing 1005 (PG2) → request from SN4, SN6, SN8</li><li>Once received and verified, SN5 appends logs locally.</li></ul><hr /><p><strong>3. [5 pts] CPL and VDL values</strong></p><blockquote><p><strong>Given:</strong><br />LSNs 1001–1007 all received by storage service</p></blockquote><blockquote><p><strong>Answer:</strong></p></blockquote><ul><li><strong>CPL values:</strong> 1004, 1007</li><li><strong>VDL:</strong> 1007</li></ul><blockquote><p><strong>Explanation:</strong></p></blockquote><ul><li>Transaction X (LSNs 1001–1004) fully received → CPL = 1004</li><li>Transaction Y (1005–1007) also fully received → CPL = 1007</li><li>Since both PG1 and PG2 have received logs for both transactions, latest consistent CPL = 1007<br />→ So VDL (last durable committed transaction) = 1007</li></ul><h2 id="question-1-6-points-name-three-typical-service-models-in-cloud-computing-give-an-example-service-of-each-model"><a class="markdownIt-Anchor" href="#question-1-6-points-name-three-typical-service-models-in-cloud-computing-give-an-example-service-of-each-model"></a> Question 1 [6 points] Name three typical service models in cloud computing. Give an example service of each model.</h2><p>The three main cloud service models are:<br />(1) IaaS, like Amazon EC2, where users manage virtual machines;<br />(2) FaaS, like AWS Lambda, where users run code without managing servers;<br />(3) SaaS, like Google Docs, where users access complete software over the internet.</p><h2 id="question-2-5-points-describe-two-typical-traffic-patterns-in-modern-data-centre-explain-how-they-affect-the-networking-technology-evolution-in-cloud-computing-era"><a class="markdownIt-Anchor" href="#question-2-5-points-describe-two-typical-traffic-patterns-in-modern-data-centre-explain-how-they-affect-the-networking-technology-evolution-in-cloud-computing-era"></a> Question 2 [5 points] Describe two typical traffic patterns in modern data centre. Explain how they affect the networking technology evolution in cloud computing era.</h2><p>课件里面没有应该不考）<br />Modern data centers handle <strong>north-south traffic</strong> (between users and servers) and <strong>east-west traffic</strong> (between internal components). In cloud computing, east-west traffic dominates due to microservices and distributed architectures. This leads to innovations like software-defined networking, high-speed switching, and VPC peering to improve internal traffic efficiency.现代数据中心处理<strong>南北向流量</strong> （用户与服务器之间）和<strong>东西向流量</strong> （内部组件之间）。在云计算中，由于微服务和分布式架构，东西向流量占主导地位。这催生了软件定义网络、高速交换和 VPC 对等连接等创新，以提高内部流量效率。</p><h2 id="question-3-8-points-explain-hardware-assisted-virtualisation-name-a-hardware-assisted-virtualisation-system-and-describe-its-components-in-detail"><a class="markdownIt-Anchor" href="#question-3-8-points-explain-hardware-assisted-virtualisation-name-a-hardware-assisted-virtualisation-system-and-describe-its-components-in-detail"></a> Question 3 [8 points] Explain hardware-assisted virtualisation. Name a hardware assisted virtualisation system and describe its components in detail.</h2><h3 id="hardware-assisted-virtualisation"><a class="markdownIt-Anchor" href="#hardware-assisted-virtualisation"></a> <strong>Hardware-Assisted Virtualisation</strong></h3><p><strong>Definition:</strong><br />Hardware-assisted virtualization is a technology where the CPU provides special instructions (e.g., Intel VT-x, AMD-V) to support efficient virtual machine (VM) execution. It reduces overhead and improves performance compared to purely software-based virtualisation.</p><hr /><h3 id="example-system-kvm-kernel-based-virtual-machine"><a class="markdownIt-Anchor" href="#example-system-kvm-kernel-based-virtual-machine"></a> <strong>Example System: KVM (Kernel-based Virtual Machine)</strong></h3><p><strong>Components:</strong></p><ol><li><strong>KVM Module</strong><br />Turns the Linux kernel into a hypervisor, enabling VM support using CPU virtualization extensions (VT-x/AMD-V).</li><li><strong>QEMU (Quick Emulator)</strong><br />Emulates hardware devices (e.g., disk, network) for VMs.</li><li><strong>Libvirt</strong><br />Provides a management interface for creating, starting, and stopping VMs.</li><li><strong>vCPU and pCPU Mapping</strong><br />Each VM has virtual CPUs (vCPUs), which are dynamically mapped to physical CPUs (pCPUs).</li><li><strong>Memory Management</strong><br />Guest OS thinks it controls memory, but actual memory mapping is managed by the hypervisor.</li></ol><hr /><h3 id="how-it-works-kvm"><a class="markdownIt-Anchor" href="#how-it-works-kvm"></a> <strong>How It Works (KVM):</strong></h3><ul><li>A guest OS is launched as a Linux process.</li><li>CPU runs guest code in a special mode.</li><li>Memory and I/O are virtualized by QEMU.</li><li>Admins use Libvirt to manage VM lifecycle.</li></ul><h2 id="question-4-10-points-describe-shared-responsibility-model-in-cloud-computing-use-a-particular-aws-service-covered-in-this-unit-to-explain-how-responsibilities-are-shared-between-cloud-providers-and-cloud-customers"><a class="markdownIt-Anchor" href="#question-4-10-points-describe-shared-responsibility-model-in-cloud-computing-use-a-particular-aws-service-covered-in-this-unit-to-explain-how-responsibilities-are-shared-between-cloud-providers-and-cloud-customers"></a> Question 4 [10 points] Describe shared responsibility model in cloud computing. Use a particular AWS service covered in this unit to explain how responsibilities are shared between cloud providers and cloud customers.</h2><h3 id="aws-shared-responsibility-model"><a class="markdownIt-Anchor" href="#aws-shared-responsibility-model"></a> <strong>AWS Shared Responsibility Model</strong></h3><p>Cloud security is a shared responsibility between <strong>AWS</strong> and the <strong>customer</strong>.</p><hr /><h4 id="aws-is-responsible-for-security-of-the-cloud"><a class="markdownIt-Anchor" href="#aws-is-responsible-for-security-of-the-cloud"></a> <strong>AWS is responsible for “Security <em>of</em> the Cloud”</strong></h4><p>Includes:</p><ul><li>Physical security of data centers</li><li>Hardware, software, and network infrastructure</li><li>Virtualization and storage layer</li><li>Host OS (for managed services like RDS or Lambda)</li></ul><hr /><h4 id="customer-is-responsible-for-security-in-the-cloud"><a class="markdownIt-Anchor" href="#customer-is-responsible-for-security-in-the-cloud"></a> <strong>Customer is responsible for “Security <em>in</em> the Cloud”</strong></h4><p>Includes:</p><ul><li>Operating system (if using EC2)</li><li>Applications and data</li><li>Security groups and firewall rules</li><li>IAM users, roles, and permissions</li><li>Encryption and network configuration</li></ul><hr /><h3 id="example-amazon-ec2"><a class="markdownIt-Anchor" href="#example-amazon-ec2"></a> <strong>Example: Amazon EC2</strong></h3><ul><li><strong>AWS</strong> handles:<ul><li>Data center</li><li>Physical host security</li><li>Hypervisor and virtualization layer</li></ul></li><li><strong>Customer</strong> handles:<ul><li>Installing and patching the OS</li><li>Application configuration and updates</li><li>Configuring security groups and IAM roles</li><li>Protecting access (SSH keys, MFA)</li></ul></li></ul><h2 id="question-5-8-points-describe-the-concept-of-elasticity-give-examples-of-two-aws-services-with-the-term-elastic-as-part-of-the-service-name-for-each-service-describe-what-elastic-features-are-available-in-this-service"><a class="markdownIt-Anchor" href="#question-5-8-points-describe-the-concept-of-elasticity-give-examples-of-two-aws-services-with-the-term-elastic-as-part-of-the-service-name-for-each-service-describe-what-elastic-features-are-available-in-this-service"></a> Question 5 [8 points] Describe the concept of elasticity. Give examples of two AWS services with the term “elastic” as part of the service name. For each service, describe what elastic features are available in this service.</h2><h3 id="what-is-elasticity"><a class="markdownIt-Anchor" href="#what-is-elasticity"></a> <strong>What is Elasticity?</strong></h3><p>Elasticity is the ability of a system to automatically <strong>scale resources up or down</strong> based on demand.<br />弹性是系统根据需求自动<strong>扩大或缩小资源</strong>的能力。</p><hr /><h3 id="example-1-amazon-ec2-elastic-compute-cloud"><a class="markdownIt-Anchor" href="#example-1-amazon-ec2-elastic-compute-cloud"></a> <strong>Example 1: Amazon EC2 (Elastic Compute Cloud)</strong></h3><ul><li><strong>Elastic feature:</strong><br />Auto Scaling Group can automatically launch or terminate EC2 instances based on traffic, CPU usage, or a schedule. Auto Scaling Group 可以根据流量、CPU 使用率或计划自动启动或终止 EC2 实例。</li><li><strong>Result:</strong><br />You pay only for what you need. It helps maintain performance under load and saves cost when demand drops. 您只需按需付费。这有助于在负载下保持性能，并在需求下降时节省成本。</li></ul><hr /><h3 id="example-2-elastic-load-balancing-elb"><a class="markdownIt-Anchor" href="#example-2-elastic-load-balancing-elb"></a> <strong>Example 2: Elastic Load Balancing (ELB)</strong></h3><ul><li><strong>Elastic feature:</strong><br />Automatically distributes incoming traffic across healthy targets (e.g., EC2, containers).<br />自动在健康目标（例如 EC2、容器）之间分配传入流量。</li><li><strong>Result:</strong><br />Improves availability and fault tolerance by adjusting to changing traffic patterns. 通过适应不断变化的流量模式来提高可用性和容错能力。</li></ul><h2 id="iam-policy"><a class="markdownIt-Anchor" href="#iam-policy"></a> IAM policy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Condition&quot;: &#123;</span><br><span class="line">        &quot;StringEquals&quot;: &#123;</span><br><span class="line">          &quot;ec2:InstanceType&quot;: [&quot;t2.micro&quot;, &quot;t2.small&quot;],</span><br><span class="line">          &quot;aws:ResourceTag/Unit&quot;: &quot;COMP5349&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;Resource&quot;: &quot;arn:aws:ec2:*:*:instance/*&quot;,</span><br><span class="line">      &quot;Action&quot;: [</span><br><span class="line">        &quot;ec2:StopInstances&quot;,</span><br><span class="line">        &quot;ec2:TerminateInstances&quot;,</span><br><span class="line">        &quot;ec2:StartInstances&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;Effect&quot;: &quot;Allow&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This policy allows starting, stopping, or terminating EC2 instances <strong>only if</strong>:</p><ul><li>The instance type is <code>t2.micro</code> or <code>t2.small</code>, <strong>and</strong></li><li>The instance is tagged with <code>Unit=COMP5349</code>.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Condition&quot;: &#123;</span><br><span class="line">        &quot;StringEquals&quot;: &#123;</span><br><span class="line">          &quot;ec2:InstanceType&quot;: [&quot;t2.micro&quot;, &quot;t2.small&quot;],</span><br><span class="line">          &quot;aws:ResourceTag/Project&quot;: &quot;DataAnalytics&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;Resource&quot;: &quot;arn:aws:ec2:*:*:instance/*&quot;,</span><br><span class="line">      &quot;Action&quot;: [&quot;ec2:StopInstances&quot;, &quot;ec2:StartInstances&quot;],</span><br><span class="line">      &quot;Effect&quot;: &quot;Allow&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This policy allows a user to start or stop EC2 instances <strong>only if</strong> the instance is type <code>t2.micro</code> or <code>t2.small</code> <strong>and</strong> has the tag <code>Project=DataAnalytics</code>. No other instances are affected.</p><h2 id="question-1-6-points-discuss-the-distinction-between-an-amazon-iam-group-and-an-amazon-iam-role-and-identify-one-situation-that-can-be-accomplished-using-both-mechanisms-and-another-situation-that-can-only-be-done-with-one-of-them"><a class="markdownIt-Anchor" href="#question-1-6-points-discuss-the-distinction-between-an-amazon-iam-group-and-an-amazon-iam-role-and-identify-one-situation-that-can-be-accomplished-using-both-mechanisms-and-another-situation-that-can-only-be-done-with-one-of-them"></a> Question 1 [6 points ] Discuss the distinction between an Amazon IAM group and an Amazon IAM role, and identify one situation that can be accomplished using both mechanisms, and another situation that can only be done with one of them.</h2><p>IAM Groups are used to assign permissions to multiple users. IAM Roles are used for temporary access, often by AWS services or external users. Both can be used to grant access to S3. But only roles can be assumed by services like Lambda, which groups cannot do.</p><table><thead><tr><th>Feature</th><th>IAM Group</th><th>IAM Role</th></tr></thead><tbody><tr><td><strong>Purpose</strong></td><td>Group multiple IAM users to manage permissions together</td><td>Temporary access for users or services</td></tr><tr><td><strong>Who uses it</strong></td><td>IAM users in the same account</td><td>IAM users, AWS services, federated users</td></tr><tr><td><strong>Credential</strong></td><td>Uses IAM user’s own credentials</td><td>Uses <strong>temporary credentials</strong> assumed at runtime</td></tr></tbody></table><h2 id="question-2-8-points-describe-the-distinctions-between-the-virtualization-technologies-employed-by-xen-hypervisor-and-nitro-system"><a class="markdownIt-Anchor" href="#question-2-8-points-describe-the-distinctions-between-the-virtualization-technologies-employed-by-xen-hypervisor-and-nitro-system"></a> Question 2 [8 points] Describe the distinctions between the virtualization technologies employed by Xen hypervisor and Nitro system.</h2><table><thead><tr><th>Feature</th><th><strong>Xen Hypervisor</strong></th><th><strong>Nitro System</strong></th></tr></thead><tbody><tr><td><strong>Type</strong></td><td>Traditional <strong>Type-1 hypervisor</strong></td><td>Hardware + software system using <strong>hardware-assisted</strong> virtualization</td></tr><tr><td><strong>Architecture</strong></td><td>Uses <strong>Dom0</strong> (control domain) to manage guest VMs</td><td><strong>No Dom0</strong>, management tasks moved to <strong>Nitro Controller</strong></td></tr><tr><td><strong>Isolation</strong></td><td>Guest VMs share hypervisor layer, less strict isolation</td><td>Each VM runs on a dedicated <strong>microVM</strong> with strong isolation</td></tr><tr><td><strong>Performance</strong></td><td>Good, but more <strong>overhead</strong> due to Dom0 and software-based I/O</td><td>Better performance due to <strong>offloading I/O to hardware</strong></td></tr><tr><td><strong>Security</strong></td><td>Medium – depends on Dom0 integrity</td><td>High – minimal trusted computing base, better isolation</td></tr><tr><td><strong>Used by</strong></td><td>Early generations of EC2 instances</td><td>Current EC2 instance families (e.g., M5, C5, T3, etc.)</td></tr></tbody></table><p>Xen uses a traditional hypervisor model with a special control domain (Dom0) to manage guest VMs. It relies more on software-based virtualization. In contrast, the Nitro system uses hardware-assisted virtualization with dedicated microVMs and offloads networking and storage to dedicated Nitro cards, providing better performance and stronger isolation. Xen 使用传统的虚拟机管理程序模型，并使用特殊的控制域 (Dom0) 来管理客户虚拟机。它更多地依赖于基于软件的虚拟化。相比之下，Nitro 系统使用硬件辅助虚拟化，配备专用的 microVM，并将网络和存储负载转移到专用的 Nitro 卡上，从而提供更佳的性能和更强的隔离性。</p><h2 id="question-3-5-points-explain-the-meaning-of-infrastructure-as-code-give-an-example-of-aws-iac-service"><a class="markdownIt-Anchor" href="#question-3-5-points-explain-the-meaning-of-infrastructure-as-code-give-an-example-of-aws-iac-service"></a> Question 3 [5 points] Explain the meaning of Infrastructure as Code. Give an example of AWS IaC service.</h2><p>Infrastructure as Code (IaC) is a way to manage cloud infrastructure using code. In AWS, CloudFormation is an example of IaC. Users define infrastructure (e.g., EC2, VPC, RDS) in a template, and AWS automatically sets it up. This improves automation, consistency, and repeatability. 基础设施即代码 (IaC) 是一种使用代码管理云基础设施的方法。在 AWS 中，CloudFormation 就是 IaC 的一个例子。用户在模板中定义基础设施（例如 EC2、VPC、RDS），AWS 会自动设置。这提高了自动化程度、一致性和可重复性。</p><h2 id="question-4-6-points-identify-and-describe-two-of-the-various-mechanisms-that-are-necessary-for-ensuring-a-highly-available-environment"><a class="markdownIt-Anchor" href="#question-4-6-points-identify-and-describe-two-of-the-various-mechanisms-that-are-necessary-for-ensuring-a-highly-available-environment"></a> Question 4 [6 points] Identify and describe two of the various mechanisms that are necessary for ensuring a highly available environment.</h2><p>High availability can be achieved by deploying services across multiple Availability Zones and using load balancers. Multi-AZ ensures redundancy in case one zone fails, while load balancers distribute traffic to healthy instances, preventing overload and improving fault tolerance. 通过跨多个可用区部署服务并使用负载均衡器，可以实现高可用性。多可用区可确保在一个可用区发生故障时提供冗余，而负载均衡器可将流量分配到运行正常的实例，从而防止过载并提高容错能力。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5618</title>
      <link href="/2808f181.html"/>
      <url>/2808f181.html</url>
      
        <content type="html"><![CDATA[<h2 id="pcmm"><a class="markdownIt-Anchor" href="#pcmm"></a> PCMM</h2><table><thead><tr><th>Level</th><th>名称</th><th>关键词</th><th>核心机制</th></tr></thead><tbody><tr><td>1</td><td>Initial</td><td>无流程，混乱 No process, chaos</td><td>靠个人，无法复制 individual &amp; cannot be replicated</td></tr><tr><td>2</td><td>Managed</td><td>基础人事流程稳定 The basic personnel process is stable</td><td>招聘/绩效/激励机制初具雏形 The recruitment/performance/incentive mechanism has taken initial shape</td></tr><tr><td>3</td><td>Defined</td><td>全组织标准化 Standardization of the entire organization</td><td>能力模型、职业发展、知识库 Competency Model, Career Development, Knowledge Base</td></tr><tr><td>4</td><td>Predictable</td><td>数据驱动、可预测 Data-driven and predictable</td><td>度量模型、绩效预测 Measurement model, performance prediction</td></tr><tr><td>5</td><td>Optimizing</td><td>持续改进、快速学习 Continuous improvement and rapid learning</td><td>创新能力提升、组织学习文化 Innovation capacity enhancement, organizational learning culture</td></tr></tbody></table><p>“Chaos → Control → Consistency → Calculation → Continuous Improvement”</p><p>🧠 类比法：把 P-CMM 想成「一家公司如何管理员工成长的五个阶段」</p><h3 id="整体目标"><a class="markdownIt-Anchor" href="#整体目标"></a> 🎯 整体目标：</h3><p>P-CMM 就像企业的人才成长“地图”。它帮助公司一步步从「人治混乱」进化到「高效、有文化、有学习能力」的团队组织。</p><hr /><h3 id="level-1-initial-初始级"><a class="markdownIt-Anchor" href="#level-1-initial-初始级"></a> 🟩 <strong>Level 1: Initial 初始级</strong></h3><p><strong>🔧 关键词：混乱、靠人撑</strong></p><blockquote><p>想象你刚进一家公司：<br />没有明确的岗位职责、没人帮你规划发展、干得好坏也没人评价，项目做得全靠“老王经验”，今天靠他，明天靠她。</p></blockquote><ul><li><strong>没有标准流程</strong></li><li><strong>人员成长靠天分或运气</strong></li><li>公司甚至不知道哪些人厉害，也不知道怎么留住人</li></ul><p>📌 <strong>类比</strong>：野路子创业公司，靠几个天才工程师硬撑。</p><hr /><h3 id="level-2-managed-受控级"><a class="markdownIt-Anchor" href="#level-2-managed-受控级"></a> 🟨 <strong>Level 2: Managed 受控级</strong></h3><p><strong>🧱 关键词：建立基本流程</strong></p><blockquote><p>公司意识到“不能只靠人顶”，开始制定一些基础规范：</p></blockquote><ul><li>招聘流程统一起来了</li><li>每个人有<strong>岗位职责描述</strong></li><li>有了<strong>绩效考核</strong>、<strong>入职培训</strong></li></ul><p>📌 <strong>类比</strong>：公司开始像样了，人力资源部上岗，入职会给你讲规章制度。</p><hr /><h3 id="level-3-defined-已定义级"><a class="markdownIt-Anchor" href="#level-3-defined-已定义级"></a> 🟧 <strong>Level 3: Defined 已定义级</strong></h3><p><strong>📘 关键词：组织标准化，能力模型</strong></p><blockquote><p>公司不满足于有流程，还想确保「每个岗位的人都符合要求」，于是：</p></blockquote><ul><li>建立了<strong>能力模型</strong>：比如“高级前端工程师”需要哪些技术？</li><li>所有人才发展路径开始<strong>组织统一管理</strong></li><li>有了<strong>晋升路径图</strong>，有明确的职业发展通道</li><li>团队内部也开始有“知识分享”文化</li></ul><p>📌 <strong>类比</strong>：你在大公司看到“技术等级标准表”、“培训课程地图”、技术导师制度。</p><hr /><h3 id="level-4-predictable-可预测级"><a class="markdownIt-Anchor" href="#level-4-predictable-可预测级"></a> 🟦 <strong>Level 4: Predictable 可预测级</strong></h3><p><strong>📊 关键词：数据说话，绩效可量化</strong></p><blockquote><p>现在公司说：不能只靠制度，我们要看“效果”！于是：</p></blockquote><ul><li>收集每个人的绩效数据、离职率、培训结果等</li><li>可以“预测”：如果我们给某团队提升技能，他们未来能承担更大项目</li><li>绩效考核不再靠感觉，而是有<strong>量化指标</strong></li></ul><p>📌 <strong>类比</strong>：你公司 HR 发了一份“部门技能图谱”，说“前端组整体 CSS 能力平均 3.7 分”。</p><hr /><h3 id="level-5-optimizing-优化级"><a class="markdownIt-Anchor" href="#level-5-optimizing-优化级"></a> 🟪 <strong>Level 5: Optimizing 优化级</strong></h3><p><strong>🔁 关键词：持续改进，自驱成长</strong></p><blockquote><p>这时的公司已经非常成熟，它关注的是：</p></blockquote><ul><li><strong>持续优化员工能力</strong>：比如推动“轮岗”、“跨团队学习”</li><li>鼓励员工自主学习、提出改进意见</li><li>整个公司变成了“学习型组织”</li></ul><p>📌 <strong>类比</strong>：你在团队开分享会、公司每年搞“学习黑客松”，员工主动参与改进流程。</p><table><thead><tr><th>级别</th><th>名称</th><th>关键词</th><th>类比</th></tr></thead><tbody><tr><td>1</td><td>Initial</td><td>混乱，靠人撑</td><td>野路子创业团队</td></tr><tr><td>2</td><td>Managed</td><td>有基本流程</td><td>有 HR 的公司</td></tr><tr><td>3</td><td>Defined</td><td>标准化 + 能力模型</td><td>成熟大厂</td></tr><tr><td>4</td><td>Predictable</td><td>数据驱动</td><td>数据化绩效管理</td></tr><tr><td>5</td><td>Optimizing</td><td>自驱+持续优化</td><td>学习型组织</td></tr></tbody></table><p>it helps an organization evolve from relying on heroic individuals to building a systematic, measurable, and continuously improving approach to workforce development.</p><h2 id="agile敏捷开发复习全攻略"><a class="markdownIt-Anchor" href="#agile敏捷开发复习全攻略"></a> ✅ <strong>Agile（敏捷开发）复习全攻略</strong></h2><hr /><h3 id="一-agile-定义中英对照"><a class="markdownIt-Anchor" href="#一-agile-定义中英对照"></a> 📘 一、Agile 定义（中英对照）</h3><ul><li><strong>英文</strong>：Agile is an iterative and incremental approach to software development that emphasizes flexibility, collaboration, and customer feedback.</li><li><strong>中文</strong>：敏捷是一种<strong>迭代式、增量式</strong>的软件开发方法，强调<strong>灵活应变、团队协作与客户反馈</strong>。</li></ul><hr /><h3 id="二-agile-manifesto敏捷宣言-4-对价值观"><a class="markdownIt-Anchor" href="#二-agile-manifesto敏捷宣言-4-对价值观"></a> 🧠 二、Agile Manifesto（敏捷宣言 4 对价值观）</h3><table><thead><tr><th>原则英文（考试必记）</th><th>中文解释（助理解）</th></tr></thead><tbody><tr><td>Individuals and interactions over processes and tools</td><td>重人不重工具</td></tr><tr><td>Working software over comprehensive documentation</td><td>可用软件胜过长篇文档</td></tr><tr><td>Customer collaboration over contract negotiation</td><td>客户合作重于合同</td></tr><tr><td>Responding to change over following a plan</td><td>快速应变胜过死守计划</td></tr></tbody></table><hr /><h3 id="三-agile-与-waterfall-对比考试常考"><a class="markdownIt-Anchor" href="#三-agile-与-waterfall-对比考试常考"></a> 🧩 三、Agile 与 Waterfall 对比（考试常考）</h3><table><thead><tr><th>对比项</th><th>Agile 敏捷开发</th><th>Waterfall 瀑布式开发</th></tr></thead><tbody><tr><td>流程结构</td><td>迭代循环</td><td>串行阶段</td></tr><tr><td>客户参与</td><td>高度参与</td><td>开发前签合同后很少沟通</td></tr><tr><td>计划变更</td><td>接受变更</td><td>抵抗变更</td></tr><tr><td>文档依赖</td><td>少文档，重沟通</td><td>文档齐全</td></tr><tr><td>交付方式</td><td>小步快跑，频繁交付</td><td>一次性交付</td></tr></tbody></table><hr /><h3 id="四-agile-常见术语必须认识"><a class="markdownIt-Anchor" href="#四-agile-常见术语必须认识"></a> 🔁 四、Agile 常见术语（必须认识）</h3><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td><strong>Sprint</strong></td><td>一次迭代开发周期（通常 1~4 周）</td></tr><tr><td><strong>Scrum</strong></td><td>一种流行的 Agile 框架</td></tr><tr><td><strong>Product Backlog</strong></td><td>所有功能的待办列表</td></tr><tr><td><strong>User Story</strong></td><td>以用户角度写的需求描述（如：“作为一个用户，我希望…”）</td></tr><tr><td><strong>Sprint Review</strong></td><td>迭代结束后的评审会议</td></tr><tr><td><strong>Burndown Chart</strong></td><td>展示工作量减少趋势的图</td></tr><tr><td><strong>Daily Scrum</strong></td><td>每日站会，3 问：昨天做了啥？今天做啥？遇到啥问题？</td></tr></tbody></table><hr /><h3 id="五-考试常见题型例子"><a class="markdownIt-Anchor" href="#五-考试常见题型例子"></a> ✅ 五、考试常见题型例子</h3><blockquote><p><strong>Q1: Which of the following is NOT part of Agile methodology?</strong><br />A. Continuous integration<br />B. Simple design<br />❌ C. Rigorous documentation<br />❌ D. Following a rigid plan<br />✅ → C 和 D 是 <strong>Waterfall</strong> 的特征！</p></blockquote><blockquote><p><strong>Q2: What is a user story in Agile?</strong><br />→ A short, informal description of a feature told from the user’s perspective.</p></blockquote><hr /><h3 id="小口诀背诵总结"><a class="markdownIt-Anchor" href="#小口诀背诵总结"></a> 🎯 小口诀（背诵总结）</h3><blockquote><p>“人优于工具、产品优于文档、客户胜合同、响应强计划”<br /><strong>Agile 四原则口诀助记</strong></p></blockquote><h2 id="1-isoiec-25010"><a class="markdownIt-Anchor" href="#1-isoiec-25010"></a> 📘 1. <strong>ISO/IEC 25010</strong>：</h2><ul><li><strong>Product Quality Model</strong>（软件产品质量模型）</li><li><strong>Quality in Use Model</strong>（使用中的质量模型）</li></ul><hr /><h3 id="2-product-quality-的-8-个特性记关键词"><a class="markdownIt-Anchor" href="#2-product-quality-的-8-个特性记关键词"></a> 🧩 2. <strong>Product Quality 的 8 个特性（记关键词）</strong>：</h3><table><thead><tr><th>特性编号</th><th>名称</th><th>中文含义</th><th>子特性（重点记）</th></tr></thead><tbody><tr><td>1</td><td><strong>Functional suitability</strong></td><td>功能适合性</td><td>Functional correctness, completeness</td></tr><tr><td>2</td><td><strong>Performance efficiency</strong></td><td>性能效率</td><td>Time behavior, resource utilization</td></tr><tr><td>3</td><td><strong>Compatibility</strong></td><td>兼容性</td><td>Co-existence, interoperability</td></tr><tr><td>4</td><td><strong>Usability</strong></td><td>易用性</td><td>Learnability, user error protection</td></tr><tr><td>5</td><td><strong>Reliability</strong></td><td>可靠性</td><td>Maturity, fault tolerance, recoverability</td></tr><tr><td>6</td><td><strong>Security</strong></td><td>安全性</td><td>Confidentiality, integrity, non-repudiation</td></tr><tr><td>7</td><td><strong>Maintainability</strong></td><td>可维护性</td><td>Modularity, analysability, modifiability</td></tr><tr><td>8</td><td><strong>Portability</strong></td><td>可移植性</td><td>Adaptability, installability, replaceability</td></tr></tbody></table><hr /><h4 id="1-functional-suitability-功能适合性"><a class="markdownIt-Anchor" href="#1-functional-suitability-功能适合性"></a> ✅ 1. <strong>Functional Suitability 功能适合性</strong></h4><p><strong>Definition 定义</strong>:<br />The degree to which the system provides functions that meet stated and implied needs.<br />系统在多大程度上提供符合明确和隐含需求的功能。</p><h4 id="sub-characteristics-子特性"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Functional completeness 功能完整性</strong><br />👉 <em>Example</em>: The e-commerce site supports search, filter, checkout, and payment functions as expected.<br />👉 <em>示例</em>: 电商平台支持完整的搜索、筛选、结账和支付功能。</li><li><strong>Functional correctness 功能正确性</strong><br />👉 <em>Example</em>: The total price calculation always includes the correct discount and tax.<br />👉 <em>示例</em>: 系统始终正确地计算折扣和税费。</li><li><strong>Functional appropriateness 功能适当性</strong><br />👉 <em>Example</em>: The one-click reorder function reduces steps for frequent buyers.<br />👉 <em>示例</em>: “一键复购”功能简化了老客户的操作流程。</li></ul><hr /><h4 id="2-performance-efficiency-性能效率"><a class="markdownIt-Anchor" href="#2-performance-efficiency-性能效率"></a> ✅ 2. <strong>Performance Efficiency 性能效率</strong></h4><p><strong>Definition 定义</strong>:<br />How the system uses resources and responds within acceptable time limits.<br />系统在可接受的时间和资源内完成任务的能力。</p><h4 id="sub-characteristics-子特性-2"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-2"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Time behavior 时间行为</strong><br />👉 <em>Example</em>: Product detail pages load in less than 2 seconds for 95% of users.<br />👉 <em>示例</em>: 商品页面在 95% 的情况下加载时间低于 2 秒。</li><li><strong>Resource utilization 资源利用率</strong><br />👉 <em>Example</em>: The server CPU remains below 75% during flash sales.<br />👉 <em>示例</em>: 秒杀活动期间 CPU 占用率不超过 75%。</li><li><strong>Capacity 容量处理能力</strong><br />👉 <em>Example</em>: The platform supports up to 10,000 simultaneous users without crashing.<br />👉 <em>示例</em>: 平台支持最多 10,000 并发用户而不崩溃。</li></ul><hr /><h4 id="3-compatibility-兼容性"><a class="markdownIt-Anchor" href="#3-compatibility-兼容性"></a> ✅ 3. <strong>Compatibility 兼容性</strong></h4><p><strong>Definition 定义</strong>:<br />The system’s ability to operate with other systems.<br />系统与其他系统共存或交互的能力。</p><h4 id="sub-characteristics-子特性-3"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-3"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Co-existence 共存性</strong><br />👉 <em>Example</em>: The desktop app coexists with antivirus software without conflict.<br />👉 <em>示例</em>: 桌面程序与杀毒软件可以正常共存，不冲突。</li><li><strong>Interoperability 互操作性</strong><br />👉 <em>Example</em>: Integrates smoothly with PayPal and Stripe through APIs.<br />👉 <em>示例</em>: 系统可通过 API 与 PayPal、Stripe 支付系统顺利对接。</li></ul><hr /><h4 id="4-usability-易用性"><a class="markdownIt-Anchor" href="#4-usability-易用性"></a> ✅ 4. <strong>Usability 易用性</strong></h4><p><strong>Definition 定义</strong>:<br />The ease with which users can learn and use the system.<br />用户学习和操作系统的难易程度。</p><h4 id="sub-characteristics-子特性-4"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-4"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Learnability 可学习性</strong><br />👉 <em>Example</em>: New users can complete checkout without training within 5 minutes.<br />👉 <em>示例</em>: 新用户可在 5 分钟内无需培训完成结账流程。</li><li><strong>Operability 可操作性</strong><br />👉 <em>Example</em>: Key actions like “Add to cart” are always within two clicks.<br />👉 <em>示例</em>: 购物车按钮等关键操作不超过两次点击即可完成。</li><li><strong>User error protection 用户错误预防</strong><br />👉 <em>Example</em>: Warns users before deleting saved addresses.<br />👉 <em>示例</em>: 删除地址前弹出确认提示，避免误操作。</li><li><strong>Accessibility 可访问性</strong><br />👉 <em>Example</em>: Fully navigable by screen readers for visually impaired users.<br />👉 <em>示例</em>: 支持屏幕阅读器，方便视障用户操作系统。</li></ul><hr /><h4 id="5-reliability-可靠性"><a class="markdownIt-Anchor" href="#5-reliability-可靠性"></a> ✅ 5. <strong>Reliability 可靠性</strong></h4><p><strong>Definition 定义</strong>:<br />The ability of the system to function under defined conditions.<br />系统在指定条件下持续工作的能力。</p><h3 id="sub-characteristics-子特性-5"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-5"></a> 🔹 Sub-characteristics 子特性：</h3><ul><li><strong>Maturity 成熟性</strong><br />👉 <em>Example</em>: The system has had no downtime in the past 6 months.<br />👉 <em>示例</em>: 过去 6 个月无任何系统中断。</li><li><strong>Fault tolerance 容错性</strong><br />👉 <em>Example</em>: If one payment server fails, another takes over seamlessly.<br />👉 <em>示例</em>: 如果一个支付节点故障，系统能自动切换至备用节点。</li><li><strong>Recoverability 可恢复性</strong><br />👉 <em>Example</em>: User sessions are restored within 10 seconds after a crash.<br />👉 <em>示例</em>: 系统崩溃后在 10 秒内恢复用户会话。</li><li><strong>Availability 可用性</strong><br />👉 <em>Example</em>: The website guarantees 99.9% uptime per month.<br />👉 <em>示例</em>: 网站每月可用性保证达 99.9%。</li></ul><hr /><h4 id="6-security-安全性"><a class="markdownIt-Anchor" href="#6-security-安全性"></a> ✅ 6. <strong>Security 安全性</strong></h4><p><strong>Definition 定义</strong>:<br />The system protects information and prevents unauthorized access.<br />系统保护信息安全，防止未经授权的访问。</p><h4 id="sub-characteristics-子特性-6"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-6"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Confidentiality 机密性</strong><br />👉 <em>Example</em>: User passwords are stored using SHA-256 encryption.<br />👉 <em>示例</em>: 用户密码使用 SHA-256 加密存储。</li><li><strong>Integrity 完整性</strong><br />👉 <em>Example</em>: Order records are digitally signed to prevent tampering.<br />👉 <em>示例</em>: 订单记录加签防篡改。</li><li><strong>Non-repudiation 不可否认性</strong><br />👉 <em>Example</em>: Admin actions are logged with timestamps and usernames.<br />👉 <em>示例</em>: 所有管理员操作都有时间戳和用户名记录，防止事后抵赖。</li><li><strong>Accountability 可追责性</strong><br />👉 <em>Example</em>: Audit trails identify who accessed which records and when.<br />👉 <em>示例</em>: 审计日志可记录每次数据访问的用户和时间。</li><li><strong>Authenticity 真实性</strong><br />👉 <em>Example</em>: Two-factor authentication is required for admin login.<br />👉 <em>示例</em>: 管理员登录必须启用双因素认证。</li></ul><hr /><h4 id="7-maintainability-可维护性"><a class="markdownIt-Anchor" href="#7-maintainability-可维护性"></a> ✅ 7. <strong>Maintainability 可维护性</strong></h4><p><strong>Definition 定义</strong>:<br />The ease with which the software can be modified.<br />软件修改、升级或修复的难易程度。</p><h4 id="sub-characteristics-子特性-7"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-7"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Modularity 模块化</strong><br />👉 <em>Example</em>: Product and payment modules can be updated separately.<br />👉 <em>示例</em>: 产品模块和支付模块可独立升级不互相影响。</li><li><strong>Reusability 可复用性</strong><br />👉 <em>Example</em>: The login component is reused across multiple systems.<br />👉 <em>示例</em>: 登录模块可在多个系统间复用。</li><li><strong>Analysability 可分析性</strong><br />👉 <em>Example</em>: System logs clearly show root causes of failures.<br />👉 <em>示例</em>: 日志清晰可用，便于定位故障原因。</li><li><strong>Modifiability 可修改性</strong><br />👉 <em>Example</em>: Tax rate changes can be made without editing other modules.<br />👉 <em>示例</em>: 修改税率不影响其他功能模块。</li><li><strong>Testability 可测试性</strong><br />👉 <em>Example</em>: Business logic is fully covered by unit and integration tests.<br />👉 <em>示例</em>: 所有核心业务逻辑均可自动化测试。</li></ul><hr /><h4 id="8-portability-可移植性"><a class="markdownIt-Anchor" href="#8-portability-可移植性"></a> ✅ 8. <strong>Portability 可移植性</strong></h4><p><strong>Definition 定义</strong>:<br />The ease with which the system can be transferred to another environment.<br />系统在不同平台或环境间迁移的难易程度。</p><h4 id="sub-characteristics-子特性-8"><a class="markdownIt-Anchor" href="#sub-characteristics-子特性-8"></a> 🔹 Sub-characteristics 子特性：</h4><ul><li><strong>Adaptability 适应性</strong><br />👉 <em>Example</em>: The app runs on Windows, macOS, and Linux without code changes.<br />👉 <em>示例</em>: 应用可在 Win/Mac/Linux 系统中无需修改直接运行。</li><li><strong>Installability 可安装性</strong><br />👉 <em>Example</em>: The system offers a one-click Docker deployment script.<br />👉 <em>示例</em>: 提供一键部署脚本，安装简单快速。</li><li><strong>Replaceability 可替换性</strong><br />👉 <em>Example</em>: Stripe can be replaced with PayPal via configuration only.<br />👉 <em>示例</em>: 支付模块可通过配置切换为 PayPal，无需改动代码。</li></ul><h3 id="️-quality-in-use-的-5-个特性中英文对照-示例"><a class="markdownIt-Anchor" href="#️-quality-in-use-的-5-个特性中英文对照-示例"></a> ✳️ Quality in Use 的 5 个特性（中英文对照 + 示例）</h3><table><thead><tr><th>#</th><th>特性名称</th><th>英文名称</th><th>简要解释</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>有效性</td><td><strong>Effectiveness</strong></td><td>用户能否成功、准确完成目标任务</td><td>用户是否能顺利下单并收到确认</td></tr><tr><td>2</td><td>效率</td><td><strong>Efficiency</strong></td><td>用户完成任务所花的时间、资源是否合理</td><td>用户可在 2 分钟内完成购物流程</td></tr><tr><td>3</td><td>满意度</td><td><strong>Satisfaction</strong></td><td>用户对产品的整体满意程度</td><td>用户给出好评或愿意推荐</td></tr><tr><td>4</td><td>风险规避性</td><td><strong>Freedom from Risk</strong></td><td>产品使用中不会带来经济/健康/隐私等风险</td><td>系统防止支付泄露或误操作退款</td></tr><tr><td>5</td><td>情境覆盖性</td><td><strong>Context Coverage</strong></td><td>产品在不同使用场景下都能正常发挥功能</td><td>无论用户使用手机还是桌面，系统都能稳定运行</td></tr></tbody></table><hr /><h4 id="每个子特性英文定义-示例背诵用"><a class="markdownIt-Anchor" href="#每个子特性英文定义-示例背诵用"></a> 📘 每个子特性英文定义 + 示例（背诵用）</h4><hr /><h4 id="1-effectiveness有效性"><a class="markdownIt-Anchor" href="#1-effectiveness有效性"></a> 1. <strong>Effectiveness（有效性）</strong></h4><ul><li><strong>Definition</strong>:<br />Accuracy and completeness with which users achieve goals.</li><li><strong>Example</strong>:<br /><em>Users can successfully complete the checkout process and receive order confirmation every time.</em></li><li><strong>中文示例</strong>：用户每次都能成功完成结账并收到订单确认。</li></ul><hr /><h4 id="2-efficiency效率"><a class="markdownIt-Anchor" href="#2-efficiency效率"></a> 2. <strong>Efficiency（效率）</strong></h4><ul><li><strong>Definition</strong>:<br />Resources expended in relation to the accuracy and completeness of goal achievement.</li><li><strong>Example</strong>:<br /><em>Users can finish placing an order in less than 2 minutes using no more than 5 steps.</em></li><li><strong>中文示例</strong>：用户下单不超过 5 步，总时长不超过 2 分钟。</li></ul><hr /><h4 id="3-satisfaction满意度"><a class="markdownIt-Anchor" href="#3-satisfaction满意度"></a> 3. <strong>Satisfaction（满意度）</strong></h4><ul><li><strong>Definition</strong>:<br />Degree to which user needs are fulfilled and they are pleased with the product.</li><li><strong>Example</strong>:<br /><em>80% of users rate the system 4 stars or higher in satisfaction surveys.</em></li><li><strong>中文示例</strong>：80% 用户在满意度调查中打出 4 星以上评分。</li></ul><hr /><h4 id="4-freedom-from-risk风险规避性"><a class="markdownIt-Anchor" href="#4-freedom-from-risk风险规避性"></a> 4. <strong>Freedom from Risk（风险规避性）</strong></h4><ul><li><strong>Definition</strong>:<br />Avoidance of economic, health, environmental or social risks to users.</li><li><strong>Example</strong>:<br /><em>The system prevents double payment and protects user data through encryption.</em></li><li><strong>中文示例</strong>：系统防止重复扣款，并使用加密保护用户信息。</li></ul><hr /><h4 id="5-context-coverage情境覆盖性"><a class="markdownIt-Anchor" href="#5-context-coverage情境覆盖性"></a> 5. <strong>Context Coverage（情境覆盖性）</strong></h4><ul><li><strong>Definition</strong>:<br />Degree to which the product works well across various contexts of use (devices, users, environments).</li><li><strong>Example</strong>:<br /><em>The app works consistently on desktop, tablet, and mobile, with accessible features for all user groups.</em></li><li><strong>中文示例</strong>：应用在桌面、平板、手机等不同设备上功能一致，且适配残障用户。</li></ul><h2 id="srssoftware-requirements-specification软件需求规格说明"><a class="markdownIt-Anchor" href="#srssoftware-requirements-specification软件需求规格说明"></a> ✅ <strong>SRS：Software Requirements Specification（软件需求规格说明）</strong></h2><blockquote><p>📌 考试中常考写作题（比如“改写模糊的 SRS”），也有结构题、判断题<br />🔍 特别爱出现在与 Verification（验证）相关的题目中</p></blockquote><hr /><h3 id="一-定义中英对照"><a class="markdownIt-Anchor" href="#一-定义中英对照"></a> 📘 一、定义（中英对照）</h3><ul><li><strong>英文定义</strong>：<br />An SRS is a structured document that describes what the software system should do, how it should interact with users, and any constraints on its operation or design.</li><li><strong>中文定义</strong>：<br />软件需求规格说明书是一份结构化文档，用于准确描述<strong>软件应该做什么</strong>、<strong>与用户如何交互</strong>、以及<strong>任何运行或设计上的约束</strong>。</li></ul><hr /><h3 id="二-标准结构ieee-830-模型考试常考"><a class="markdownIt-Anchor" href="#二-标准结构ieee-830-模型考试常考"></a> 📦 二、标准结构（IEEE 830 模型，考试常考）</h3><table><thead><tr><th>序号</th><th>模块</th><th>英文名</th><th>说明（中英对照）</th></tr></thead><tbody><tr><td>1️⃣</td><td>引言</td><td>Introduction</td><td>描述目的、术语、参考资料</td></tr><tr><td>2️⃣</td><td>总体描述</td><td>Overall Description</td><td>用户特征、功能概览、约束、假设等</td></tr><tr><td>3️⃣</td><td>具体需求</td><td>Specific Requirements</td><td>对每个功能和非功能要求的具体描述</td></tr><tr><td>4️⃣</td><td>外部接口</td><td>External Interfaces</td><td>用户界面、硬件、通信协议等接口需求</td></tr><tr><td>5️⃣</td><td>非功能需求</td><td>Non-functional Requirements</td><td>性能、安全、可靠性、可维护性等</td></tr><tr><td>6️⃣</td><td>其他附录</td><td>Appendices</td><td>图表、词汇表、支持材料等</td></tr></tbody></table><hr /><h3 id="三-常考内容分类"><a class="markdownIt-Anchor" href="#三-常考内容分类"></a> ✅ 三、常考内容分类：</h3><h4 id="1-functional-requirements功能性需求"><a class="markdownIt-Anchor" href="#1-functional-requirements功能性需求"></a> 🔹 1. Functional Requirements（功能性需求）</h4><ul><li>描述软件<strong>必须执行的具体功能</strong></li><li>常用句式：<em>The system shall allow…</em></li></ul><p>✅ 示例：The system shall allow users to search products by name and category.<br />✅ 中文：系统应允许用户按名称和类别搜索商品。</p><hr /><h4 id="2-non-functional-requirements非功能性需求"><a class="markdownIt-Anchor" href="#2-non-functional-requirements非功能性需求"></a> 🔹 2. Non-Functional Requirements（非功能性需求）</h4><ul><li>关注性能、可靠性、安全、可用性等“质量属性”</li><li>常常要你识别“模糊”的非功能需求并<strong>重写成具体、可测量语句</strong></li></ul><p>✅ 示例改写题：</p><blockquote><p>❌ 原句：The system should be fast.<br />✅ 改写：The system shall respond to user actions within 2 seconds for 95% of requests.</p></blockquote><hr /><h4 id="3-ambiguous-clear-重写考试热点"><a class="markdownIt-Anchor" href="#3-ambiguous-clear-重写考试热点"></a> 🔹 3. Ambiguous → Clear 重写（考试热点）</h4><p>题目经常给你一句模糊的 SRS，让你指出问题并改写：</p><p><strong>题目：</strong></p><blockquote><p>SRS-01: The system shall allow each customer to access only their own personal data quickly and not any other data related to any other customer.</p></blockquote><p><strong>改写思路：</strong></p><ul><li>明确“quickly”：给出时间指标</li><li>拆分多个需求（可访问 + 不能访问他人数据）</li><li>明确“personal data”是什么字段？</li></ul><p>✅ 改写示例：</p><ol><li><em>Each user shall be able to retrieve their own account data (including name, email, and order history) within 3 seconds.</em></li><li><em>The system shall prevent users from accessing the data of any other users.</em></li></ol><hr /><h3 id="四-关键词与写作句式总结"><a class="markdownIt-Anchor" href="#四-关键词与写作句式总结"></a> 🧠 四、关键词与写作句式总结</h3><table><thead><tr><th>英文句式</th><th>中文含义</th><th>用于哪种需求</th></tr></thead><tbody><tr><td>The system shall…</td><td>系统应…</td><td>所有 SRS 推荐写法</td></tr><tr><td>shall support…</td><td>应支持…</td><td>功能性</td></tr><tr><td>shall respond within…</td><td>应在…内响应</td><td>性能</td></tr><tr><td>shall be accessible to…</td><td>应对…可访问</td><td>可用性</td></tr><tr><td>shall restrict access to…</td><td>应限制访问…</td><td>安全性</td></tr></tbody></table><hr /><h3 id="五-常考练习题可试做"><a class="markdownIt-Anchor" href="#五-常考练习题可试做"></a> 🧪 五、常考练习题（可试做）</h3><ol><li>Identify any ambiguity in this requirement:<br /><em>“The system should support large-scale traffic.”</em><br />→ ❓ 哪些词模糊？你能重写吗？</li><li>List three non-functional requirements categories in SRS.<br />→ ✅ 性能效率、兼容性、可维护性</li></ol><h2 id="software-testing-types-levels软件测试类型与级别"><a class="markdownIt-Anchor" href="#software-testing-types-levels软件测试类型与级别"></a> ✅ <strong>Software Testing Types &amp; Levels（软件测试类型与级别）</strong></h2><ul><li>判断题：某测试属于哪个阶段</li><li>选择题：哪个是黑盒测试？哪个是系统测试？</li><li>简答题：对比测试类型、说明各层级目的</li><li>实战题：某代码/流程该用什么测试？</li></ul><h3 id="一-四个常见测试层级test-levels"><a class="markdownIt-Anchor" href="#一-四个常见测试层级test-levels"></a> 📘 一、四个常见<strong>测试层级</strong>（Test Levels）</h3><table><thead><tr><th>层级</th><th>英文名称</th><th>中文名称</th><th>目标</th><th>举例</th></tr></thead><tbody><tr><td>1️⃣</td><td>Unit Testing</td><td>单元测试</td><td>测试最小功能单元，如类、函数</td><td><code>testAddProduct()</code></td></tr><tr><td>2️⃣</td><td>Integration Testing</td><td>集成测试</td><td>测试模块之间的接口与交互</td><td>用户登录后跳转购物车模块</td></tr><tr><td>3️⃣</td><td>System Testing</td><td>系统测试</td><td>整体测试系统功能是否满足需求</td><td>测试整个平台从注册到支付是否顺畅</td></tr><tr><td>4️⃣</td><td>Acceptance Testing</td><td>验收测试</td><td>最终用户是否接受系统</td><td>用户代表测试是否能完成下单并收到确认</td></tr></tbody></table><hr /><h3 id="二-黑盒-vs-白盒-测试类型test-types"><a class="markdownIt-Anchor" href="#二-黑盒-vs-白盒-测试类型test-types"></a> 🧪 二、黑盒 vs 白盒 测试类型（Test Types）</h3><table><thead><tr><th>类型</th><th>定义</th><th>是否依赖代码结构</th><th>举例</th></tr></thead><tbody><tr><td><strong>Black-box</strong></td><td>不看代码，仅测试输入输出</td><td>❌ 不依赖</td><td>UI 测试、功能测试</td></tr><tr><td><strong>White-box</strong></td><td>依据代码结构设计测试用例</td><td>✅ 依赖结构</td><td>单元测试、语句覆盖</td></tr><tr><td><strong>Grey-box</strong></td><td>结合部分代码结构信息与行为测试</td><td>⚠️ 部分依赖</td><td>集成接口测试</td></tr></tbody></table><hr /><h3 id="三-测试类型汇总常考分类题"><a class="markdownIt-Anchor" href="#三-测试类型汇总常考分类题"></a> 🧩 三、测试类型汇总（常考分类题）</h3><table><thead><tr><th>分类</th><th>类型</th><th>中文名</th><th>示例</th></tr></thead><tbody><tr><td>功能性测试</td><td>Functional Testing</td><td>功能测试</td><td>登录、购物车是否正常</td></tr><tr><td>非功能测试</td><td>Performance Testing</td><td>性能测试</td><td>并发下单是否卡顿</td></tr><tr><td>非功能测试</td><td>Security Testing</td><td>安全测试</td><td>XSS、SQL 注入检测</td></tr><tr><td>非功能测试</td><td>Usability Testing</td><td>可用性测试</td><td>用户是否易于操作</td></tr><tr><td>特殊测试</td><td>Regression Testing</td><td>回归测试</td><td>修改代码后检查旧功能是否崩了</td></tr><tr><td>特殊测试</td><td>Smoke Testing</td><td>冒烟测试</td><td>发布前快速检查关键流程能否跑通</td></tr><tr><td>特殊测试</td><td>Stress Testing</td><td>压力测试</td><td>系统能撑多少并发？</td></tr><tr><td>特殊测试</td><td>Load Testing</td><td>负载测试</td><td>模拟 1000 用户下单场景</td></tr></tbody></table><h2 id="vvverification-and-validation验证与确认"><a class="markdownIt-Anchor" href="#vvverification-and-validation验证与确认"></a> ✅ <strong>V&amp;V：Verification and Validation（验证与确认）</strong></h2><ul><li>区分 Verification 和 Validation 的本质</li><li>各自常用的方法和测试活动</li><li>它们分别在软件生命周期中的位置</li></ul><h3 id="一-核心定义中英对照必背"><a class="markdownIt-Anchor" href="#一-核心定义中英对照必背"></a> 📘 一、核心定义（中英对照，必背）</h3><table><thead><tr><th>概念</th><th>英文定义</th><th>中文定义</th></tr></thead><tbody><tr><td><strong>Verification</strong></td><td>Are we building the product right?</td><td>我们做的东西“对”吗？（符合规格说明）</td></tr><tr><td><strong>Validation</strong></td><td>Are we building the right product?</td><td>我们做的是“对的东西”吗？（满足用户需求）</td></tr></tbody></table><hr /><p>🔍 快速理解方法：</p><blockquote><p>✅ <strong>Verification = 规范为王</strong>：我们按照规格说明（SRS、设计文档）来检查产品。<br />✅ <strong>Validation = 用户为王</strong>：我们关心用户是否满意、是否用得上。</p></blockquote><hr /><h3 id="二-对比表考试答题万能模板"><a class="markdownIt-Anchor" href="#二-对比表考试答题万能模板"></a> 🧪 二、对比表（考试答题万能模板）</h3><table><thead><tr><th>对比项</th><th>Verification（验证）</th><th>Validation（确认）</th></tr></thead><tbody><tr><td>问题</td><td><strong>我们是否按照规格做？</strong></td><td><strong>我们做的是用户想要的吗？</strong></td></tr><tr><td>依据</td><td>软件规格说明（SRS、设计文档）</td><td>用户需求、业务目标</td></tr><tr><td>发生阶段</td><td>开发过程的每一阶段</td><td>开发后期、交付前</td></tr><tr><td>常用活动</td><td>走查、审查、静态分析</td><td>用户测试、验收测试、Beta 测试</td></tr><tr><td>是否运行程序</td><td>❌ 通常不运行（静态）</td><td>✅ 必须运行（动态）</td></tr><tr><td>参与者</td><td>开发人员、QA、审查组</td><td>用户、客户、验收团队</td></tr><tr><td>示例</td><td>代码审查、设计审查、模型对比</td><td>用户能否成功下单并满意使用</td></tr></tbody></table><hr /><p>🧠 口诀助记法：</p><blockquote><p><strong>验证：对照规格查质量；确认：用户满意最重要。</strong></p></blockquote><hr /><h3 id="三-举例理解考试常见改写题"><a class="markdownIt-Anchor" href="#三-举例理解考试常见改写题"></a> 📦 三、举例理解（考试常见改写题）</h3><h4 id="verification-例子"><a class="markdownIt-Anchor" href="#verification-例子"></a> ✅ Verification 例子：</h4><ul><li>静态检查代码是否符合模块接口规范 → 不跑程序 ✔</li><li>审查设计文档是否符合系统结构要求</li><li>检查是否实现了所有 SRS 中列出的功能点</li></ul><h4 id="validation-例子"><a class="markdownIt-Anchor" href="#validation-例子"></a> ✅ Validation 例子：</h4><ul><li>用户点击结账后是否真的能下单成功</li><li>用户能否在手机上顺利浏览商品</li><li>系统是否“真的解决了他们的业务问题”</li></ul><hr /><h3 id="四-vv-在生命周期中所处阶段"><a class="markdownIt-Anchor" href="#四-vv-在生命周期中所处阶段"></a> 📘 四、V&amp;V 在生命周期中所处阶段</h3><table><thead><tr><th>生命周期阶段</th><th>验证（Verification）</th><th>确认（Validation）</th></tr></thead><tbody><tr><td>需求分析</td><td>审查需求文档是否规范</td><td>用户是否认同需求</td></tr><tr><td>设计</td><td>审查是否符合架构标准</td><td>原型演示是否满足用户预期</td></tr><tr><td>编码</td><td>单元测试是否覆盖函数逻辑</td><td>用户测试是否满意最终结果</td></tr><tr><td>测试</td><td>代码是否符合测试用例设计</td><td>用户是否能实际操作通过流程</td></tr></tbody></table><hr /><p>总结一句话：</p><blockquote><p><strong>Verification 是“做对事情”，Validation 是“做正确的事情”。两者缺一不可。</strong></p></blockquote><h2 id="qp-qa-qc软件质量的三个核心概念"><a class="markdownIt-Anchor" href="#qp-qa-qc软件质量的三个核心概念"></a> ✅ <strong>QP, QA, QC：软件质量的三个核心概念</strong></h2><p>这是课程中非常基础又常考的概念组合，常用于选择题、简答题，尤其是要你：</p><ul><li>区分 QP、QA、QC 的概念</li><li>给出实例</li><li>说明它们在软件开发中的位置和作用</li></ul><hr /><h3 id="一-核心定义中英对照"><a class="markdownIt-Anchor" href="#一-核心定义中英对照"></a> 📘 一、核心定义（中英对照）</h3><table><thead><tr><th>缩写</th><th>全称</th><th>中文含义</th><th>定义（简洁背诵）</th></tr></thead><tbody><tr><td><strong>QP</strong></td><td>Quality Planning</td><td>质量规划</td><td>确定质量目标和标准，并制定实现这些目标的过程和计划</td></tr><tr><td><strong>QA</strong></td><td>Quality Assurance</td><td>质量保证</td><td>建立流程并确保按流程开发，<strong>防止缺陷</strong>发生</td></tr><tr><td><strong>QC</strong></td><td>Quality Control</td><td>质量控制</td><td>通过测试与检查发现并修复<strong>已经存在的缺陷</strong></td></tr></tbody></table><hr /><h3 id="二-万能对比口诀"><a class="markdownIt-Anchor" href="#二-万能对比口诀"></a> 🧠 二、万能对比口诀：</h3><blockquote><p>✅ QP：计划做什么 →<br />✅ QA：确保正确做 →<br />✅ QC：检查有没有错</p></blockquote><hr /><h3 id="三-详细对比考试答题模板"><a class="markdownIt-Anchor" href="#三-详细对比考试答题模板"></a> 🧪 三、详细对比（考试答题模板）</h3><table><thead><tr><th>项目</th><th>QP（质量规划）</th><th>QA（质量保证）</th><th>QC（质量控制）</th></tr></thead><tbody><tr><td>目标</td><td>明确要达到什么样的质量</td><td>建立流程避免错误</td><td>发现并纠正错误</td></tr><tr><td>时间</td><td>项目前期</td><td>项目执行全过程</td><td>项目执行中 &amp; 后期</td></tr><tr><td>方法</td><td>编写质量计划、设定目标</td><td>审查、标准化流程、培训</td><td>测试、评审、缺陷报告</td></tr><tr><td>是否检测缺陷</td><td>❌ 不直接检测</td><td>❌ 不直接检测</td><td>✅ 直接检测并修复缺陷</td></tr><tr><td>示例</td><td>确定要支持哪些平台、多少用户</td><td>建立代码审查流程、SQA 小组</td><td>执行单元测试、系统测试</td></tr></tbody></table><hr /><h3 id="四-每个的英文举例-中文解释用于写作题"><a class="markdownIt-Anchor" href="#四-每个的英文举例-中文解释用于写作题"></a> 📘 四、每个的英文举例 + 中文解释（用于写作题）</h3><h4 id="qp-示例"><a class="markdownIt-Anchor" href="#qp-示例"></a> ✅ QP 示例：</h4><blockquote><p><em>The project manager sets a quality goal: system must support 10,000 users with 99.9% uptime.</em><br />➜ 项目经理制定质量目标：“系统需支持 1 万用户，月可用性达 99.9%。”</p></blockquote><h4 id="qa-示例"><a class="markdownIt-Anchor" href="#qa-示例"></a> ✅ QA 示例：</h4><blockquote><p><em>The team enforces coding standards and conducts regular peer reviews.</em><br />➜ 团队实施代码规范和定期代码走查，确保按流程开发。</p></blockquote><h4 id="qc-示例"><a class="markdownIt-Anchor" href="#qc-示例"></a> ✅ QC 示例：</h4><blockquote><p><em>Testers run regression tests and report 17 critical bugs before release.</em><br />➜ 测试人员回归测试发现 17 个严重缺陷并提交修复。</p></blockquote><hr /><h2 id="总结对照表背诵必备"><a class="markdownIt-Anchor" href="#总结对照表背诵必备"></a> 🎯 总结对照表（背诵必备）</h2><table><thead><tr><th>缩写</th><th>中文名</th><th>动词关键词</th><th>是否防缺陷</th><th>是否查缺陷</th></tr></thead><tbody><tr><td>QP</td><td>质量规划</td><td><strong>计划</strong></td><td>✅ 是</td><td>❌ 否</td></tr><tr><td>QA</td><td>质量保证</td><td><strong>预防</strong></td><td>✅ 是</td><td>❌ 否</td></tr><tr><td>QC</td><td>质量控制</td><td><strong>检测 + 修正</strong></td><td>❌ 否</td><td>✅ 是</td></tr></tbody></table><hr /><p>📌 衍生考试题目有：</p><ul><li><strong>Which phase ensures prevention of defects?</strong> → ✅ QA</li><li><strong>Which activity happens after development to find defects?</strong> → ✅ QC</li><li><strong>Which phase defines the criteria and methods to achieve quality?</strong> → ✅ QP</li></ul><h2 id="software-test-plan软件测试计划"><a class="markdownIt-Anchor" href="#software-test-plan软件测试计划"></a> ✅ <strong>Software Test Plan（软件测试计划）</strong></h2><h3 id="一-定义中英对照-2"><a class="markdownIt-Anchor" href="#一-定义中英对照-2"></a> 📘 一、定义（中英对照）</h3><ul><li><strong>英文</strong>：A Software Test Plan is a detailed document that outlines the test strategy, objectives, schedule, resources, scope, and activities required to verify the quality of a software product.</li><li><strong>中文</strong>：测试计划是一份详细说明<strong>测试目标、策略、范围、资源、进度和活动</strong>的文档，用于确保软件产品符合质量要求。</li></ul><hr /><h3 id="二-标准结构ieee-829-实际模板混合"><a class="markdownIt-Anchor" href="#二-标准结构ieee-829-实际模板混合"></a> 📦 二、标准结构（IEEE 829 &amp; 实际模板混合）</h3><p>以下是测试计划的常见部分（考试必背结构）：</p><table><thead><tr><th>序号</th><th>模块名称</th><th>英文名称</th><th>说明（中英对照）</th></tr></thead><tbody><tr><td>1️⃣</td><td>测试计划标识</td><td>Test Plan Identifier</td><td>文档编号或版本信息</td></tr><tr><td>2️⃣</td><td>引言</td><td>Introduction</td><td>说明测试目标、背景、约束</td></tr><tr><td>3️⃣</td><td>被测项目</td><td>Test Items</td><td>说明测试的系统或模块</td></tr><tr><td>4️⃣</td><td>特性要测试</td><td>Features to be Tested</td><td>将被验证的功能清单</td></tr><tr><td>5️⃣</td><td>特性不测试</td><td>Features Not to be Tested</td><td>明确本次不测的部分（范围外）</td></tr><tr><td>6️⃣</td><td>测试策略</td><td>Test Strategy / Approach</td><td>描述采用的测试类型和方法（黑盒/白盒/自动化等）</td></tr><tr><td>7️⃣</td><td>通过标准</td><td>Pass/Fail Criteria</td><td>测试是否通过的判断标准（如：100% 通过关键路径）</td></tr><tr><td>8️⃣</td><td>退出准则</td><td>Exit Criteria</td><td>测试完成的条件，例如缺陷关闭率 ≥ 95%</td></tr><tr><td>9️⃣</td><td>测试任务</td><td>Test Deliverables</td><td>要提交的测试成果，如测试用例、报告、缺陷日志</td></tr><tr><td>🔟</td><td>时间安排</td><td>Schedule</td><td>每个阶段的开始与结束时间</td></tr><tr><td>1️⃣1️⃣</td><td>人员与角色</td><td>Roles and Responsibilities</td><td>每个测试相关人员的职责</td></tr><tr><td>1️⃣2️⃣</td><td>风险分析</td><td>Risks and Contingencies</td><td>可能的问题及应对方案（如测试人员不足、延迟等）</td></tr></tbody></table><hr /><h3 id="三-考试常考示例题型"><a class="markdownIt-Anchor" href="#三-考试常考示例题型"></a> ✅ 三、考试常考示例题型：</h3><h4 id="q1-list-5-components-of-a-good-test-plan"><a class="markdownIt-Anchor" href="#q1-list-5-components-of-a-good-test-plan"></a> Q1: List 5 components of a good test plan.</h4><p>→ 答：Test Items, Features to be Tested, Test Strategy, Pass Criteria, Schedule</p><h4 id="q2-what-is-the-difference-between-exit-criteria-and-pass-criteria"><a class="markdownIt-Anchor" href="#q2-what-is-the-difference-between-exit-criteria-and-pass-criteria"></a> Q2: What is the difference between Exit Criteria and Pass Criteria?</h4><p>→ <strong>Pass Criteria</strong> 是针对<strong>单个测试用例</strong>是否成功，<br />→ <strong>Exit Criteria</strong> 是针对<strong>整个测试流程是否可以结束</strong>。</p><h4 id="q3-why-is-features-not-to-be-tested-important"><a class="markdownIt-Anchor" href="#q3-why-is-features-not-to-be-tested-important"></a> Q3: Why is “Features Not to be Tested” important?</h4><p>→ 避免误解和扩大测试范围，让团队知道哪些模块不在本次测试目标内。</p><h2 id="static-vs-dynamic-analysis静态分析-vs-动态分析"><a class="markdownIt-Anchor" href="#static-vs-dynamic-analysis静态分析-vs-动态分析"></a> ✅ <strong>Static vs Dynamic Analysis（静态分析 vs 动态分析）</strong></h2><hr /><h3 id="一-核心定义中英文对照"><a class="markdownIt-Anchor" href="#一-核心定义中英文对照"></a> 📘 一、核心定义（中英文对照）</h3><table><thead><tr><th>类型</th><th>英文定义</th><th>中文定义</th></tr></thead><tbody><tr><td><strong>Static Analysis</strong></td><td>Analysis of the software <strong>without executing</strong> it.</td><td><strong>不运行程序</strong>，通过检查代码、文档、模型来发现缺陷的过程。</td></tr><tr><td><strong>Dynamic Analysis</strong></td><td>Analysis of the software by <strong>executing</strong> it.</td><td><strong>运行程序时</strong>观察其行为、性能、输出的过程。</td></tr></tbody></table><hr /><h3 id="二-对比表考试背诵模板"><a class="markdownIt-Anchor" href="#二-对比表考试背诵模板"></a> 🧪 二、对比表（考试背诵模板）</h3><table><thead><tr><th>比较项</th><th>Static Analysis（静态分析）</th><th>Dynamic Analysis（动态分析）</th></tr></thead><tbody><tr><td>是否执行程序</td><td>❌ 不执行代码</td><td>✅ 需要执行代码</td></tr><tr><td>发生阶段</td><td>编码前/编译前</td><td>编译后或部署后</td></tr><tr><td>检查目标</td><td>代码结构、语法、逻辑、标准</td><td>程序运行行为、性能、输出</td></tr><tr><td>方法示例</td><td>代码审查、Lint 工具、模型分析、型检查</td><td>单元测试、系统测试、性能测试</td></tr><tr><td>工具示例</td><td>ESLint, SonarQube, FindBugs</td><td>JUnit, Selenium, JMeter</td></tr><tr><td>发现缺陷类型</td><td>潜在 bug、死代码、不规范命名、未使用变量</td><td>内存泄漏、崩溃、性能瓶颈、边界错误</td></tr><tr><td>是否自动化</td><td>✅ 高度自动化</td><td>✅ 多数也可自动化</td></tr><tr><td>优势</td><td>早发现问题，节省测试成本</td><td>真实模拟运行情况，更接近用户体验</td></tr><tr><td>局限</td><td>无法检测运行时错误</td><td>无法在早期发现逻辑错误或结构问题</td></tr></tbody></table><hr /><h3 id="三-例题训练判断题-选择题常考"><a class="markdownIt-Anchor" href="#三-例题训练判断题-选择题常考"></a> 🎯 三、例题训练（判断题 / 选择题常考）</h3><blockquote><p>❓ <strong>Which of the following is a static analysis activity?</strong><br />✅ A: Code walkthrough<br />❌ B: Load testing<br />❌ C: Acceptance testing<br />✅ D: Linting source code</p></blockquote><hr /><h3 id="记忆口诀"><a class="markdownIt-Anchor" href="#记忆口诀"></a> 🧠 记忆口诀</h3><blockquote><p><strong>“静态不跑代码，动态观察行为”</strong><br />Static 看“形”，Dynamic 看“跑”</p></blockquote><hr /><h3 id="四-各自的典型工具补充记忆"><a class="markdownIt-Anchor" href="#四-各自的典型工具补充记忆"></a> 🧪 四、各自的典型工具（补充记忆）</h3><table><thead><tr><th>类型</th><th>工具举例</th><th>说明</th></tr></thead><tbody><tr><td>🧊 静态分析</td><td>SonarQube, ESLint, StyleCop, Checkstyle</td><td>检查语法、规范、未使用变量</td></tr><tr><td>🔥 动态分析</td><td>JUnit, PyTest, Selenium, JMeter, Valgrind</td><td>执行测试、检查内存、测试性能</td></tr></tbody></table><hr /><p>📌 你还可以用这个思路套用答题句式：</p><blockquote><p><em>Static analysis is important because it helps detect issues early in development without running the software. In contrast, dynamic analysis reveals issues that only occur during runtime, such as memory leaks or crashes.</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>装机</title>
      <link href="/fdfaa895.html"/>
      <url>/fdfaa895.html</url>
      
        <content type="html"><![CDATA[<h2 id="镜像"><a class="markdownIt-Anchor" href="#镜像"></a> 镜像</h2><h3 id="系统镜像"><a class="markdownIt-Anchor" href="#系统镜像"></a> 系统镜像</h3><p>原版镜像下载: <a href="https://next.itellyou.cn/Original/">msdn</a></p><h3 id="pe-镜像"><a class="markdownIt-Anchor" href="#pe-镜像"></a> PE 镜像</h3><p>PE 镜像下载: <a href="https://www.wepe.com.cn/">wepe</a></p><h2 id="驱动"><a class="markdownIt-Anchor" href="#驱动"></a> 驱动</h2><h3 id="华硕"><a class="markdownIt-Anchor" href="#华硕"></a> 华硕</h3><p>2021 ROG Strix G15 : <a href="https://rog.asus.com.cn/laptops/rog-strix/2021-rog-strix-g15-series/helpdesk_download/">ROG</a></p><h3 id="amd"><a class="markdownIt-Anchor" href="#amd"></a> AMD</h3><p>AMD 驱动下载 : <a href="https://www.amd.com/en/support/downloads/drivers.html/processors/ryzen/ryzen-5000-series/amd-ryzen-9-5900hx.html">AMD</a></p><h3 id="nvidia"><a class="markdownIt-Anchor" href="#nvidia"></a> NVIDIA</h3><p>NVIDIA 驱动下载 560.94 版本: <a href="https://www.nvidia.cn/geforce/drivers/results/230856/">NVIDIA</a></p><h2 id="软件清单"><a class="markdownIt-Anchor" href="#软件清单"></a> 软件清单</h2><h3 id="优先"><a class="markdownIt-Anchor" href="#优先"></a> 优先</h3><ul><li><a href="https://im.qq.com/pcqq/index.shtml">QQ</a></li><li><a href="https://pc.weixin.qq.com/">微信</a></li><li><a href="https://www.google.cn/chrome/">Chrome</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Devops⑨</title>
      <link href="/110fcb16.html"/>
      <url>/110fcb16.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-9-节完结篇-devops-项目实践案例回顾与学习路径推荐"><a class="markdownIt-Anchor" href="#第-9-节完结篇-devops-项目实践案例回顾与学习路径推荐"></a> 第 9 节（完结篇）· DevOps 项目实践案例回顾与学习路径推荐</h1><h2 id="devops-学习全流程回顾"><a class="markdownIt-Anchor" href="#devops-学习全流程回顾"></a> 🧱 DevOps 学习全流程回顾</h2><blockquote><p>从理念到落地，从容器到云端，我们构建了一条完整的 DevOps 知识链。</p></blockquote><table><thead><tr><th>模块</th><th>关键词</th><th>实战内容</th></tr></thead><tbody><tr><td>🌱 DevOps 基础</td><td>自动化、协作、CI/CD</td><td>DevOps 定义、核心价值与典型工作流</td></tr><tr><td>🐳 容器化技术</td><td>Docker</td><td>Dockerfile 构建、镜像运行、常用命令</td></tr><tr><td>🔁 CI/CD 流水线</td><td>GitHub Actions / Jenkins</td><td>自动测试、构建、部署 FastAPI 示例</td></tr><tr><td>☸️ 容器编排</td><td>Kubernetes / Serverless</td><td>Pod、Service、Lambda、冷启动机制</td></tr><tr><td>🧾 基础设施代码化</td><td>Terraform / IaC</td><td>一键创建 EC2、VPC、S3、SecurityGroup</td></tr><tr><td>🧰 配置与镜像</td><td>Ansible + Packer</td><td>自动化软件安装、构建自定义 AMI 镜像</td></tr><tr><td>📡 监控与可观测性</td><td>Prometheus / Grafana / CloudWatch</td><td>部署监控系统、日志分析、链路追踪</td></tr><tr><td>☁️ 云平台部署</td><td>AWS</td><td>全流程 DevOps 一体化落地案例</td></tr></tbody></table><hr /><h2 id="实践案例回顾fastapi-全流程"><a class="markdownIt-Anchor" href="#实践案例回顾fastapi-全流程"></a> 🔍 实践案例回顾（FastAPI 全流程）</h2><ol><li>使用 Docker 将 FastAPI 应用容器化</li><li>编写 GitHub Actions 进行 CI 流水线（测试 + 构建）</li><li>使用 Terraform 创建 AWS EC2 + 安全组 + S3</li><li>用 Ansible 配置服务器环境（Python、Uvicorn）</li><li>可选：用 Packer 打包为预装环境的 AMI</li><li>应用上线后接入 CloudWatch + Grafana 监控</li></ol><hr /><h2 id="后续学习路径推荐"><a class="markdownIt-Anchor" href="#后续学习路径推荐"></a> 🎯 后续学习路径推荐</h2><table><thead><tr><th>方向</th><th>学习建议</th></tr></thead><tbody><tr><td>🔐 安全性</td><td>学习 IAM 权限设计、加密、KMS、漏洞扫描（Trivy）</td></tr><tr><td>📦 GitOps</td><td>掌握 ArgoCD / Flux，用 Git 管理部署状态</td></tr><tr><td>☁️ 多云/混合云</td><td>对比 Azure DevOps / GCP Cloud Build</td></tr><tr><td>🧠 AIOps</td><td>用 AI 辅助监控告警与自动修复（如 Datadog + GPT）</td></tr><tr><td>📚 认证路线</td><td>AWS DevOps Engineer / CKA / Terraform Associate</td></tr></tbody></table><hr /><h2 id="️-devops-是一条持续改进之路"><a class="markdownIt-Anchor" href="#️-devops-是一条持续改进之路"></a> ❤️ DevOps 是一条持续改进之路</h2><ul><li>它不只是技术，而是一种「团队协作 + 自动化 + 快速反馈」的文化</li><li>工具会变，理念不变：<strong>小步快跑、可观测、自动化、安全感</strong></li><li>每一次改进流程，都是在让软件交付更高效、系统运行更稳定</li></ul><hr /><blockquote><p>感谢你坚持完成了这份 DevOps 学习笔记，希望这条路越走越稳，越跑越快 🚀</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops⑧</title>
      <link href="/81b0d687.html"/>
      <url>/81b0d687.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-8-节-云平台实战-aws-上构建-devops-一体化工作流"><a class="markdownIt-Anchor" href="#第-8-节-云平台实战-aws-上构建-devops-一体化工作流"></a> 第 8 节 · 云平台实战 —— AWS 上构建 DevOps 一体化工作流</h1><h2 id="️-为什么选择-aws"><a class="markdownIt-Anchor" href="#️-为什么选择-aws"></a> ☁️ 为什么选择 AWS？</h2><p>AWS 是目前全球最主流的云平台，提供丰富的 DevOps 支持服务：</p><ul><li>✅ 支持 IaC（Terraform / CloudFormation）</li><li>✅ 支持 Serverless（Lambda、API Gateway）</li><li>✅ CI/CD（CodePipeline、CodeBuild、GitHub Actions 集成）</li><li>✅ 监控（CloudWatch、X-Ray）</li></ul><hr /><h2 id="devops-全流程在-aws-上的实现路径"><a class="markdownIt-Anchor" href="#devops-全流程在-aws-上的实现路径"></a> 🧭 DevOps 全流程在 AWS 上的实现路径</h2><p><img src="../attach/Pasted%20image%2020250414134947.png" alt="" /></p><hr /><h2 id="常见-aws-服务一览devops-视角"><a class="markdownIt-Anchor" href="#常见-aws-服务一览devops-视角"></a> 🔧 常见 AWS 服务一览（DevOps 视角）</h2><table><thead><tr><th>分类</th><th>服务</th><th>用途</th></tr></thead><tbody><tr><td>计算</td><td>EC2 / Lambda / ECS / EKS</td><td>承载服务或函数</td></tr><tr><td>存储</td><td>S3 / EFS</td><td>文件或静态资源存储</td></tr><tr><td>网络</td><td>VPC / Subnet / Load Balancer</td><td>网络隔离与负载均衡</td></tr><tr><td>DevOps 工具</td><td>CodePipeline / CodeBuild</td><td>自动化构建与部署</td></tr><tr><td>镜像仓库</td><td>ECR</td><td>存储 Docker 镜像</td></tr><tr><td>安全</td><td>IAM / KMS / Secrets Manager</td><td>权限管理与机密保护</td></tr><tr><td>监控</td><td>CloudWatch / X-Ray</td><td>日志 + 指标 + 链路追踪</td></tr></tbody></table><hr /><h2 id="案例用-github-actions-terraform-ec2-部署-fastapi"><a class="markdownIt-Anchor" href="#案例用-github-actions-terraform-ec2-部署-fastapi"></a> 🛠 案例：用 GitHub Actions + Terraform + EC2 部署 FastAPI</h2><ol><li><strong>准备 IAM 用户和 Access Key</strong>，供 GitHub Actions 使用</li><li>编写 <code>.tf</code> 脚本定义 VPC + EC2 + 安全组</li><li>在 GitHub Actions 中写 pipeline：</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">hashicorp/setup-terraform@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">terraform_version:</span> <span class="number">1.5</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Terraform</span> <span class="string">Init</span> <span class="string">&amp;</span> <span class="string">Apply</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">AWS_ACCESS_KEY_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">AWS_SECRET_ACCESS_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AWS_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          terraform init</span></span><br><span class="line"><span class="string">          terraform apply -auto-approve</span></span><br></pre></td></tr></table></figure><hr /><h2 id="部署后的可观测性接入"><a class="markdownIt-Anchor" href="#部署后的可观测性接入"></a> 📈 部署后的可观测性接入</h2><ul><li>开启 EC2 的 CloudWatch Agent，收集 CPU、内存、磁盘指标</li><li>日志写入 CloudWatch Logs，支持搜索 / 告警</li><li>Lambda 可以自动接入 X-Ray 做链路分析</li><li>设置 Alarm，超过阈值通知到 SNS / 邮件 / Slack</li></ul><hr /><h2 id="小结打造-aws-devops-流水线的核心步骤"><a class="markdownIt-Anchor" href="#小结打造-aws-devops-流水线的核心步骤"></a> ✅ 小结：打造 AWS DevOps 流水线的核心步骤</h2><ol><li><strong>CI 构建阶段</strong>：测试 + 打包 + 上传镜像（ECR）</li><li><strong>CD 部署阶段</strong>：用 Terraform 自动部署（ECS / EC2）</li><li><strong>监控与告警</strong>：CloudWatch 指标、日志、X-Ray 链路追踪</li><li><strong>权限控制</strong>：IAM 最小权限原则（Least Privilege）</li></ol><hr /><p>下一节预告 👉 <strong>第 9 节（完结篇）：DevOps 项目实践案例回顾与学习路径推荐</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops⑦</title>
      <link href="/f6b7e611.html"/>
      <url>/f6b7e611.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-7-节-monitoring-observability-监控与可观测性实战指南"><a class="markdownIt-Anchor" href="#第-7-节-monitoring-observability-监控与可观测性实战指南"></a> 第 7 节 · Monitoring &amp; Observability —— 监控与可观测性实战指南</h1><h2 id="为什么监控与可观测性重要"><a class="markdownIt-Anchor" href="#为什么监控与可观测性重要"></a> 📊 为什么监控与可观测性重要？</h2><blockquote><p>“系统跑起来不是终点，稳定运行才是。”</p></blockquote><p>在 DevOps 实践中，<strong>监控（Monitoring）</strong> 和 <strong>可观测性（Observability）</strong> 让你能：</p><ul><li>🧠 快速发现系统异常</li><li>🔍 快速定位问题根源</li><li>📈 持续优化性能体验</li></ul><hr /><h2 id="监控monitoring-vs-可观测性observability"><a class="markdownIt-Anchor" href="#监控monitoring-vs-可观测性observability"></a> 🧠 监控（Monitoring） VS 可观测性（Observability）</h2><table><thead><tr><th>项目</th><th>Monitoring</th><th>Observability</th></tr></thead><tbody><tr><td>定义</td><td>观察系统是否健康</td><td>解释系统为什么出问题</td></tr><tr><td>数据类型</td><td>主要是指标（Metrics）</td><td>包括指标、日志、追踪（三大支柱）</td></tr><tr><td>触发方式</td><td>基于规则报警</td><td>支持探索式分析</td></tr><tr><td>目标</td><td>提前报警</td><td>快速定位问题源头</td></tr></tbody></table><hr /><h2 id="可观测性的三大支柱"><a class="markdownIt-Anchor" href="#可观测性的三大支柱"></a> 🔍 可观测性的三大支柱</h2><ol><li><p><strong>Metrics（指标）</strong> 📈</p><ul><li>如 CPU、内存、请求延迟、错误率</li></ul></li><li><p><strong>Logs（日志）</strong> 📄</p><ul><li>系统或应用输出的详细事件记录</li></ul></li><li><p><strong>Traces（追踪）</strong> 🔗</p><ul><li>分布式请求的全链路追踪（哪一环节慢）</li></ul></li></ol><hr /><h2 id="常见工具生态"><a class="markdownIt-Anchor" href="#常见工具生态"></a> 🛠 常见工具生态</h2><table><thead><tr><th>类型</th><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>指标监控</td><td>Prometheus</td><td>时间序列数据库，自动抓取指标</td></tr><tr><td>数据可视化</td><td>Grafana</td><td>美观灵活的监控仪表盘</td></tr><tr><td>日志收集</td><td>Loki / ELK</td><td>日志聚合分析（轻量 vs 重型）</td></tr><tr><td>链路追踪</td><td>Jaeger / OpenTelemetry</td><td>全链路追踪分布式请求</td></tr><tr><td>云服务集成</td><td>AWS CloudWatch / X-Ray</td><td>原生支持 AWS 服务的监控与追踪</td></tr></tbody></table><hr /><h2 id="实践部署-prometheus-grafana-node-exporter"><a class="markdownIt-Anchor" href="#实践部署-prometheus-grafana-node-exporter"></a> 🧪 实践：部署 Prometheus + Grafana + Node Exporter</h2><p>📦 Node Exporter：收集本机系统指标</p><p>📦 Prometheus：抓取并保存指标数据</p><p>📦 Grafana：展示数据仪表盘</p><p>Docker Compose 示例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">node-exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9100:9100&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br></pre></td></tr></table></figure><hr /><h2 id="prometheusyml-配置示例"><a class="markdownIt-Anchor" href="#prometheusyml-配置示例"></a> 📦 prometheus.yml 配置示例</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node&quot;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;node-exporter:9100&quot;</span>]</span><br></pre></td></tr></table></figure><hr /><h2 id="devops-场景下的可观测性策略"><a class="markdownIt-Anchor" href="#devops-场景下的可观测性策略"></a> 💬 DevOps 场景下的可观测性策略</h2><ul><li>🧵 为每个服务设计合理指标（如响应时间、QPS、错误率）</li><li>🪵 统一日志格式，配合 Loki / ELK 汇总分析</li><li>🔗 引入 OpenTelemetry 实现前后端请求链追踪</li><li>🚨 配置告警阈值 + 多通道通知（如钉钉、Slack、邮件）</li></ul><hr /><p>下一节预告 👉 <strong>第 8 节：云平台实战 —— AWS 上构建 DevOps 一体化工作流</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops⑥</title>
      <link href="/6fbeb7ab.html"/>
      <url>/6fbeb7ab.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-6-节-ansible-与-packer-配置管理与镜像构建实战"><a class="markdownIt-Anchor" href="#第-6-节-ansible-与-packer-配置管理与镜像构建实战"></a> 第 6 节 · Ansible 与 Packer —— 配置管理与镜像构建实战</h1><h2 id="什么是配置管理configuration-management"><a class="markdownIt-Anchor" href="#什么是配置管理configuration-management"></a> 🧠 什么是配置管理（Configuration Management）？</h2><blockquote><p>配置管理是指通过代码或脚本来管理服务器的状态，比如软件安装、服务启动、配置文件变更等。</p></blockquote><p>目标是：</p><ul><li>自动化系统配置</li><li>多台机器保持一致状态</li><li>替代 SSH 手动操作</li></ul><hr /><h2 id="ansible-是什么"><a class="markdownIt-Anchor" href="#ansible-是什么"></a> 🧰 Ansible 是什么？</h2><p><strong>Ansible</strong> 是一款开源自动化运维工具，专注于“配置管理 + 应用部署 + 自动化运维”。</p><p>特点：</p><ul><li>✅ 无 Agent：只需目标机开启 SSH 即可</li><li>✅ YAML 配置，易读易写</li><li>✅ 可批量控制多台主机</li></ul><hr /><h2 id="ansible-示例安装-nginx"><a class="markdownIt-Anchor" href="#ansible-示例安装-nginx"></a> 📄 Ansible 示例：安装 nginx</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新</span> <span class="string">apt</span> <span class="string">缓存</span></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><p>运行方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook install-nginx.yml -i hosts</span><br></pre></td></tr></table></figure><hr /><h2 id="ansible-的关键组成"><a class="markdownIt-Anchor" href="#ansible-的关键组成"></a> 🧱 Ansible 的关键组成</h2><table><thead><tr><th>元素</th><th>说明</th></tr></thead><tbody><tr><td>Inventory</td><td>目标主机清单（IP、分组）</td></tr><tr><td>Playbook</td><td>自动化任务列表（YAML 文件）</td></tr><tr><td>Roles</td><td>可复用任务模块（适合大型项目）</td></tr><tr><td>Modules</td><td>内置功能单元（如 apt、copy、service）</td></tr></tbody></table><hr /><h2 id="packer-是什么"><a class="markdownIt-Anchor" href="#packer-是什么"></a> 📦 Packer 是什么？</h2><p><strong>Packer</strong> 是 HashiCorp 出品的镜像构建工具。</p><blockquote><p>可以用它提前“装好系统 + 环境 + 应用”，生成标准镜像（AMI / Docker image / ISO）</p></blockquote><p>特点：</p><ul><li>支持多平台（AWS、Docker、VMware）</li><li>可与 Ansible 配合构建镜像</li><li>实现“即开即用”的部署方式</li></ul><hr /><h2 id="示例用-packer-ansible-构建-aws-ami"><a class="markdownIt-Anchor" href="#示例用-packer-ansible-构建-aws-ami"></a> 🔧 示例：用 Packer + Ansible 构建 AWS AMI</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amazon-ebs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;region&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ap-southeast-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;source_ami&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ami-0abc123456789xyz&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t2.micro&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ssh_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ami_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;packer-ansible-example&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provisioners&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ansible&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;playbook_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;install-nginx.yml&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>命令运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer build template.json</span><br></pre></td></tr></table></figure><hr /><h2 id="packer-vs-terraform-vs-ansible"><a class="markdownIt-Anchor" href="#packer-vs-terraform-vs-ansible"></a> 🔄 Packer vs Terraform vs Ansible</h2><table><thead><tr><th>工具</th><th>职责</th></tr></thead><tbody><tr><td>Terraform</td><td>构建云资源（服务器、网络）</td></tr><tr><td>Packer</td><td>制作系统镜像（AMI、Docker）</td></tr><tr><td>Ansible</td><td>配置系统状态（安装软件、修改配置）</td></tr></tbody></table><hr /><h2 id="devops-场景中的组合用法"><a class="markdownIt-Anchor" href="#devops-场景中的组合用法"></a> 🎯 DevOps 场景中的组合用法</h2><p><img src="../attach/Pasted%20image%2020250414134924.png" alt="" /></p><hr /><p>下一节预告 👉 <strong>第 7 节：Monitoring &amp; Observability —— 监控与可观测性实战指南</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops⑤</title>
      <link href="/18b9873d.html"/>
      <url>/18b9873d.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-5-节-基础设施即代码iac与-terraform-入门"><a class="markdownIt-Anchor" href="#第-5-节-基础设施即代码iac与-terraform-入门"></a> 第 5 节 · 基础设施即代码（IaC）与 Terraform 入门</h1><h2 id="什么是基础设施即代码infrastructure-as-code-iac"><a class="markdownIt-Anchor" href="#什么是基础设施即代码infrastructure-as-code-iac"></a> 💡 什么是基础设施即代码（Infrastructure as Code, IaC）？</h2><blockquote><p><strong>IaC = 用代码来定义和管理服务器、数据库、网络等基础设施。</strong></p></blockquote><p>它的目标是：</p><ul><li>✅ 自动化部署基础架构（不用手点控制台）</li><li>✅ 保持环境一致性（dev/test/prod 都一样）</li><li>✅ 支持版本控制、回滚（像代码一样被管理）</li></ul><hr /><h2 id="terraform-是什么"><a class="markdownIt-Anchor" href="#terraform-是什么"></a> 🧰 Terraform 是什么？</h2><p><strong>Terraform</strong> 是 HashiCorp 出品的开源工具，是目前最主流的 IaC 实现方式。</p><p>特点：</p><ul><li>🌍 多云平台支持（AWS、Azure、GCP、K8s…）</li><li>🧱 声明式语法（你说“要什么”，它决定“怎么做”）</li><li>💾 状态文件（State）记录当前资源状况</li></ul><hr /><h2 id="terraform-核心概念"><a class="markdownIt-Anchor" href="#terraform-核心概念"></a> 📦 Terraform 核心概念</h2><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>Provider</td><td>云服务提供商（如 AWS）</td></tr><tr><td>Resource</td><td>要创建的资源（如 EC2、S3）</td></tr><tr><td>Module</td><td>可复用的资源配置模板</td></tr><tr><td>Variable</td><td>外部输入变量，提升灵活性</td></tr><tr><td>State File</td><td>当前资源的实际状态记录</td></tr></tbody></table><hr /><h2 id="示例创建一个-aws-ec2-实例"><a class="markdownIt-Anchor" href="#示例创建一个-aws-ec2-实例"></a> 🧪 示例：创建一个 AWS EC2 实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  region = &quot;ap-southeast-2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;my_ec2&quot; &#123;</span><br><span class="line">  ami           = &quot;ami-0abc123456789xyz&quot;</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;devops-demo&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行步骤：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform init      <span class="comment"># 初始化项目（安装 provider）</span></span><br><span class="line">terraform plan      <span class="comment"># 预览资源更改计划</span></span><br><span class="line">terraform apply     <span class="comment"># 应用资源变更，创建 EC2 实例</span></span><br></pre></td></tr></table></figure><hr /><h2 id="️-terraform-工作机制简介"><a class="markdownIt-Anchor" href="#️-terraform-工作机制简介"></a> ⚠️ Terraform 工作机制简介</h2><p><img src="../attach/Pasted%20image%2020250414134915.png" alt="" /></p><hr /><h2 id="terraform-的优势"><a class="markdownIt-Anchor" href="#terraform-的优势"></a> ✅ Terraform 的优势</h2><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>自动化</td><td>一键部署复杂云资源结构</td></tr><tr><td>可重复</td><td>可以复用在不同环境（dev/test/prod）</td></tr><tr><td>可回滚</td><td>配合 Git，支持历史版本回退</td></tr><tr><td>可扩展</td><td>支持写 Module，封装常用架构逻辑</td></tr></tbody></table><hr /><h2 id="与-devops-的结合点"><a class="markdownIt-Anchor" href="#与-devops-的结合点"></a> 🔐 与 DevOps 的结合点</h2><ul><li><strong>CI/CD 阶段</strong>：部署流程中使用 <code>terraform apply</code> 自动化基础设施搭建</li><li><strong>GitOps 实践</strong>：用 Git 管理 IaC 配置文件，配合 PR 审核</li><li><strong>安全合规</strong>：配合 <code>terraform validate</code>、<code>tflint</code> 做语法检查与规范验证</li></ul><hr /><p>下一节预告 👉 <strong>第 6 节：Ansible 与 Packer —— 配置管理与镜像构建实战</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops④</title>
      <link href="/86dd129e.html"/>
      <url>/86dd129e.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-4-节-使用-kubernetes-管理容器应用含-serverless-简介"><a class="markdownIt-Anchor" href="#第-4-节-使用-kubernetes-管理容器应用含-serverless-简介"></a> 第 4 节 · 使用 Kubernetes 管理容器应用（含 Serverless 简介）</h1><h2 id="️-什么是-kubernetesk8s"><a class="markdownIt-Anchor" href="#️-什么是-kubernetesk8s"></a> ☸️ 什么是 Kubernetes（K8s）？</h2><p><strong>Kubernetes</strong> 是一个开源的容器编排平台，用于自动化容器应用的部署、扩容、负载均衡和管理。</p><blockquote><p>它就像“容器集群的大脑”，可以帮你在成百上千台服务器之间调度容器。</p></blockquote><hr /><h2 id="为什么需要-k8s"><a class="markdownIt-Anchor" href="#为什么需要-k8s"></a> 🧠 为什么需要 K8s？</h2><table><thead><tr><th>场景问题</th><th>Kubernetes 能解决什么</th></tr></thead><tbody><tr><td>容器多、管理难</td><td>自动调度和管理容器运行状态</td></tr><tr><td>服务不可用</td><td>Pod 异常自动重启、自动迁移</td></tr><tr><td>流量暴增</td><td>自动扩容 Replica 数量</td></tr><tr><td>更新上线容易中断</td><td>滚动更新 + 回滚机制</td></tr></tbody></table><hr /><h2 id="kubernetes-核心概念"><a class="markdownIt-Anchor" href="#kubernetes-核心概念"></a> 🛠 Kubernetes 核心概念</h2><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>Pod</td><td>最小的调度单元，包含一个或多个容器</td></tr><tr><td>Node</td><td>集群中的一台主机，可以运行 Pod</td></tr><tr><td>Deployment</td><td>控制 Pod 数量和滚动更新策略</td></tr><tr><td>Service</td><td>提供统一访问入口，实现负载均衡</td></tr><tr><td>Namespace</td><td>用于资源隔离（如 dev/test/prod）</td></tr></tbody></table><hr /><h2 id="应用部署流程示意图"><a class="markdownIt-Anchor" href="#应用部署流程示意图"></a> 🚀 应用部署流程示意图</h2><p><img src="../attach/Pasted%20image%2020250414134901.png" alt="" /></p><hr /><h2 id="k8s-yaml-示例部署-fastapi-应用"><a class="markdownIt-Anchor" href="#k8s-yaml-示例部署-fastapi-应用"></a> 📦 K8s YAML 示例：部署 FastAPI 应用</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fastapi-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">fastapi</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">fastapi</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fastapi</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">my-fastapi-app:latest</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><hr /><h2 id="serverless-简介"><a class="markdownIt-Anchor" href="#serverless-简介"></a> 🌩 Serverless 简介</h2><p><strong>Serverless ≠ 没有服务器</strong>，而是你<strong>不用管服务器</strong>。</p><p>Serverless 强调：</p><ul><li>💥 有请求才启动函数，资源“用完即消”</li><li>💰 按请求次数和执行时间计费，更省钱</li><li>⚡️ 部署极简，不需要配置服务器环境</li></ul><hr /><h2 id="k8s-vs-serverless-对比"><a class="markdownIt-Anchor" href="#k8s-vs-serverless-对比"></a> 🆚 K8s vs Serverless 对比</h2><table><thead><tr><th>特性</th><th>Kubernetes</th><th>Serverless（如 AWS Lambda）</th></tr></thead><tbody><tr><td>控制能力</td><td>高，可自定义网络、持久化等</td><td>低，被平台托管</td></tr><tr><td>启动速度</td><td>秒级</td><td>毫秒级（冷启动）</td></tr><tr><td>成本控制</td><td>有固定资源成本</td><td>按调用量计费，闲时不花钱</td></tr><tr><td>适合场景</td><td>中大型系统、微服务平台</td><td>轻量函数、API、小服务</td></tr></tbody></table><hr /><h2 id="混合架构实践"><a class="markdownIt-Anchor" href="#混合架构实践"></a> 💡 混合架构实践</h2><p>在实际项目中，K8s 和 Serverless 往往可以混用：</p><ul><li>使用 K8s 托管主要服务（高可用、可扩展）</li><li>使用 Serverless 做图像处理、定时任务、事件处理等边缘功能</li></ul><hr /><p>下一节预告 👉 <strong>第 5 节：基础设施即代码（IaC）与 Terraform 入门</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops③</title>
      <link href="/f1da2208.html"/>
      <url>/f1da2208.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-3-节-cicd-实践指南"><a class="markdownIt-Anchor" href="#第-3-节-cicd-实践指南"></a> 第 3 节 · CI/CD 实践指南</h1><h2 id="什么是-cicd"><a class="markdownIt-Anchor" href="#什么是-cicd"></a> 🚀 什么是 CI/CD？</h2><p><strong>CI/CD</strong> 指的是：</p><ul><li><strong>CI（Continuous Integration）持续集成</strong>：每次代码变更后，自动化执行构建、测试等流程，确保新代码能和主干稳定集成。</li><li><strong>CD（Continuous Delivery / Deployment）持续交付 / 持续部署</strong>：代码通过测试后，自动部署到测试或生产环境。</li></ul><hr /><h2 id="cicd-为什么重要"><a class="markdownIt-Anchor" href="#cicd-为什么重要"></a> 🧠 CI/CD 为什么重要？</h2><p>传统流程里：</p><ul><li>上线靠手动部署，容易出错</li><li>测试靠人工点击，流程慢又不稳定</li><li>一个 bug 可能要几小时甚至几天才能回滚</li></ul><p>CI/CD 带来的改变：</p><table><thead><tr><th>目标</th><th>CI/CD 带来的好处</th></tr></thead><tbody><tr><td>快速上线</td><td>自动构建 + 自动测试 + 自动部署</td></tr><tr><td>降低风险</td><td>小步快跑 + 每次变更可回退</td></tr><tr><td>团队协作</td><td>每人提交后就能自动验证是否会出问题</td></tr></tbody></table><hr /><h2 id="️-持续集成ci流程"><a class="markdownIt-Anchor" href="#️-持续集成ci流程"></a> ⚙️ 持续集成（CI）流程</h2><p>常见步骤如下：</p><ol><li><p>开发者 push 代码到 Git 仓库</p></li><li><p>CI 工具监听到变更（如 GitHub Actions）</p></li><li><p>自动执行：</p><ul><li>安装依赖</li><li>静态检查（lint / type check）</li><li>单元测试 / 集成测试</li><li>构建产物（Docker 镜像 / 静态文件）</li></ul></li></ol><hr /><h2 id="持续交付-部署cd流程"><a class="markdownIt-Anchor" href="#持续交付-部署cd流程"></a> 🚚 持续交付 / 部署（CD）流程</h2><p>CD 的目标是“代码提交后可以快速、安全地上线”</p><h3 id="两种含义"><a class="markdownIt-Anchor" href="#两种含义"></a> 两种含义：</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>持续交付（Delivery）</td><td>自动部署到<strong>测试 / staging 环境</strong>，上线还需人工批准</td></tr><tr><td>持续部署（Deployment）</td><td>自动部署到<strong>生产环境</strong>，无需人工干预</td></tr></tbody></table><hr /><h2 id="常用-cicd-工具链"><a class="markdownIt-Anchor" href="#常用-cicd-工具链"></a> 🔧 常用 CI/CD 工具链</h2><table><thead><tr><th>工具</th><th>特点</th></tr></thead><tbody><tr><td><strong>GitHub Actions</strong></td><td>GitHub 原生集成，免费额度高，YAML 配置简洁</td></tr><tr><td><strong>GitLab CI</strong></td><td>与 GitLab 紧密集成，自带 runner 支持 Docker</td></tr><tr><td><strong>Jenkins</strong></td><td>老牌工具，自由度高但维护复杂，需要搭建服务器</td></tr><tr><td><strong>CircleCI / TravisCI</strong></td><td>云服务型，配置简单，适合开源项目</td></tr></tbody></table><hr /><h2 id="github-actions-示例fastapi-项目-cicd"><a class="markdownIt-Anchor" href="#github-actions-示例fastapi-项目-cicd"></a> 📝 GitHub Actions 示例：FastAPI 项目 CI/CD</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span> <span class="string">Pipeline</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拉取代码</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&quot;3.10&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          pip install -r requirements.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">运行测试</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          pytest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建</span> <span class="string">Docker</span> <span class="string">镜像</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">myapp:latest</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><hr /><h2 id="cicd-与-docker-k8s-vercel-的结合"><a class="markdownIt-Anchor" href="#cicd-与-docker-k8s-vercel-的结合"></a> 🔗 CI/CD 与 Docker、K8s、Vercel 的结合</h2><table><thead><tr><th>技术</th><th>集成方式</th></tr></thead><tbody><tr><td>Docker</td><td>在 CI 阶段构建镜像，推送到镜像仓库（如 Docker Hub）</td></tr><tr><td>Kubernetes</td><td>CD 阶段更新 K8s 部署（kubectl apply / helm upgrade）</td></tr><tr><td>Vercel</td><td>直接通过 GitHub push 自动触发部署（支持前后端）</td></tr></tbody></table><hr /><p>下一节预告 👉 <strong>第 4 节：基础设施即代码（IaC）与 Terraform 入门</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops②</title>
      <link href="/68d373b2.html"/>
      <url>/68d373b2.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-2-节-容器化与-docker-入门"><a class="markdownIt-Anchor" href="#第-2-节-容器化与-docker-入门"></a> 第 2 节 · 容器化与 Docker 入门</h1><h2 id="什么是容器化containerization"><a class="markdownIt-Anchor" href="#什么是容器化containerization"></a> 📦 什么是容器化（Containerization）？</h2><p>容器化是一种将应用程序与它的运行时环境（依赖、配置、库）<strong>打包在一起运行</strong>的方式。</p><blockquote><p>就像“打包快餐”：不管你在哪儿吃，都一样的味道 🍱</p></blockquote><p>容器技术让“开发环境”和“生产环境”一致，解决了：</p><blockquote><p><strong>“我电脑上能跑，线上挂了”</strong> 这类经典问题。</p></blockquote><hr /><h2 id="docker-是什么"><a class="markdownIt-Anchor" href="#docker-是什么"></a> 🐳 Docker 是什么？</h2><p><strong>Docker</strong> 是最流行的容器化平台，它能让你：</p><ul><li>构建：通过 Dockerfile 构建镜像</li><li>打包：将应用与依赖一起封装成镜像</li><li>运行：用镜像快速启动多个隔离的容器</li><li>分发：上传镜像到 Docker Hub 分享使用</li></ul><hr /><h2 id="docker-工作流程"><a class="markdownIt-Anchor" href="#docker-工作流程"></a> 🚀 Docker 工作流程</h2><p><img src="../attach/Pasted%20image%2020250414134850.png" alt="" /></p><hr /><h2 id="dockerfile-示例"><a class="markdownIt-Anchor" href="#dockerfile-示例"></a> 🧱 Dockerfile 示例</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用官方 Python 镜像作为基础</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制代码到容器</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 FastAPI 服务（使用 uvicorn）</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;uvicorn&quot;</span>, <span class="string">&quot;main:app&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><hr /><h2 id="常见命令速查表"><a class="markdownIt-Anchor" href="#常见命令速查表"></a> 🧪 常见命令速查表</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>docker build -t myapp .</code></td><td>从 Dockerfile 构建镜像</td></tr><tr><td><code>docker images</code></td><td>查看所有镜像</td></tr><tr><td><code>docker run -d -p 8000:8000 myapp</code></td><td>后台运行容器，映射端口</td></tr><tr><td><code>docker ps</code></td><td>查看正在运行的容器</td></tr><tr><td><code>docker exec -it 容器ID bash</code></td><td>进入容器内部</td></tr><tr><td><code>docker logs 容器ID</code></td><td>查看日志</td></tr></tbody></table><hr /><h2 id="镜像imagevs-容器container"><a class="markdownIt-Anchor" href="#镜像imagevs-容器container"></a> 📌 镜像（Image）vs 容器（Container）</h2><table><thead><tr><th>项目</th><th>镜像（Image）</th><th>容器（Container）</th></tr></thead><tbody><tr><td>是什么</td><td>模板</td><td>实例（运行时）</td></tr><tr><td>类比</td><td>类的定义</td><td>类的对象</td></tr><tr><td>是否可变</td><td>只读</td><td>可读写（运行中）</td></tr></tbody></table><hr /><h2 id="为什么-devops-离不开-docker"><a class="markdownIt-Anchor" href="#为什么-devops-离不开-docker"></a> ✨ 为什么 DevOps 离不开 Docker？</h2><ul><li>✅ 保证环境一致性（dev/test/prod 都一样）</li><li>✅ 快速构建 + 快速交付 + 快速回滚</li><li>✅ 非常适合 CI/CD 自动化流程</li><li>✅ 与 Kubernetes 等编排工具完美配合</li></ul><hr />]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops①</title>
      <link href="/1fd44324.html"/>
      <url>/1fd44324.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/1fd44324.html" title="Devops①">Devops①</a></li><li><a href="/68d373b2.html" title="Devops②">Devops②</a></li><li><a href="/f1da2208.html" title="Devops③">Devops③</a></li><li><a href="/86dd129e.html" title="Devops④">Devops④</a></li><li><a href="/18b9873d.html" title="Devops⑤">Devops⑤</a></li><li><a href="/6fbeb7ab.html" title="Devops⑥">Devops⑥</a></li><li><a href="/f6b7e611.html" title="Devops⑦">Devops⑦</a></li><li><a href="/81b0d687.html" title="Devops⑧">Devops⑧</a></li><li><a href="/110fcb16.html" title="Devops⑨">Devops⑨</a></li></ol><h1 id="第-1-节-devops-基础理解"><a class="markdownIt-Anchor" href="#第-1-节-devops-基础理解"></a> 第 1 节 · DevOps 基础理解</h1><h2 id="什么是-devops"><a class="markdownIt-Anchor" href="#什么是-devops"></a> 🌱 什么是 DevOps？</h2><p><strong>DevOps = Development（开发） + Operations（运维）</strong></p><p>它不是一门语言、也不是一套工具，而是一种文化理念和工程实践：</p><blockquote><p><strong>目标是打通开发和运维之间的壁垒，提升软件交付速度与质量。</strong></p></blockquote><hr /><h2 id="devops-想解决什么问题"><a class="markdownIt-Anchor" href="#devops-想解决什么问题"></a> 🎯 DevOps 想解决什么问题？</h2><table><thead><tr><th>问题</th><th>传统方式（没 DevOps）</th><th>DevOps 做法</th></tr></thead><tbody><tr><td>开发上线慢</td><td>要等运维手动部署</td><td>自动化 CI/CD 部署流程</td></tr><tr><td>开发与运维脱节</td><td>“代码写完不管了”</td><td>开发也负责上线后的运行健康</td></tr><tr><td>出现 bug 难定位</td><td>日志杂乱、权限不清</td><td>可观测性 + 自动追踪机制</td></tr><tr><td>系统不稳定</td><td>手动操作易出错</td><td>自动化测试 + 自动回滚机制</td></tr></tbody></table><hr /><h2 id="devops-的核心理念5-大关键词"><a class="markdownIt-Anchor" href="#devops-的核心理念5-大关键词"></a> 🧠 DevOps 的核心理念（5 大关键词）</h2><ol><li><p><strong>自动化（Automation）</strong></p><ul><li>从构建、测试、部署到监控，尽可能自动化</li></ul></li><li><p><strong>持续集成 / 持续交付（CI/CD）</strong></p><ul><li>自动化测试 + 自动上线，快速发布新功能</li></ul></li><li><p><strong>基础设施即代码（IaC）</strong></p><ul><li>用代码去描述和管理服务器资源（Terraform、Ansible）</li></ul></li><li><p><strong>可观测性（Observability）</strong></p><ul><li>通过日志、指标、链路追踪全面掌握系统状态</li></ul></li><li><p><strong>协作文化（Collaboration）</strong></p><ul><li>开发、运维、安全、测试团队高度协同</li></ul></li></ol><hr /><h2 id="devops-典型工作流从写代码到上线"><a class="markdownIt-Anchor" href="#devops-典型工作流从写代码到上线"></a> 🔁 DevOps 典型工作流（从写代码到上线）</h2><p><img src="../attach/Pasted%20image%2020250414134814.png" alt="" /></p><hr /><h2 id="devops-和-agile-sre-的关系"><a class="markdownIt-Anchor" href="#devops-和-agile-sre-的关系"></a> 💡 DevOps 和 Agile、SRE 的关系</h2><table><thead><tr><th>名称</th><th>目标</th><th>与 DevOps 的关系</th></tr></thead><tbody><tr><td>Agile 敏捷开发</td><td>快速迭代、客户反馈</td><td>DevOps 是其交付环节的延伸</td></tr><tr><td>SRE（Site Reliability Engineering）</td><td>提高系统稳定性</td><td>是 DevOps 的“运维工程化”落地方案</td></tr></tbody></table><hr /><h2 id="devops-实践案例"><a class="markdownIt-Anchor" href="#devops-实践案例"></a> ✨ DevOps 实践案例</h2><ul><li>🏢 <strong>Netflix</strong>：采用全自动化 CI/CD 系统，每天部署上千次</li><li>🏢 <strong>Etsy</strong>：部署管道 + 可视化监控，让上线变得稳定且透明</li><li>🏢 <strong>Google</strong>：提出 SRE 概念，推动 DevOps 工程落地</li></ul><hr /><h2 id="关键词速查表中英对照"><a class="markdownIt-Anchor" href="#关键词速查表中英对照"></a> 📌 关键词速查表（中英对照）</h2><table><thead><tr><th>中文</th><th>英文术语</th><th>简要解释</th></tr></thead><tbody><tr><td>持续集成</td><td>Continuous Integration</td><td>自动化测试 &amp; 构建</td></tr><tr><td>持续交付</td><td>Continuous Delivery</td><td>自动部署到测试环境</td></tr><tr><td>容器化</td><td>Containerization</td><td>像 Docker 一样打包应用</td></tr><tr><td>配置管理</td><td>Configuration Management</td><td>自动配置服务器状态（Ansible）</td></tr><tr><td>IaC</td><td>Infrastructure as Code</td><td>用代码管理云资源（Terraform）</td></tr><tr><td>可观测性</td><td>Observability</td><td>系统状态全透明化</td></tr></tbody></table><hr /><p>下一节预告 👉 <strong>第 2 节：容器化与 Docker 入门</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins CICD 教程总结</title>
      <link href="/b4ade7d0.html"/>
      <url>/b4ade7d0.html</url>
      
        <content type="html"><![CDATA[<h3 id="培训目标-training-objectives"><a class="markdownIt-Anchor" href="#培训目标-training-objectives"></a> 培训目标 Training Objectives</h3><ul><li>掌握 Jenkins 的基础安装、配置、管理</li><li>学习 CI/CD 基础、Jenkins 合作 GitHub 实现进程自动化</li><li>了解 Jenkins Pipeline 的语法和应用</li><li>学习 Jenkins 多节点 (multi-node) 配置和运行</li></ul><hr /><h3 id="虚拟机-vm-配置-virtual-machine-setup"><a class="markdownIt-Anchor" href="#虚拟机-vm-配置-virtual-machine-setup"></a> 虚拟机 VM 配置 Virtual Machine Setup</h3><ul><li>建议使用 Google Cloud (GCP)，提供 $300 免费 credit，可使用 3 个月</li><li>建议选择 Ubuntu 22 或 24 版，配置至少 2 CPU + 8GB RAM</li><li>打开网络端口 22 (SSH)，80 (HTTP)，443 (HTTPS)，8080 (Jenkins 默认端口)</li><li>建议使用 Docker 进行 Jenkins 快速部署</li></ul><hr /><h3 id="jenkins-基础安装-jenkins-basic-installation"><a class="markdownIt-Anchor" href="#jenkins-基础安装-jenkins-basic-installation"></a> Jenkins 基础安装 Jenkins Basic Installation</h3><ul><li>使用 Docker 部署 Jenkins，配合 -p 给肉端口映射<ul><li>eg: <code>-p 8080:8080 -p 50000:50000</code></li><li>Jenkins 目录映射: <code>/var/jenkins_home</code></li></ul></li><li>使用 <code>docker run</code> 或 Docker Compose 运行 Jenkins</li><li>首次启动时通过 <code>/var/jenkins_home/secrets/initialAdminPassword</code> 解锁</li><li>如果使用原生 Ubuntu 安装，需先安装 Java，然后配置 Jenkins 服务</li><li>将 Jenkins 用户添加到 sudo 组，方便无密码执行操作</li></ul><hr /><h3 id="jenkins-和-github-集成-jenkins-github-integration"><a class="markdownIt-Anchor" href="#jenkins-和-github-集成-jenkins-github-integration"></a> Jenkins 和 GitHub 集成 Jenkins + GitHub Integration</h3><ul><li>使用 webhook 触发 Jenkins 系列进程</li><li>正确配置 GitHub Repo 和 Jenkins 项目 URL</li><li>配合 Git 接入 token 或 SSH key 进行信件合作</li></ul><hr /><h3 id="jenkins-pipeline-基础-jenkins-pipeline-basics"><a class="markdownIt-Anchor" href="#jenkins-pipeline-基础-jenkins-pipeline-basics"></a> Jenkins Pipeline 基础 Jenkins Pipeline Basics</h3><ul><li>语法结构: <code>pipeline</code> -&gt; <code>agent</code> / <code>stages</code> / <code>steps</code></li><li>支持 Declarative 和 Scripted 样式</li><li>常用 directive:<ul><li><code>agent</code>, <code>environment</code>, <code>stage</code>, <code>steps</code>, <code>post</code>, <code>triggers</code></li></ul></li><li>使用 <code>pipeline syntax</code> 工具快速生成 pipeline 代码</li><li>通过 Snippet Generator 生成 checkout/git/docker 等操作</li><li>配合 Docker agent 为不同项目选择相应环境</li></ul><p><strong>示例 Sample:</strong></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  environment &#123;</span><br><span class="line">    IMAGE_NAME = <span class="string">&#x27;my-app&#x27;</span></span><br><span class="line">    IMAGE_TAG = <span class="string">&#x27;v1.0.0&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo <span class="string">&quot;Building $IMAGE_NAME:$IMAGE_TAG&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="multi-node-部署-jenkins-multi-node-deployment"><a class="markdownIt-Anchor" href="#multi-node-部署-jenkins-multi-node-deployment"></a> Multi-node 部署 Jenkins Multi-node Deployment</h3><ul><li>Jenkins master/slave 结构，便于处理多任务并发</li><li>通过 agent label 分配任务到按需节点</li><li>slave 可通过 SSH 或 JNLP 连接</li><li>选择 node 时根据工作类型和资源规划</li></ul><hr /><h3 id="jenkins-安全设置和证书-jenkins-security-certificate-setup"><a class="markdownIt-Anchor" href="#jenkins-安全设置和证书-jenkins-security-certificate-setup"></a> Jenkins 安全设置和证书 Jenkins Security &amp; Certificate Setup</h3><ul><li>接入 Let’s Encrypt 免费证书</li><li>配合 Nginx 实现 HTTPS 访问 Jenkins</li><li>基本流程:<ol><li>注册域名（建议使用 GoDaddy 或 AWS Route53）</li><li>配置 A Record 指向 Jenkins 服务器 IP</li><li>配合 Certbot 自动获取证书</li><li>修改 Nginx 配置文件，同时展示 HTTPS 结果</li></ol></li><li>Let’s Encrypt 证书有效期 90 天，可配合定时更新</li></ul><hr /><h3 id="jenkins-经验分享-real-world-experience"><a class="markdownIt-Anchor" href="#jenkins-经验分享-real-world-experience"></a> Jenkins 经验分享 Real-world Experience</h3><ul><li>大型企业常配合 GitHub Action, GitLab CI, Jenkins 联合使用</li><li>根据企业经费和实际需求选择相应 CI/CD 工具</li><li>虚拟机配置和 SSH 管理是 DevOps 基本技能</li></ul><hr /><h3 id="实操-hands-on-summary"><a class="markdownIt-Anchor" href="#实操-hands-on-summary"></a> 实操 Hands-on Summary</h3><ul><li>实现 Docker 快速部署 Jenkins</li><li>建立 Jenkins Pipeline 与 GitHub 集成</li><li>配置 multi-node 结构实现并发</li><li>学习 Jenkins 证书配置，实现 HTTPS 访问</li></ul><hr /><h3 id="小结-conclusion"><a class="markdownIt-Anchor" href="#小结-conclusion"></a> 小结 Conclusion</h3><p>Jenkins 是当今最流行的 CI/CD 工具之一，配合 Docker 和 Cloud 平台，能够快速搭建自动化部署系统。过程中学习了服务器部署，端口配置，线程形成，实践功能和证书配置，基本培养了 DevOps 工程师必备的能力。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
            <tag> #Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions CICD</title>
      <link href="/cc998e42.html"/>
      <url>/cc998e42.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本概念-basic-concepts"><a class="markdownIt-Anchor" href="#一-基本概念-basic-concepts"></a> 一、基本概念 Basic Concepts</h3><ul><li><p>本次课程是 GitHub Actions 的继续课程，添加了对 CI/CD 线程的深入讲解。<br />This session is a continuation of GitHub Actions, going deeper into CI/CD workflows.</p></li><li><p>主要基于 Next.js 项目进行 Hands-on 实操。<br />Mainly involves hands-on practice with a Next.js project.</p></li><li><p>通过 GitHub Action 实现以下流程: build -&gt; test -&gt; publish.<br />Workflow: build -&gt; test -&gt; publish using GitHub Actions.</p></li></ul><hr /><h3 id="二-github-actions-框架说明-structure-of-github-actions"><a class="markdownIt-Anchor" href="#二-github-actions-框架说明-structure-of-github-actions"></a> 二、GitHub Actions 框架说明 Structure of GitHub Actions</h3><ul><li><p>Workflow: 一个 workflow 和 repo 关联，可包含多个 jobs<br />A workflow is tied to a repo and may include multiple jobs.</p></li><li><p>Job: 可应用于运行一些相关操作，可应用 runner 运行<br />Jobs perform specific tasks and run on runners.</p></li><li><p>Runner: 提供培训环境，如 ubuntu-latest<br />Provides the execution environment, e.g., ubuntu-latest.</p></li><li><p>Step: 一个 job 内的实际操作步骤<br />Steps are the actual actions within a job.</p></li><li><p><code>uses</code>: 使用预定义好的 action<br />Calls pre-defined actions.</p></li><li><p><code>run</code>: 运行 shell 指令<br />Executes shell commands.</p></li></ul><hr /><h3 id="三-workflow-触发条件-trigger-events"><a class="markdownIt-Anchor" href="#三-workflow-触发条件-trigger-events"></a> 三、Workflow 触发条件 Trigger Events</h3><ul><li><p>push: 代码 push 时触发<br />Triggered on code push.</p></li><li><p>pull_request: 创建 PR 时触发<br />Triggered on PR creation.</p></li><li><p>workflow_dispatch: 手动触发<br />Manually triggered.</p></li><li><p>schedule: 按 cron 表进行进度执行<br />Runs on schedule (cron format).</p></li><li><p>可对分支名进行 filter 或 ignore<br />Can filter or ignore specific branches.</p></li></ul><hr /><h3 id="四-常用功能-common-features"><a class="markdownIt-Anchor" href="#四-常用功能-common-features"></a> 四、常用功能 Common Features</h3><ul><li><p>outputs: 在 jobs/steps 之间传递值<br />Pass values between jobs/steps.</p></li><li><p>cache: 缓存 dependency 加快下一次 job<br />Cache dependencies to speed up jobs.</p></li><li><p>artifacts: 上传输出文件<br />Upload output files (e.g., for deployment).</p></li></ul><hr /><h3 id="五-variables-secrets"><a class="markdownIt-Anchor" href="#五-variables-secrets"></a> 五、Variables &amp; Secrets</h3><ul><li><p>env: 普通变量，可定义在 workflow / job / step 级别<br />Normal variables can be defined at workflow/job/step level.</p></li><li><p>secrets: 用于密码/网络证书等<br />Used for passwords, API keys, etc.</p></li><li><p>GitHub Environment: 定义 dev / uat / prod 环境分别存储 secrets 值<br />Define different environments (dev/uat/prod) to store secrets.</p></li></ul><hr /><h3 id="六-condition-条件运行"><a class="markdownIt-Anchor" href="#六-condition-条件运行"></a> 六、Condition 条件运行</h3><ul><li><p>可以通过 <code>if</code> 条件条件控制 job/step 是否运行<br />Use <code>if</code> to conditionally run jobs or steps.</p></li><li><p>例如 only run deploy if tests succeed.<br />Example: deploy only runs if tests pass.</p></li></ul><hr /><h3 id="七-custom-action-定制主动-action"><a class="markdownIt-Anchor" href="#七-custom-action-定制主动-action"></a> 七、Custom Action 定制主动 Action</h3><ul><li><p>创建 <code>.github/actions/&lt;name&gt;/action.yml</code> 格式<br />Define a custom action via <code>.github/actions/&lt;name&gt;/action.yml</code>.</p></li><li><p>可采用 run/bash/scripts 等写法<br />Can use <code>run</code>, bash scripts, etc.</p></li><li><p>通过 <code>uses: ./github/actions/&lt;name&gt;</code> 引用<br />Reference via <code>uses: ./github/actions/&lt;name&gt;</code>.</p></li></ul><hr /><h3 id="八-hands-on-实操例子"><a class="markdownIt-Anchor" href="#八-hands-on-实操例子"></a> 八、Hands-on 实操例子</h3><ul><li><p>利用 <code>checkout</code>, <code>setup-node</code>, <code>run</code>, <code>artifact</code>, <code>deploy to ECS</code> 完成实战<br />Practice using actions like <code>checkout</code>, <code>setup-node</code>, <code>run</code>, <code>artifact</code>, <code>deploy to ECS</code>.</p></li><li><p>通过 Notion 项目列表和 fork 脚本项目进行操作<br />Refer to the Notion page and fork starter repo to practice.</p></li></ul><hr /><h3 id="九-进阶指南-advanced-topics"><a class="markdownIt-Anchor" href="#九-进阶指南-advanced-topics"></a> 九、进阶指南 Advanced Topics</h3><ul><li><p>reusable workflows: 其他 workflow 可以 call 当前设计<br />Reusable workflows can be called from other workflows.</p></li><li><p>expressions: 最好选择看 GitHub 官方表达式文档<br />Use GitHub’s expression syntax for advanced conditionals.</p></li><li><p>event activity type: 举例 open/edit/merge/delete 等 PR 操作分类<br />PR event activities like open/edit/merge/delete.</p></li><li><p>filters: 对 branch / path 进行 include/过滤<br />Filters on branches and paths.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Devops </tag>
            
            <tag> #git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蚂蚁上树</title>
      <link href="/562d562e.html"/>
      <url>/562d562e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1泡粉丝"><a class="markdownIt-Anchor" href="#1泡粉丝"></a> 1.泡粉丝</h2><p>开水泡泡得了</p><h2 id="2炒肉"><a class="markdownIt-Anchor" href="#2炒肉"></a> 2.炒肉</h2><p>起锅烧油<br />葱姜蒜<br />肉沫炒熟<br />炒出来多的水分倒掉<br />加豆瓣酱炒香</p><h2 id="3放调料"><a class="markdownIt-Anchor" href="#3放调料"></a> 3.放调料</h2><p>2 生抽 1 老抽<br />1 蚝油 1 糖<br />1 淀粉 1 孜然粉<br />半碗水搅匀<br />倒入肉翻炒<br />加入粉丝翻炒</p><h2 id="4出锅"><a class="markdownIt-Anchor" href="#4出锅"></a> 4.出锅</h2><p>大火收汁<br />撒葱花<br /><img src="../attach/A270133CAF644CFFF9494FA375288CFD.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 菜谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #好吃的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算相关</title>
      <link href="/cc6cebfd.html"/>
      <url>/cc6cebfd.html</url>
      
        <content type="html"><![CDATA[<h2 id="cdn"><a class="markdownIt-Anchor" href="#cdn"></a> CDN</h2><p>CDN（Content Delivery Network）即内容分发网络，是一种通过网络来分发内容的技术。CDN 的基本原理是将内容分发到离用户最近的服务器上，这样用户可以更快地访问内容。CDN 可以提高网站的访问速度，减少服务器的负载，提高网站的稳定性。</p><p>CDN 的工作原理如下：</p><ol><li>用户访问网站时，会先访问 CDN 的 DNS 服务器。</li><li>CDN 的 DNS 服务器会根据用户的 IP 地址，选择离用户最近的服务器。</li><li>用户访问 CDN 的服务器，获取网站的内容。</li><li>CDN 的服务器会缓存网站的内容，提高访问速度。</li></ol><h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2><p>DNS（Domain Name System）即域名系统，是一种用来将域名转换为 IP 地址的系统。DNS 的基本原理是将域名映射到 IP 地址，这样用户可以通过域名来访问网站。</p><p>DNS 的工作原理如下：</p><ol><li>用户输入域名，浏览器会向 DNS 服务器发送请求。</li><li>DNS 服务器会查询域名对应的 IP 地址。</li><li>DNS 服务器将 IP 地址返回给浏览器。</li><li>浏览器根据 IP 地址，访问网站的服务器。</li></ol><h2 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h2><p>负载均衡是一种通过分配任务到多个服务器上来提高系统性能和可靠性的技术。负载均衡的基本原理是将请求分发到多个服务器上，这样可以减少单个服务器的负载，提高系统的性能和可靠性。</p><p>负载均衡的工作原理如下：</p><ol><li>用户发送请求到负载均衡器。</li><li>负载均衡器根据负载情况，将请求分发到多个服务器上。</li><li>服务器处理请求，并将结果返回给用户。</li></ol><h2 id="iam"><a class="markdownIt-Anchor" href="#iam"></a> IAM</h2><p>IAM（Identity and Access Management）即身份和访问管理，是一种用来管理用户和权限的系统。IAM 的基本原理是将用户和权限进行分离，这样可以提高系统的安全性和可靠性。</p><p>IAM 的工作原理如下：</p><ol><li>用户登录系统，系统会验证用户的身份。</li><li>系统根据用户的身份，授予用户相应的权限。</li><li>用户根据权限，访问系统的资源。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常见的git命令</title>
      <link href="/7a251f5.html"/>
      <url>/7a251f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure><p>什么时候是用<code>--global</code>，什么时候不用呢？如果你只想在当前项目中使用这个配置，就不用<code>--global</code></p><h2 id="reset-和-revert"><a class="markdownIt-Anchor" href="#reset-和-revert"></a> reset 和 revert</h2><p><code>reset</code>和<code>revert</code>都是用来撤销之前的提交，但是有一些区别。</p><p><code>reset</code>是直接删除之前的提交，而<code>revert</code>是创建一个新的提交，这个提交是之前提交的反向操作。</p><h2 id="merge-和-rebase"><a class="markdownIt-Anchor" href="#merge-和-rebase"></a> merge 和 rebase</h2><p><code>merge</code>和<code>rebase</code>都是用来合并分支的，但是有一些区别。</p><p><code>merge</code>是将两个分支的提交合并到一起，形成一个新的提交。<code>rebase</code>是将两个分支的提交按照时间顺序重新排序，然后合并到一起。</p><p>其他内容参考<a href="https://code.433200.xyz/docs/git.html">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>送你一朵fafa</title>
      <link href="/63acb048.html"/>
      <url>/63acb048.html</url>
      
        <content type="html"><![CDATA[<p><img src="../attach/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241130225122.jpg" alt="" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>海龟汤系列</title>
      <link href="/234e9921.html"/>
      <url>/234e9921.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>红汤：有人死亡<br />清汤：无人死亡<br />黑汤：全员死亡<br />胡辣汤：有人受伤<br />鸳鸯汤：有人快要死亡<br />本格：现实生活中会发生的事<br />变格：现实生活中不会发生的事<br />汤面：根据汤面去猜汤底<br />汤底：有的汤面有隐喻</p></div><h2 id="海龟汤"><a class="markdownIt-Anchor" href="#海龟汤"></a> 海龟汤</h2><h3 id="火车"><a class="markdownIt-Anchor" href="#火车"></a> 火车</h3><ul><li>汤面：这是一辆行驶的火车，我刚上车不久，坐上了最后一节车厢，车厢里流了很多血，我知道我快要活不长了</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看汤底    </button><div class="hide-content"><p>人体蜈蚣</p></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> #海龟汤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记⑦</title>
      <link href="/ed7d1563.html"/>
      <url>/ed7d1563.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W9</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="贪心算法greedy-algorithm"><a class="markdownIt-Anchor" href="#贪心算法greedy-algorithm"></a> 贪心算法（Greedy Algorithm）</h2><ul><li><strong>定义</strong>：贪心算法是一类算法，解决问题时每一步都选择当前状态下的局部最优解，希望通过这样的选择可以找到全局最优解。</li><li><strong>特点</strong>：贪心算法的每一步都选择当前状态下的局部最优解，而不考虑全局最优解，因此贪心算法通常比较简单，容易实现。</li></ul><h3 id="1贪心算法的通用形式"><a class="markdownIt-Anchor" href="#1贪心算法的通用形式"></a> 1.贪心算法的通用形式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generic_greedy</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">  initialize result</span><br><span class="line"><span class="comment"># 这里可以对输入进行排序，以确定考虑输入的顺序</span></span><br><span class="line">  determine order <span class="keyword">in</span> which to consider <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代选择贪心解</span></span><br><span class="line">  <span class="keyword">for</span> each element i of the <span class="built_in">input</span> (<span class="keyword">in</span> above order) do</span><br><span class="line"><span class="comment"># 如果元素 i 改进了结果，则更新结果</span></span><br><span class="line">    <span class="keyword">if</span> element i improves result then</span><br><span class="line">      update result <span class="keyword">with</span> element i</span><br><span class="line">  <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="2分数背包问题-fractional-knapsack-problem"><a class="markdownIt-Anchor" href="#2分数背包问题-fractional-knapsack-problem"></a> 2.分数背包问题 (Fractional Knapsack Problem)</h3><ul><li><p><strong>问题描述</strong>：给定一组物品，每个物品有两个属性</p><ul><li>b[i]：物品的价值</li><li>w[i]：物品的重量</li><li>目标是选择若干物品，使得总效益最大，并且总重量不超过给定的限制 W。</li></ul></li><li><p><strong>贪心策略</strong>：按照物品的 效益/重量比值（即单位重量的效益）从高到低的顺序依次选择物品，直到背包达到最大容量。</p></li><li><p><strong>算法实现</strong>：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fractional_knapsack</span>(<span class="params">b, w, W</span>):</span><br><span class="line">  <span class="comment"># 把物品的benefit放到数组中</span></span><br><span class="line">  x ← array of size |b| of zeros</span><br><span class="line">  <span class="comment"># 初始化当前weight</span></span><br><span class="line">  curr ← <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> curr &lt; W do:</span><br><span class="line">    <span class="comment"># 拿最好的还没有被选择的物品（可以有以下三种）</span></span><br><span class="line">    i ← <span class="string">&quot;best&quot;</span> item <span class="keyword">not</span> yet chosen</span><br><span class="line">    <span class="comment"># 如果物品i的重量小于剩余的weight，那么就拿全部，不是就只拿一部分，填满剩余的weight</span></span><br><span class="line">    x[i] ← <span class="built_in">min</span>(w[i], W - curr)</span><br><span class="line">    <span class="comment"># 更新当前weight</span></span><br><span class="line">    curr ← curr + x[i]</span><br><span class="line">  <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>复杂度分析：<br />需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 来排序物品，在循环内处理物品需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> .</p><ul><li><strong>效益优先</strong>：选择效益最高的物品。<br /><img src="../attach/Pasted%20image%2020240930132751.png" alt="" /></li><li><strong>重量优先</strong>：选择重量最轻的物品。<br /><img src="../attach/Pasted%20image%2020240930132703.png" alt="" /></li><li><strong>效益/重量比优先</strong>：选择效益/重量比最高的物品。<br /><img src="../attach/Pasted%20image%2020240930132714.png" alt="" /></li></ul><h3 id="3任务调度问题-task-scheduling-problem"><a class="markdownIt-Anchor" href="#3任务调度问题-task-scheduling-problem"></a> 3.任务调度问题 (Task Scheduling Problem)</h3><ul><li><p><strong>问题描述</strong>：给定 n 个讲座，每个讲座有一个开始时间 s 和结束时间 f。目标是使用最少的教室安排所有讲座，使得没有两个讲座在同一教室内同时进行。<br /><img src="../attach/Pasted%20image%2020240930134347.png" alt="" /></p></li><li><p><strong>贪心策略</strong>：使用分区间的贪心策略 Interval Partitioning: Lower bound（区间划分：下限），按照结束时间从早到晚的顺序安排讲座。</p></li><li><p><strong>算法实现</strong>：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interval_partition</span>(<span class="params">S</span>):</span><br><span class="line">  <span class="comment"># 按照开始时间排序</span></span><br><span class="line">  sort intervals <span class="keyword">in</span> increasing starting time order</span><br><span class="line">  d ← <span class="number">0</span>    <span class="comment"># 已分配的教室数量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逐个分配教室</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> increasing starting time order do:</span><br><span class="line">    <span class="comment"># 如果讲座 i 与某个教室兼容，则安排在该教室</span></span><br><span class="line">    <span class="keyword">if</span> lecture i <span class="keyword">is</span> compatible <span class="keyword">with</span> some classroom k:</span><br><span class="line">      <span class="comment"># 安排在教室 k</span></span><br><span class="line">      schedule lecture i <span class="keyword">in</span> classroom <span class="number">1</span> ≤ k ≤ d</span><br><span class="line">    <span class="comment"># 如果讲座 i 与所有教室都不兼容，则分配一个新的教室</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="comment"># 分配一个新的教室</span></span><br><span class="line">      allocate a new classroom d+<span class="number">1</span></span><br><span class="line">      schedule lecture i <span class="keyword">in</span> classroom d+<span class="number">1</span></span><br><span class="line">      d ← d+<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂度分析：需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 解法如下：<br /><img src="../attach/Pasted%20image%2020240930135138.png" alt="" /></p><h3 id="4哈夫曼编码-huffman-encoding"><a class="markdownIt-Anchor" href="#4哈夫曼编码-huffman-encoding"></a> 4.哈夫曼编码 (Huffman Encoding)</h3><ul><li><strong>介绍</strong>：哈夫曼编码是一种基于贪心策略的编码方法，它的目标是给出现频率高的字符分配短的编码，给出现频率低的字符分配长的编码，从而让整体编码长度最短。</li></ul><h4 id="41-前缀编码-prefix-codes"><a class="markdownIt-Anchor" href="#41-前缀编码-prefix-codes"></a> 4.1 前缀编码 (Prefix Codes)</h4><ul><li><p><strong>定义</strong>：前缀码是一种特殊的编码方式，保证任何字符的编码都不会是其他字符编码的前缀。</p></li><li><p><strong>例子</strong>：例如，假设字符 A 的编码是 0，字符 B 的编码是 10，字符 C 的编码是 110，这是一种前缀码编码，因为没有任何字符的编码是另一个字符编码的前缀。<br /><img src="../attach/Pasted%20image%2020240930143549.png" alt="" /></p></li><li><p><strong>频率越高，编码越短</strong>：高频字符应该用较短的二进制码来表示，低频字符用较长的编码表示，这样可以确保整体编码的长度最短。</p></li></ul><h4 id="42-哈夫曼编码的步骤"><a class="markdownIt-Anchor" href="#42-哈夫曼编码的步骤"></a> 4.2 哈夫曼编码的步骤</h4><ul><li><p>1.<strong>计算字符频率</strong>：首先，统计给定字符串中每个字符的频率。频率越高的字符，我们希望它的编码越短。</p></li><li><p>2.<strong>创建节点</strong>：为每个字符创建一个节点，节点的权值为该字符的频率。</p></li><li><p>3.<strong>构建哈夫曼树</strong>：构建哈夫曼树，每次从所有节点中选择两个最小的节点，将它们合并为一个新的节点，新节点的权值是两个原节点权值之和。这个合并过程会一直重复，直到只剩下一个节点，这个节点就是哈夫曼树的根节点。</p></li><li><p>4.<strong>生成编码</strong>：从根节点开始，对哈夫曼树进行深度优先搜索，每次向左走编码为 0，向右走编码为 1，直到叶子节点。叶子节点的路径就是字符的编码。</p></li></ul><h4 id="43-哈夫曼编码的详细算法"><a class="markdownIt-Anchor" href="#43-哈夫曼编码的详细算法"></a> 4.3 哈夫曼编码的详细算法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">huffman</span>(<span class="params">C, f</span>):</span><br><span class="line">    <span class="comment"># 初始化优先队列 Q，存储每个字符和它的频率</span></span><br><span class="line">    Q ← empty priority queue</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> C:  <span class="comment"># 遍历字符集合</span></span><br><span class="line">        T ← single-node binary tree storing c  <span class="comment"># 为每个字符创建单节点树</span></span><br><span class="line">        Q.insert(f[c], T)  <span class="comment"># 将字符的频率和树插入队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并树的过程</span></span><br><span class="line">    <span class="keyword">while</span> Q.size() &gt; <span class="number">1</span>:</span><br><span class="line">        f1, T1 ← Q.remove_min()  <span class="comment"># 移除频率最小的两棵树</span></span><br><span class="line">        f2, T2 ← Q.remove_min()</span><br><span class="line">        <span class="comment"># 创建新树，将T1和T2作为左右子树</span></span><br><span class="line">        T ← new binary tree <span class="keyword">with</span> T1/T2 <span class="keyword">as</span> left/right subtrees</span><br><span class="line">        f ← f1 + f2  <span class="comment"># 新树的频率是T1和T2的频率之和</span></span><br><span class="line">        Q.insert(f, T)  <span class="comment"># 将新树插入队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后剩下的树就是哈夫曼树</span></span><br><span class="line">    f, T ← Q.remove_min()</span><br><span class="line">    <span class="keyword">return</span> T  <span class="comment"># 返回哈夫曼树</span></span><br></pre></td></tr></table></figure><h4 id="44-哈夫曼算法的时间复杂度"><a class="markdownIt-Anchor" href="#44-哈夫曼算法的时间复杂度"></a> 4.4 哈夫曼算法的时间复杂度</h4><ul><li>1.<strong>构建哈夫曼树的时间复杂度</strong><br />构建哈夫曼树的关键操作是不断从优先队列（优先级队列）中取出两个最小的元素，并将它们合并，然后将新生成的节点插回优先队列中。<ul><li><strong>初始化优先队列</strong>：给定一个包含 d 个不同字符的集合，我们需要将这些字符和它们的频率插入到优先队列中。初始化优先队列的操作需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>次操作。如果优先队列是用堆来实现的，那么插入一个元素的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>，因此初始化优先队列的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d \log d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>。</li><li><strong>合并节点</strong>：在每次迭代中，我们需要从优先队列中取出两个最小的节点，然后将它们合并为一个新的节点。这个操作需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span> 的时间。因为我们需要合并 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 次，所以合并节点的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((d-1) \log d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>，总的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d \log d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>。</li></ul></li><li>2.<strong>生成编码的时间复杂度</strong><br />在构建完哈夫曼树之后，接下来的任务是对每个字符生成对应的哈夫曼编码。生成编码的复杂度取决于字符串的长度 n 和字符集的大小 d。<ul><li><strong>生成编码</strong>：对于每个字符，我们需要沿着哈夫曼树从根节点走到叶节点，生成该字符的编码。生成一个字符编码的时间复杂度是与该字符在哈夫曼树中的深度成正比的。总的编码时间可以表示为所有字符的频率乘以它们在哈夫曼树中的深度的和。这个和可以用以下公式表示：<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>c</mi><mo>∈</mo><mi>C</mi></mrow></munder><mi>f</mi><mo stretchy="false">[</mo><mi>c</mi><mo stretchy="false">]</mo><mo>⋅</mo><mi>d</mi><mo stretchy="false">[</mo><mi>c</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\sum_{c \in C} f[c] \cdot d[c]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mclose">]</span></span></span></span></span></p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>c</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[c]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mclose">]</span></span></span></span> 是字符 c 的频率，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mi>c</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d[c]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mclose">]</span></span></span></span> 是字符 c 在哈夫曼树中的深度。因此，生成编码的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li></ul></li><li>3.<strong>总的时间复杂度</strong><br />综上所述，构建哈夫曼树的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d \log d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>，生成编码的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。因此，哈夫曼算法的总时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mi>log</mi><mo>⁡</mo><mi>d</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d \log d + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。其中，d 是不同字符的数量（字符集的大小），n 是字符串的长度（字符总数）。</li></ul><h4 id="45-示例构建哈夫曼树"><a class="markdownIt-Anchor" href="#45-示例构建哈夫曼树"></a> 4.5 示例：构建哈夫曼树</h4><p><img src="../attach/Pasted%20image%2020240930145620.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记⑥</title>
      <link href="/62d774a6.html"/>
      <url>/62d774a6.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W7-W8</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="1图的基本概念graph-basics"><a class="markdownIt-Anchor" href="#1图的基本概念graph-basics"></a> 1.图的基本概念（Graph Basics）</h2><h3 id="11-图的定义"><a class="markdownIt-Anchor" href="#11-图的定义"></a> 1.1 图的定义</h3><ul><li><strong>图</strong>（Graph）是由<strong>顶点</strong>（Vertices）和<strong>边</strong>（Edges）组成的一种数据结构。图是一种非线性数据结构，它是由顶点的有穷非空集合和顶点之间边的集合组成的。</li></ul><h3 id="12-边的类型edge-types"><a class="markdownIt-Anchor" href="#12-边的类型edge-types"></a> 1.2 边的类型（Edge Types）</h3><ul><li><p><strong>有向边</strong>（Directed Edge）：有向边是一个有序对，它连接两个顶点，其中一个是起始顶点，另一个是终止顶点，有一个箭头指向。</p></li><li><p><strong>无向边</strong>（Undirected Edge）：无向边是一个无序对，它连接两个顶点，没有起始顶点和终止顶点之分。</p></li></ul><h3 id="13-应用场景applications"><a class="markdownIt-Anchor" href="#13-应用场景applications"></a> 1.3 应用场景（Applications）</h3><ul><li>电子电路： 印刷电路板、集成电路。</li><li>交通网络： 公路网、航线网络。</li><li>计算机网络： 互联网、网页。</li><li>建模： 实体关系图、甘特图中的优先关系。</li></ul><h2 id="2图的概念和术语-graph-concepts-and-terminology"><a class="markdownIt-Anchor" href="#2图的概念和术语-graph-concepts-and-terminology"></a> 2.图的概念和术语 (Graph Concepts and Terminology)</h2><h3 id="21-路径path"><a class="markdownIt-Anchor" href="#21-路径path"></a> 2.1 路径（Path）</h3><ul><li><strong>定义</strong>：路径是图中的一个顶点序列，其中每个顶点都是由边连接到下一个顶点的。</li><li><strong>简单路径（Simple Path）</strong>：路径中的顶点不重复。<br /><img src="../attach/Pasted%20image%2020240913153812.png" alt="" /></li><li><strong>示例</strong>：(V, X, Z) 是一个简单路径；(U, W, X, Y, W, V) 是一个非简单路径。</li></ul><h3 id="22-环cycle"><a class="markdownIt-Anchor" href="#22-环cycle"></a> 2.2 环（Cycle）</h3><ul><li><strong>定义</strong>：环是一个简单路径，它的起始顶点和终止顶点相同。</li><li><strong>简单环（Simple Cycle）</strong>：环中的顶点不重复，除了起始顶点和终止顶点。<br /><img src="../attach/Pasted%20image%2020240913153955.png" alt="" /></li><li><strong>示例</strong>：(V, X, Y, W, U, V) 是一个简单环；(U, W, X, Y, W, V, U) 是一个非简单环。</li></ul><h3 id="23-子图subgraph"><a class="markdownIt-Anchor" href="#23-子图subgraph"></a> 2.3 子图（Subgraph）</h3><ul><li><strong>定义</strong>：子图是一个图的一部分，它包含图中的一些顶点和边。</li><li><strong>示例</strong>：<img src="../attach/Pasted%20image%2020240913154157.png" alt="" /></li></ul><h3 id="24-连通性connectivity"><a class="markdownIt-Anchor" href="#24-连通性connectivity"></a> 2.4 连通性（Connectivity）</h3><ul><li><strong>定义</strong>： 如果图 G 中的每对顶点之间都有路径相连，则图 G 是连通的。</li><li><strong>连通分量（Connected Component）</strong>：图 G 的极大连通子图称为 G 的连通分量。<br /><img src="../attach/Pasted%20image%2020240913154428.png" alt="" /></li></ul><h3 id="25-树和森林tree-and-forest"><a class="markdownIt-Anchor" href="#25-树和森林tree-and-forest"></a> 2.5 树和森林（Tree and Forest）</h3><ul><li><strong>树（Tree）</strong>：一个<em>无环</em>的<em>连通</em>图。</li><li><strong>森林（Forest）</strong>：一个或多个树的集合/是一个无环的图，其连通分量都是树。<br /><img src="../attach/Pasted%20image%2020240913154534.png" alt="" /></li></ul><h2 id="3图的数据结构和实现方法graph-data-structure"><a class="markdownIt-Anchor" href="#3图的数据结构和实现方法graph-data-structure"></a> 3.图的数据结构和实现方法（Graph Data Structure）</h2><h3 id="31-抽象数据类型adt方法说明"><a class="markdownIt-Anchor" href="#31-抽象数据类型adt方法说明"></a> 3.1 抽象数据类型（ADT）方法说明</h3><ul><li><code>numVertices()</code>：返回图中顶点的数量。</li><li><code>numEdges()</code>：返回图中边的数量。</li><li><code>vertices()</code>：返回图中所有顶点的列表。</li><li><code>edges()</code>：返回图中所有边的列表。</li><li><code>getEdge(u, v)</code>：返回从顶点 u 到顶点 v 的边。对于无向图，(u, v) 和 (v, u) 是相同的。</li><li><code>endVertices(e)</code>：返回边 e 的两个顶点的数组/列表。如果是有向图，返回的第一个顶点是起始顶点，第二个顶点是终止顶点。</li><li><code>opposite(v, e)</code>：返回边 e 的另一个顶点。如果 v 是 e 的一个顶点，则返回 e 的另一个顶点，否则返回错误。</li><li><code>outDegree(v)</code>：返回顶点 v 出度的数量（从顶点 v 发出的所有边）</li><li><code>inDegree(v)</code>：返回顶点 v 入度的数量（指向顶点 v 的所有边），对于无向图，入度和出度相同。</li><li><code>outgoingEdges(v)</code>：返回从顶点 v 出发的所有边的列表。</li><li><code>incomingEdges(v)</code>：返回指向顶点 v 的所有边的列表，对于无向图，返回的和 outgoingEdges(v) 相同。</li><li><code>insertVertex(x)</code>：在图中插入一个顶点 x。</li><li><code>insertEdge(u, v, x)</code>：在顶点 u 和 v 之间插入一条边，储存 x。如果已经存在这条边，则返回错误。</li><li><code>removeVertex(v)</code>：删除顶点 v 和与之相关的所有边。</li><li><code>removeEdge(e)</code>：删除边 e。</li></ul><h3 id="32-边列表-edge-list"><a class="markdownIt-Anchor" href="#32-边列表-edge-list"></a> 3.2 边列表 (Edge List)</h3><ul><li><p><strong>实现方法</strong>：使用两个列表，一个存储顶点，一个存储边。</p></li><li><p><strong>顶点序列（Vertex Sequence）</strong>：顶点的列表。</p></li><li><p><strong>顶点对象（Vertex Object）</strong>：包含顶点的数据和指针。</p></li><li><p><strong>边序列（Edge Sequence）</strong>：边的列表。</p></li><li><p><strong>边对象（Edge Object）</strong>：每个边对象指向它连接的两个顶点。</p></li><li><p><strong>示例</strong>：一个简单的无向图，包含四个顶点（u, v, w, z）和四条边（e, f, g, h）。<br /><img src="../attach/Pasted%20image%2020240913161944.png" alt="" /><br /><img src="../attach/Pasted%20image%2020240913162001.png" alt="" /><br />顶点序列 (V) 包含所有顶点对象。<br />边序列 (E) 包含所有边对象，每个边对象都指向它所连接的两个顶点。</p></li></ul><h3 id="33-领接表-adjacency-list"><a class="markdownIt-Anchor" href="#33-领接表-adjacency-list"></a> 3.3 领接表 (Adjacency List)</h3><ul><li><p><strong>定义</strong>：对于每个顶点 v，存储一个包含所有与 v 相关的边的列表。每个顶点（如 u, v, w）维护一个与其相关的边的序列。这个序列包含了所有连接到该顶点的边。对于每个边对象，存储它连接的两个顶点。</p></li><li><p><strong>示例</strong>：一个简单的无向图，有三个顶点 (u, v, w) 和两条边 (a, b)。<br /><img src="../attach/Pasted%20image%2020240913163006.png" alt="" /><br />每个顶点维护一个与其相连的边的列表（例如，顶点 v 维护边 a 和 b 的列表）。<br />每个边对象（例如 a 和 b）指向与其连接的顶点，并在相应的顶点序列中记录它们的位置。</p></li></ul><h3 id="34-领接矩阵-adjacency-matrix"><a class="markdownIt-Anchor" href="#34-领接矩阵-adjacency-matrix"></a> 3.4 领接矩阵 (Adjacency Matrix)</h3><p><img src="../attach/Pasted%20image%2020240913163519.png" alt="" /></p><ul><li><strong>顶点数组 (Vertex Array)</strong></li></ul><p>将每个顶点分配一个从 0 到 n-1 的唯一索引，其中 n 是图中的顶点数量。<br />顶点 u 被分配了索引 0，v 是 1，w 是 2，z 是 3。</p><ul><li><strong>二维数组表示 (2D-Array Adjacency Matrix)</strong></li></ul><p>使用一个二维数组（矩阵）A 来表示图的邻接关系。矩阵的大小为 𝑛×𝑛，其中 𝑛 是顶点的数量。<br />如果顶点 i 和顶点 j 之间存在边，则 <code>A[i][j]</code> 存储该边的引用（或者对于无权图来说是一个标志，例如 1 或 true）。<br />如果顶点 i 和顶点 j 之间没有边，则 <code>A[i][j]</code> 为 null 或 0。</p><p>邻接矩阵的特点：</p><p>边的引用（Reference to Edge Object）：<br />对于相邻的顶点（例如 u 和 v 之间的边 e），矩阵中对应位置存储边对象的引用。<br />空值（Null for Nonadjacent Vertices）：<br />对于不相邻的顶点，矩阵中对应位置为 null，表示没有边连接这两个顶点.</p><h3 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比</h3><p><img src="../attach/Pasted%20image%2020240913163814.png" alt="" /></p><h2 id="4图的遍历graph-traversal"><a class="markdownIt-Anchor" href="#4图的遍历graph-traversal"></a> 4.图的遍历（Graph Traversal）</h2><h3 id="41-深度优先搜索depth-first-search-dfs"><a class="markdownIt-Anchor" href="#41-深度优先搜索depth-first-search-dfs"></a> 4.1 深度优先搜索（Depth-First Search, DFS）</h3><ul><li><p><strong>定义</strong>：从一个起始顶点开始，沿着一条路径一直走到不能走为止，然后返回到上一个顶点，继续走下一条路径，直到所有的路径都走完。</p><p><img src="../attach/recording.gif" alt="" /></p></li></ul><h3 id="42-广度优先搜索breadth-first-search-bfs"><a class="markdownIt-Anchor" href="#42-广度优先搜索breadth-first-search-bfs"></a> 4.2 广度优先搜索（Breadth-First Search, BFS）</h3><ul><li><p><strong>定义</strong>：从一个起始顶点开始，先访问起始顶点的所有邻居，然后再访问邻居的邻居，依次类推。</p><p><img src="../attach/recording%202.gif" alt="" /></p></li></ul><h2 id="最短路径shortest-path"><a class="markdownIt-Anchor" href="#最短路径shortest-path"></a> 最短路径（Shortest Path）</h2><h3 id="dijkstras-algorithm"><a class="markdownIt-Anchor" href="#dijkstras-algorithm"></a> Dijkstra’s Algorithm</h3><div class="bvideo">  <a href="//www.bilibili.com/video/BV1zz4y1m7Nq" target="_blank">    <div class="bvideo-box">      <div class="bvideo-cover">        <div class="cover-default"></div>        <div class="bvideo-cover-layer" style="background-image:url(https://images.weserv.nl/?url=http://i2.hdslb.com/bfs/archive/bb2be62e92f789c3542fba01d528278dcb56c6f2.jpg)">          <i class="icon-video"></i>        </div>        <span class="duration">00:05:15</span>      </div>      <div class="bvideo-info">        <p class="title">【算法】最短路径查找—Dijkstra算法</p>        <div class="partition">          <span class="svg-up"></span>          <span class="up-name">从0开始数</span>        </div>        <div class="card-status">          <span class="play-num">            <span class="svg-play"></span>            <span style="vertical-align:middle;">92.1万</span>          </span>          <span>          <span class="svg-danmaku"></span>            <span style="vertical-align:middle;">784</span>          </span>        </div>      </div>    </div>  </a></div><h2 id="最小生成树minimum-spanning-tree"><a class="markdownIt-Anchor" href="#最小生成树minimum-spanning-tree"></a> 最小生成树（Minimum Spanning Tree）</h2><h3 id="prims-algorithm"><a class="markdownIt-Anchor" href="#prims-algorithm"></a> Prim’s Algorithm</h3><h3 id="kruskals-algorithm"><a class="markdownIt-Anchor" href="#kruskals-algorithm"></a> Kruskal’s Algorithm</h3><div class="bvideo">  <a href="//www.bilibili.com/video/BV1wG411z79G" target="_blank">    <div class="bvideo-box">      <div class="bvideo-cover">        <div class="cover-default"></div>        <div class="bvideo-cover-layer" style="background-image:url(https://images.weserv.nl/?url=http://i2.hdslb.com/bfs/archive/49b0a509c6258d1a0c934b71263040485d7b23d1.jpg)">          <i class="icon-video"></i>        </div>        <span class="duration">00:16:59</span>      </div>      <div class="bvideo-info">        <p class="title">图-最小生成树-Prim(普里姆)算法和Kruskal(克鲁斯卡尔)算法</p>        <div class="partition">          <span class="svg-up"></span>          <span class="up-name">蓝不过海呀</span>        </div>        <div class="card-status">          <span class="play-num">            <span class="svg-play"></span>            <span style="vertical-align:middle;">29.3万</span>          </span>          <span>          <span class="svg-danmaku"></span>            <span style="vertical-align:middle;">940</span>          </span>        </div>      </div>    </div>  </a></div>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MC开服</title>
      <link href="/3f2c2837.html"/>
      <url>/3f2c2837.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装-java"><a class="markdownIt-Anchor" href="#安装-java"></a> 安装 Java</h2><ul><li>建议使用 Azul 的 Zulu JDK，它是一个免费的 JDK，可以在<a href="https://www.azul.com/downloads/zulu-community/">这里</a>下载。</li></ul><h2 id="mcsmanager-面板"><a class="markdownIt-Anchor" href="#mcsmanager-面板"></a> MCSManager 面板 ：</h2><ul><li><p>介绍</p><p>MCSManager 是一个开源的 Minecraft 服务器管理面板，支持多种服务器类型，包括 Spigot、Paper、BungeeCord、Waterfall、Velocity、Vanilla、Forge、Fabric 等。附上<a href="https://mcsmanager.com/">官网</a>链接和<a href="https://docs.mcsmanager.com/zh_cn/">文档</a>链接</p></li><li><p>一键安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su -c <span class="string">&quot;wget -qO- https://script.mcsmanager.com/setup_cn.sh | bash&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>启动方式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动面板命令</span></span><br><span class="line">systemctl start mcsm-daemon.service</span><br><span class="line">systemctl start mcsm-web.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启面板命令</span></span><br><span class="line">systemctl restart mcsm-daemon.service</span><br><span class="line">systemctl restart mcsm-web.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止面板命令</span></span><br><span class="line">systemctl stop mcsm-web.service</span><br><span class="line">systemctl stop mcsm-daemon.service</span><br></pre></td></tr></table></figure><ul><li>面板默认地址 <a href="http://localhost:23333/">http://localhost:23333/</a></li></ul></li></ul><h2 id="启动命令"><a class="markdownIt-Anchor" href="#启动命令"></a> 启动命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
            <tag> #MC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记⑤</title>
      <link href="/8de136d3.html"/>
      <url>/8de136d3.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W6</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="映射-map"><a class="markdownIt-Anchor" href="#映射-map"></a> 映射 (Map)</h2><p>Map（映射）是一种数据结构，它将键（key）和值（value）成对存储。每个键最多储存一个元素，可以通过键快速找到对应的值。</p><h3 id="常见实现方式"><a class="markdownIt-Anchor" href="#常见实现方式"></a> 常见实现方式</h3><ol><li><p><strong>链表（Linked List-Based Map）</strong>：每个节点存储一个键值对。可以处理任何类型的键。</p><ul><li><strong>适用场景</strong>：小型数据集，且不需要频繁查找时使用。</li></ul></li><li><p><strong>数组（Array-Based Map）</strong>：键（key）直接作为数组的索引。这种实现方式需要键的范围是已知且受限的。</p><ul><li><strong>适用场景</strong>：键的范围较小且密集，空间不成为问题时使用。</li></ul></li><li><p><strong>哈希表（HashTable）</strong>：使用哈希函数将键映射到存储位置，适合快速查找和插入。需要处理哈希冲突。</p><ul><li><strong>适用场景</strong>：大多数实际应用场景，如字典（Dictionary）、集合（Set）等。</li></ul></li><li><p><strong>树（如红黑树）</strong>：使用平衡二叉搜索树存储键值对，保持顺序，适合需要有序数据的场合。</p><ul><li><strong>适用场景</strong>：需要有序性且支持范围查询的场景，如数据库中的索引。</li></ul></li></ol><h2 id="哈希表-hashtable"><a class="markdownIt-Anchor" href="#哈希表-hashtable"></a> 哈希表 (HashTable)</h2><p>哈希表是一种数据结构，它通过哈希函数将键映射到存储位置。哈希表的查找和插入操作的时间复杂度为 O(1)。</p><h3 id="哈希函数-hash-function"><a class="markdownIt-Anchor" href="#哈希函数-hash-function"></a> 哈希函数 (Hash Function)</h3><p>哈希函数的两个组成部分：</p><ol><li><p><strong>哈希码（HashCode）函数</strong>：将输入的键（可以是整数、浮点数、字符串或任意对象）转换成一个整数。</p><ul><li>例如，如果输入是一个字符串 ‘word’，哈希码函数可能会将它转换成一个相应的整数，如 12345。</li></ul></li><li><p><strong>压缩函数（Compression Function）</strong>：将上一步得到的整数进一步压缩到一个固定的范围 [0，N-1]，其中 N 是哈希表的大小（数组的长度）。</p><ul><li>例如，如果 N=100，那么压缩函数会将输入整数压缩到 0 到 99 之间的一个值。</li></ul></li></ol><h4 id="哈希函数实现方法"><a class="markdownIt-Anchor" href="#哈希函数实现方法"></a> 哈希函数实现方法</h4><ul><li><strong>模除法（Modular Division）</strong>：尤其适用于正整数键。通过对一个素数取模来计算哈希值：h(k) = k mod N。如果键的分布是随机且均匀的，且哈希表大小 N 适当选择为一个素数，那么哈希冲突的概率会很小。</li></ul><h2 id="哈希冲突-hash-collision"><a class="markdownIt-Anchor" href="#哈希冲突-hash-collision"></a> 哈希冲突 (Hash Collision)</h2><h3 id="分离链接法-separate-chaining"><a class="markdownIt-Anchor" href="#分离链接法-separate-chaining"></a> 分离链接法 (Separate Chaining)</h3><p>当多个键被映射到同一个槽位时，它们会被依次存储在该槽位的链表中。</p><ul><li><p><strong>装载因子</strong>：α = n/m，反映哈希表&quot;满&quot;的程度。保持装载因子 α 小于某个常数（例如 0.75）。在哈希表过满时，应该进行扩容（Rehashing），以降低装载因子，减少链表的长度。</p></li><li><p><strong>复杂度</strong>：</p><ol><li><strong>get()</strong>：查找时间为 O(1)（计算哈希值）+ 遍历链表 O(α) -&gt; O(1 + α)。</li><li><strong>put()</strong>：通常在链表的头部进行（或尾部，取决于实现）O(1)。最坏情况 O(n)，如果键已经存在，我们需要替换与之关联的值。</li><li><strong>remove()</strong>：查找 O(1 + α) + 删除 O(1) -&gt; O(1 + α)。</li></ol></li></ul><h3 id="线性探测法-linear-probing"><a class="markdownIt-Anchor" href="#线性探测法-linear-probing"></a> 线性探测法 (Linear Probing)</h3><p>使用开放定址法，发生碰撞时，按线性顺序找到下一个空位来存放这个键。</p><ul><li><p><strong>优点</strong>：无需附加空间（指针、链表、溢出区）。</p></li><li><p><strong>缺点</strong>：耗费时间大于 O(1)，主簇问题（Primary Clustering）。</p></li><li><p><strong>复杂度</strong>：</p><ol><li><strong>get()</strong>：<ul><li>α &lt; 1 时：O(1)，当哈希表中的空槽位多时（即装载因子小），大部分插入操作都能在第一次探测或很少几次探测内找到一个空槽位。</li><li>α ≈ 1 时：O(n)，当装载因子接近 1 时（几乎所有槽位都被占用），插入和查找操作可能需要遍历整个哈希表来找到一个空槽位。</li></ul></li><li><strong>put()</strong>：同 get()。</li><li><strong>remove()</strong>：同 get()。</li></ol></li></ul><h3 id="布谷鸟散列-cuckoo-hashing"><a class="markdownIt-Anchor" href="#布谷鸟散列-cuckoo-hashing"></a> 布谷鸟散列 (Cuckoo Hashing)</h3><p>Cuckoo Hashing 的名字来源于布谷鸟的筑巢行为：当布谷鸟把卵产在其他鸟的巢中时，原来的鸟卵会被挤出去。</p><ul><li><p><strong>驱逐机制（Eviction）</strong>：当一个元素要插入哈希表时冲突，新的元素会挤掉旧的元素，旧的元素将被重新插入到另一个表 T2。如果 T2 的槽位也被占用，重复这个过程，可能会产生一连串的&quot;踢出和重新插入&quot;操作。</p></li><li><p><strong>查找和删除</strong>：</p><ol><li><strong>get()</strong>：O(1)，只需要检查两个可能的位置。</li><li><strong>put()</strong>：最坏情况时间复杂度为 O(n)，但平均情况下是 O(1)。</li><li><strong>remove()</strong>：O(1)，只需要检查两个可能的位置。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python相关①</title>
      <link href="/d622c20f.html"/>
      <url>/d622c20f.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/d622c20f.html" title="python相关①">python相关①</a></li><li><a href="/4c14993.html" title="python相关⓪">python相关⓪</a></li></ol><h3 id="print函数"><a class="markdownIt-Anchor" href="#print函数"></a> <code>print</code>函数</h3><ol><li><p><strong><code>print</code>函数的基本用法</strong>：</p><ul><li><code>print</code>函数用于在屏幕上显示信息。</li><li>基本语法：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(arg1, arg2, arg3, ...)</span><br></pre></td></tr></table></figure></li><li>示例：输出字符串 <code>&quot;Hello, World!&quot;</code>：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>打印多个信息</strong>：</p><ul><li>可以通过逗号分隔多个数据来打印：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Temperature:&quot;</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>打印变量</strong>：</p><ul><li>也可以显示变量的值：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Temperature is&quot;</span>, temp, <span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>格式化字符串（Formatted Strings）</strong>：</p><ul><li><p>Python 提供了格式化字符串语法，可以直接在字符串中嵌入变量名。格式化字符串以 <code>f</code> 开头，并使用花括号 <code>&#123;&#125;</code> 包围变量名：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Centigrade: <span class="subst">&#123;C&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Centigrade: <span class="subst">&#123;C:<span class="number">.2</span>f&#125;</span> <span class="subst">&#123;C:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Centigrade: <span class="subst">&#123;<span class="built_in">int</span>(C)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>在字符串中使用 <code>&#123;&#125;</code> 占位符，然后在字符串前加上 <code>f</code>，并在 <code>&#123;&#125;</code> 中写入变量名。</li><li>输出结果为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Centigrade: 23</span><br><span class="line">Centigrade: 23.00 23.0000</span><br><span class="line">Centigrade: 23</span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他的格式化</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: %d&quot;</span> % (C)) <span class="comment">#这个是格式化输出 %d就是整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: %f&quot;</span> % (C)) <span class="comment">#这个是格式化输出 %f就是浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: %.2f&quot;</span> % (C)) <span class="comment">#%.2f就是浮点数保留两位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: %f %d&quot;</span> % (C,C)) <span class="comment">#如果有多个参数，就用逗号隔开</span></span><br></pre></td></tr></table></figure><ul><li><code>:.2f</code> 表示保留两位小数。</li><li><code>%d</code> 表示整数，<code>%f</code> 表示浮点数。</li><li>输出结果为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Centigrade: 23</span><br><span class="line">Centigrade: 23.000000</span><br><span class="line">Centigrade: 23.00</span><br><span class="line">Centigrade: 23.000000 23</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>.format()</code> 方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: &#123;:f&#125; &#123;:f&#125;&quot;</span>.<span class="built_in">format</span>(C,C))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: &#123;:d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(C)))</span><br></pre></td></tr></table></figure><ul><li>在字符串中使用 <code>&#123;&#125;</code> 占位符，然后使用 <code>.format()</code> 方法传递变量。</li></ul></li></ul></li><li><p><strong>字符串（Strings）</strong>：</p><ul><li>在 Python 中，字符串必须用成对的单引号 <code>'</code> 或双引号 <code>&quot;</code> 包围：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello world!&quot;</span>)  <span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello world!&quot;)  # 这种写法将会报错</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>字符串中的特殊字符</strong>：</p><ul><li>可以使用转义序列在字符串中包含特殊字符，例如，<code>\n</code> 表示换行：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello\nworld!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>输出结果为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>改变结束字符（End Character）</strong>：</p><ul><li>默认情况下，Python 会在每个 <code>print</code> 语句后添加一个新行。可以使用 <code>end</code> 参数来改变这一行为：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aaa&quot;</span>, end=<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bbb&quot;</span>, end=<span class="string">&quot;-&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>输出结果为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa-bbb-</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>改变分隔符（Separator）</strong>：</p><ul><li>默认情况下，Python 会使用空格分隔每个参数。可以使用 <code>sep</code> 参数来改变这个分隔符：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade:&quot;</span>, C)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade:&quot;</span>, C, sep=<span class="string">&#x27; &#x27;</span>) <span class="comment">#默认是空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade:&quot;</span>, C, sep=<span class="string">&#x27;&#x27;</span>) <span class="comment">#没有空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade:&quot;</span>, C, sep=<span class="string">&#x27;😅&#x27;</span>) <span class="comment">#一个 emoji</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Centigrade: &quot;</span>, C) <span class="comment">#这个就会多一个空格</span></span><br></pre></td></tr></table></figure><ul><li>输出结果为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Centigrade: 23</span><br><span class="line">Centigrade: 23</span><br><span class="line">Centigrade:23</span><br><span class="line">Centigrade:😅23</span><br><span class="line">Centigrade:  23</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>填充数字</strong>：</p><ul><li>可以使用 <code>str.format()</code> 方法来填充数字：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:04d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">12</span>)) <span class="comment">#填充0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">12</span>:04d&#125;</span>&quot;</span>) <span class="comment">#填充0</span></span><br><span class="line"><span class="comment"># 还可以填充空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:4d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">12</span>:4d&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>输出结果为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0012</span><br><span class="line">0012</span><br><span class="line">  12</span><br><span class="line">  12</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="变量命名规则"><a class="markdownIt-Anchor" href="#变量命名规则"></a> 变量命名规则</h3><ol><li><p><strong>Python 中的变量使用</strong>：</p><ul><li>在 Python 中，变量用于存储数据。可以将变量视为信息的标签。</li><li>创建变量的基本语法：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">variableName = data</span><br></pre></td></tr></table></figure></li><li>例如，如果想用标签 <code>mile</code> 存储数字 <code>30</code>，可以写成：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mile = <span class="number">30</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>变量名的命名规则</strong>：</p><ul><li>变量名必须遵循以下规则：<ul><li>以字母或下划线（<code>_</code>）开头：<ul><li>合法示例：<code>mile</code>, <code>Mile</code>, <code>_mile</code></li><li>非法示例：<code>12mile</code>, <code>$$Mile</code></li></ul></li><li>仅包含字母、数字或下划线，不能包含空格：<ul><li>合法示例：<code>mile12</code>, <code>Mil_e_44</code>, <code>_mile_to_km</code></li><li>非法示例：<code>mile to km</code>, <code>mile-&gt;km</code></li></ul></li></ul></li></ul></li><li><p><strong>变量名的大小写敏感性</strong>：</p><ul><li>变量名是区分大小写的，例如：<code>MyName</code> 和 <code>myname</code> 是不同的变量。</li></ul></li><li><p><strong>Python 变量命名的通用规则</strong>：</p><ul><li>变量名可以是任何合法的标识符，只要不以数字开头、不包含非法字符、也不与 Python 的保留关键字重名。</li><li>如果违反这些规则，会引发 <code>SyntaxError</code>（语法错误）。</li><li><a href="https://peps.python.org/pep-0008/#naming-conventions">PEP-8: 命名规范</a> 提供了一套程序员应遵循的命名规则，这些规则有助于提高代码的可读性。</li></ul></li><li><p><strong>命名建议</strong>：</p><ul><li>避免使用已经作为 Python 对象存在的变量名，因为这些名称已绑定到现有的 Python 变量或函数。</li><li>变量名应该全部使用小写字母，并且（如果有空格）应以下划线 <code>_</code> 代替。例如：<code>first_name</code>，<code>last_name</code>，<code>cat_happiness</code>。</li><li>变量名应能够描述其表示的值，确保名称的直观性和可读性。</li></ul></li></ol><h3 id="数据类型及操作"><a class="markdownIt-Anchor" href="#数据类型及操作"></a> 数据类型及操作</h3><ol><li><p><strong>常见的数据类型</strong>：</p><ul><li><strong>整数（Integer）</strong>：表示整数值。<ul><li>示例：<code>100</code>, <code>-50</code></li></ul></li><li><strong>浮点数（Float）</strong>：表示小数值。<ul><li>示例：<code>3.14</code>, <code>-2.5</code></li></ul></li><li><strong>字符串（String）</strong>：表示字符序列，如单词或句子。<ul><li>示例：<code>&quot;hello&quot;</code>, <code>&quot;Python&quot;</code></li></ul></li><li><strong>布尔值（Boolean）</strong>：表示两个值之一：<code>True</code> 或 <code>False</code>。</li></ul></li><li><p><strong>运算</strong>：</p><ul><li><p><strong>算术运算</strong>：</p><ul><li>加法：<code>+</code></li><li>减法：<code>-</code></li><li>乘法：<code>*</code></li><li>除法：<code>/</code></li><li>⚠️：除法运算结果为浮点数。</li><li>取余：<code>%</code></li><li>幂运算：<code>**</code></li><li>整除：<code>//</code></li><li>⚠️：整除运算结果为整数。</li></ul></li><li><p><strong>比较运算</strong>：</p><ul><li>等于：<code>==</code></li><li>⚠️：<code>=</code> 是赋值运算符，<code>==</code> 是比较运算符。</li><li>不等于：<code>!=</code></li><li>大于：<code>&gt;</code></li><li>小于：<code>&lt;</code></li><li>大于等于：<code>&gt;=</code></li><li>小于等于：<code>&lt;=</code></li></ul></li><li><p><strong>逻辑运算</strong>：</p><ul><li>与：<code>and</code> F and T = F</li><li>或：<code>or</code> F or T = T</li><li>非：<code>not</code></li><li>优先级：<code>not</code> &gt; <code>and</code> &gt; <code>or</code></li><li>⚠️：逻辑运算符返回布尔值。</li></ul></li></ul></li><li><p><strong>类型转换</strong>：</p><ul><li><strong>整数转换</strong>：使用 <code>int()</code> 函数。<ul><li>示例：<code>int(3.14)</code>，<code>int(&quot;100&quot;)</code></li></ul></li><li><strong>浮点数转换</strong>：使用 <code>float()</code> 函数。<ul><li>示例：<code>float(100)</code>，<code>float(&quot;3.14&quot;)</code></li></ul></li><li><strong>字符串转换</strong>：使用 <code>str()</code> 函数。<ul><li>示例：<code>str(100)</code>，<code>str(3.14)</code></li></ul></li><li>⚠️：如果字符串不能转换为数字，会引发 <code>ValueError</code> 异常。</li><li>以下是几种常见的报错：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="number">3.14</span>)  <span class="comment"># 3 不会四舍五入，直接截断 3.14 -&gt; 3</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&quot;3.14&quot;</span>)  <span class="comment"># ValueError: invalid literal for int() with base 10: &#x27;3.14&#x27;</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&quot;hello&quot;</span>)  <span class="comment"># ValueError: invalid literal for int() with base 10: &#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">float</span>(<span class="number">3</span>)  <span class="comment"># 3.0</span></span><br><span class="line"><span class="built_in">float</span>(<span class="string">&quot;3.14&quot;</span>)  <span class="comment"># 3.14</span></span><br><span class="line"><span class="built_in">float</span>(<span class="string">&quot;hello&quot;</span>)  <span class="comment"># ValueError: could not convert string to float: &#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">3.14</span>)  <span class="comment"># &#x27;3.14&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="comment注释"><a class="markdownIt-Anchor" href="#comment注释"></a> <code>comment</code>注释</h3><ul><li><p>在 Python 中，注释用于解释代码，提高代码的可读性。</p></li><li><p>单行注释以 <code>#</code> 开头：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a comment</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释使用三个单引号 <code>'''</code> 或三个双引号 <code>&quot;&quot;&quot;</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">This is a</span></span><br><span class="line"><span class="string">multiline</span></span><br><span class="line"><span class="string">comment</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释可以当做变量使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">comment = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> This is a</span></span><br><span class="line"><span class="string"> multiline</span></span><br><span class="line"><span class="string"> comment</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"> <span class="built_in">print</span>(comment)</span><br></pre></td></tr></table></figure><p>注意里面的引号位置导致的换行<br /><img src="../attach/Pasted%20image%2020240912194549.png" alt="" /></p></li><li><p>多行注释也可以作为文档字符串（docstring）。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   This is a docstring</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python相关⓪</title>
      <link href="/4c14993.html"/>
      <url>/4c14993.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/d622c20f.html" title="python相关①">python相关①</a></li><li><a href="/4c14993.html" title="python相关⓪">python相关⓪</a></li></ol><h2 id="一些符号的英文名"><a class="markdownIt-Anchor" href="#一些符号的英文名"></a> 一些符号的英文名</h2><table><thead><tr><th style="text-align:center">符号中文名</th><th style="text-align:center">符号</th><th style="text-align:center">符号英文名</th></tr></thead><tbody><tr><td style="text-align:center">星号</td><td style="text-align:center"><code>*</code></td><td style="text-align:center">star</td></tr><tr><td style="text-align:center">冒号</td><td style="text-align:center"><code>:</code></td><td style="text-align:center">colon</td></tr><tr><td style="text-align:center">逗号</td><td style="text-align:center"><code>,</code></td><td style="text-align:center">comma</td></tr><tr><td style="text-align:center">问号</td><td style="text-align:center"><code>?</code></td><td style="text-align:center">question mark</td></tr><tr><td style="text-align:center">感叹</td><td style="text-align:center"><code>!</code></td><td style="text-align:center">exclamation mark</td></tr><tr><td style="text-align:center">圆括号</td><td style="text-align:center"><code>()</code></td><td style="text-align:center">parentheses / round brackets</td></tr><tr><td style="text-align:center">方括号</td><td style="text-align:center"><code>[]</code></td><td style="text-align:center">brackets / square brackets</td></tr><tr><td style="text-align:center">花括号</td><td style="text-align:center"><code>&#123;&#125;</code></td><td style="text-align:center">braces / curly brackets</td></tr><tr><td style="text-align:center">尖括号</td><td style="text-align:center"><code>&lt;&gt;</code></td><td style="text-align:center">angle brackets / chevrons</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记④</title>
      <link href="/1385a370.html"/>
      <url>/1385a370.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W5</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="优先队列-priority-queue"><a class="markdownIt-Anchor" href="#优先队列-priority-queue"></a> 优先队列 (Priority Queue)</h2><ul><li><p><strong>定义</strong>：优先队列是一种抽象数据类型，支持插入元素和删除最大（最小）元素的操作。优先队列的元素具有优先级，每次删除操作都会删除优先级最高的元素。</p></li><li><p><strong>操作方法</strong>：</p><ul><li><code>insert(k, v)</code>：插入键为 k，值为 v 的项。</li><li><code>remove_min()</code>：删除并返回具有最小键的项。</li><li><code>min()</code>：返回具有最小键的项但不删除。</li><li><code>size()</code>：返回队列中存储的项数。</li><li><code>is_empty()</code>：检查队列是否为空。</li></ul></li></ul><h2 id="优先队列的实现方法"><a class="markdownIt-Anchor" href="#优先队列的实现方法"></a> 优先队列的实现方法</h2><h3 id="基于无序序列的优先队列-unsorted-list-implementation"><a class="markdownIt-Anchor" href="#基于无序序列的优先队列-unsorted-list-implementation"></a> 基于无序序列的优先队列 (Unsorted List Implementation)</h3><ul><li><strong>插入操作 (insert)</strong>：时间复杂度为 O(1)，可以将项插入序列的开头或结尾。</li><li><strong>删除最小项和查找最小项 (remove_min and min)</strong>：时间复杂度为 O(n)，因为必须遍历整个列表以找到最小的键。</li></ul><h3 id="基于有序序列的优先队列-sorted-list-implementation"><a class="markdownIt-Anchor" href="#基于有序序列的优先队列-sorted-list-implementation"></a> 基于有序序列的优先队列 (Sorted List Implementation)</h3><ul><li><strong>插入操作 (insert)</strong>：时间复杂度为 O(n)，需要找到适合插入的位置。</li><li><strong>删除最小项和查找最小项 (remove_min and min)</strong>：时间复杂度为 O(1)，最小项总是位于列表的开头。</li></ul><h2 id="优先队列排序-priority-queue-sorting"><a class="markdownIt-Anchor" href="#优先队列排序-priority-queue-sorting"></a> 优先队列排序 (Priority Queue Sorting)</h2><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h3><ol><li>逐个将键插入到空的优先队列中。</li><li>逐个调用 <code>remove_min()</code> 以获取按顺序排列的键。</li></ol><h3 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h3><ul><li>n 次插入操作。</li><li>n 次 <code>remove_min()</code> 操作。</li><li>对于基于序列的实现方法，总时间复杂度为 O(n²)。</li></ul><h3 id="选择排序-selection-sort"><a class="markdownIt-Anchor" href="#选择排序-selection-sort"></a> 选择排序 (Selection Sort)</h3><ul><li><p><strong>选择排序的原理</strong>：</p><ul><li>通过无序序列的优先队列实现。</li><li>插入 n 个元素需要 O(n) 时间。</li><li>删除 n 个元素需要 O(n²) 时间。</li></ul></li><li><p><strong>选择排序的特点</strong>：</p><ul><li>可以原地进行，不需要额外空间。</li></ul></li><li><p><strong>伪代码</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">A</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(A)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 找到最小的元素</span></span><br><span class="line">        s = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">            <span class="keyword">if</span> A[j] &lt; A[s]:</span><br><span class="line">                s = j</span><br><span class="line">        <span class="comment"># 交换A[i]和A[s]</span></span><br><span class="line">        A[i], A[s] = A[s], A[i]</span><br></pre></td></tr></table></figure></li></ul><h3 id="插入排序-insertion-sort"><a class="markdownIt-Anchor" href="#插入排序-insertion-sort"></a> 插入排序 (Insertion Sort)</h3><ul><li><p><strong>插入排序的原理</strong>：</p><ul><li>通过有序序列的优先队列实现。</li><li>插入 n 个元素需要 O(n²) 时间。</li><li>删除 n 个元素需要 O(n) 时间。</li></ul></li><li><p><strong>伪代码</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">A</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(A)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        x = A[i]</span><br><span class="line">        <span class="comment"># 将大于x的元素向前移动</span></span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> A[j-<span class="number">1</span>] &gt; x:</span><br><span class="line">            A[j] = A[j-<span class="number">1</span>]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        A[j] = x</span><br></pre></td></tr></table></figure></li></ul><h2 id="堆-heap"><a class="markdownIt-Anchor" href="#堆-heap"></a> 堆 (Heap)</h2><p>堆的定义：</p><p>堆是一种二叉树，用于存储键-值对，并满足以下两个性质：</p><ul><li><strong>堆序性质 (Heap-Order Property)</strong>：每个节点的键大于等于其父节点的键。</li><li><strong>完全二叉树 (Complete Binary Tree)</strong>：除了最后一层，其余所有层都是满的，最后一层的节点从左至右填充。</li></ul><p>堆排序 (Heap Sort)：</p><p>使用堆实现优先队列排序，时间复杂度为 O(nlogn)。</p><p>插入到堆 (Insertion into a Heap)：</p><ul><li><strong>上浮操作 (Upheap)</strong>：插入新节点后，通过向上交换恢复堆序性质。时间复杂度为 O(logn)。</li></ul><p>从堆中删除最小项 (Remove Min from a Heap)：</p><ul><li><strong>下沉操作 (Downheap)</strong>：删除根节点后，通过向下交换恢复堆序性质。时间复杂度为 O(logn)。</li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><img src="../attach/Pasted%20image%2020241004154549.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记③</title>
      <link href="/648293e6.html"/>
      <url>/648293e6.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W4</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="二叉搜索树binary-search-tree"><a class="markdownIt-Anchor" href="#二叉搜索树binary-search-tree"></a> 二叉搜索树（Binary Search Tree）</h2><ul><li><p><strong>定义</strong>：二叉搜索树（Binary Search Tree，BST）是一种二叉树，存储键或键值对，满足以下性质：</p><ul><li>对于每个节点 v，其左子树中的所有节点的键值都小于 v 的键值。</li><li>其右子树中的所有节点的键值都大于 v 的键值。</li><li>中序遍历 (Inorder Traversal) 二叉搜索树将会以递增顺序访问键值。</li></ul></li><li><p><strong>特点</strong>：任意节点 v 的左子树节点值均小于 v，右子树节点值均大于 v。搜索、插入、删除操作的时间复杂度与树的高度相关。</p></li></ul><h2 id="二叉搜索树的操作"><a class="markdownIt-Anchor" href="#二叉搜索树的操作"></a> 二叉搜索树的操作</h2><h3 id="1-搜索search"><a class="markdownIt-Anchor" href="#1-搜索search"></a> 1. 搜索（Search）</h3><p>从根节点开始，沿着树向下遍历，依次比较要查找的键 k 与当前节点的键值：</p><ul><li>如果 k 小于当前节点的键值，继续递归搜索左子树。</li><li>如果 k 大于当前节点的键值，继续递归搜索右子树。</li><li>如果找到外部节点（空节点），则说明树中没有该键。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">k, v</span>): </span><br><span class="line">    <span class="keyword">if</span> v.isExternal():</span><br><span class="line">        <span class="keyword">return</span> v  <span class="comment"># 失败的搜索</span></span><br><span class="line">    <span class="keyword">if</span> k == key(v):</span><br><span class="line">        <span class="keyword">return</span> v  <span class="comment"># 成功的搜索</span></span><br><span class="line">    <span class="keyword">elif</span> k &lt; key(v):</span><br><span class="line">        <span class="keyword">return</span> search(k, v.left)  <span class="comment"># 递归搜索左子树</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> search(k, v.right)  <span class="comment"># 递归搜索右子树</span></span><br></pre></td></tr></table></figure><h3 id="2-插入insertion"><a class="markdownIt-Anchor" href="#2-插入insertion"></a> 2. 插入（Insertion）</h3><p>首先按照搜索的方式找到适合插入的外部节点 w。替换该外部节点，创建一个新的内部节点以存储键值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">k, v</span>):</span><br><span class="line">    w = search(k, root)</span><br><span class="line">    <span class="keyword">if</span> w.isExternal():</span><br><span class="line">        replace w <span class="keyword">with</span> internal node holding (k, o)</span><br></pre></td></tr></table></figure><h3 id="3-删除deletion"><a class="markdownIt-Anchor" href="#3-删除deletion"></a> 3. 删除（Deletion）</h3><p>需要先找到要删除的节点 w。删除分为两种情况：</p><ul><li>情况1： 如果 w 有一个外部子节点，直接移除该节点并提升另一个子节点的位置。</li><li>情况2： 如果 w 有两个内部子节点，需要找到后继节点（右子树中键值最小的节点），替换内容并移除该后继节点。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">k</span>): </span><br><span class="line">    w = search(k, root)</span><br><span class="line">    <span class="keyword">if</span> w.isExternal():</span><br><span class="line">        <span class="keyword">return</span> null  <span class="comment"># 找不到该键</span></span><br><span class="line">    <span class="keyword">elif</span> w has one external child:</span><br><span class="line">        remove external child z, promote other child</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = immediate successor of w</span><br><span class="line">        replace w <span class="keyword">with</span> y, remove y <span class="keyword">as</span> above</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的时间复杂度"><a class="markdownIt-Anchor" href="#二叉搜索树的时间复杂度"></a> 二叉搜索树的时间复杂度</h3><p>二叉搜索树的操作时间复杂度与树的高度 h 成正比：</p><ul><li>最坏情况： 当树退化成链表时，树的高度为 n，时间复杂度为 O(n)。</li><li>最好情况： 树是平衡的，高度为 O(logn)，操作的时间复杂度为 O(logn)。</li></ul><p>因此，二叉搜索树在平衡的情况下，搜索、插入和删除操作都可以在 O(logn) 时间内完成，但在最坏情况下可能退化为 O(n)。</p><h3 id="区间查询range-query"><a class="markdownIt-Anchor" href="#区间查询range-query"></a> 区间查询（Range Query）</h3><p>区间查询的目的是在二叉搜索树中找到所有键值在给定区间 [k1, k2] 之间的节点，并将它们按顺序输出。通常，区间查询涉及遍历树的某些部分，并跳过那些不可能包含目标值的分支，以减少遍历的工作量。</p><h4 id="区间查询的工作原理"><a class="markdownIt-Anchor" href="#区间查询的工作原理"></a> 区间查询的工作原理</h4><p>由于二叉搜索树的结构特性（左子树节点的键值小于根节点，右子树节点的键值大于根节点），我们可以通过以下方法来高效地查找范围内的所有节点。</p><ol><li><p><strong>基本思想</strong></p><ul><li>当当前节点的键值小于 k1 时，意味着该节点和它的左子树中的所有节点的键值都小于 k1，因此我们可以忽略左子树，直接继续在右子树中查找。</li><li>当当前节点的键值大于 k2 时，意味着该节点和它的右子树中的所有节点的键值都大于 k2，因此我们可以忽略右子树，直接在左子树中查找。</li><li>如果当前节点的键值在 [k1, k2] 范围内，那么这个节点就是一个有效节点，我们可以将其输出，并继续递归地在它的左右子树中查找。</li></ul></li><li><p><strong>区间查询的伪代码</strong></p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">range_query</span>(<span class="params">node, k1, k2, result</span>):</span><br><span class="line">    <span class="comment"># 如果节点为空，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果当前节点的键值大于 k1，则它的左子树可能包含符合条件的节点</span></span><br><span class="line">    <span class="keyword">if</span> node.key &gt; k1:</span><br><span class="line">        range_query(node.left, k1, k2, result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果当前节点的键值在 k1 和 k2 之间，输出该节点</span></span><br><span class="line">    <span class="keyword">if</span> k1 &lt;= node.key &lt;= k2:</span><br><span class="line">        result.append(node.key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果当前节点的键值小于 k2，则它的右子树可能包含符合条件的节点</span></span><br><span class="line">    <span class="keyword">if</span> node.key &lt; k2:</span><br><span class="line">        range_query(node.right, k1, k2, result)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>时间复杂度分析</strong><ul><li>最优情况下（即树是平衡的，且区间较小），只需遍历树的一部分，时间复杂度为 O(logn + k)，其中 n 是树中的节点数，k 是返回的符合条件的节点数量。</li><li>最坏情况下（例如，树退化为链表或区间很大），需要遍历树的每个节点，时间复杂度为 O(n)。</li></ul></li></ol><h2 id="avl-树-adelson-velsky-and-landis-tree"><a class="markdownIt-Anchor" href="#avl-树-adelson-velsky-and-landis-tree"></a> AVL 树 (Adelson-Velsky and Landis Tree)</h2><p>AVL树是一种自平衡二叉搜索树，通过严格控制树的高度来确保高效的查找、插入和删除操作。它以两位发明者Adelson-Velsky和Landis的名字命名。下面是AVL树的详细介绍：</p><h3 id="1-avl树的定义"><a class="markdownIt-Anchor" href="#1-avl树的定义"></a> 1. AVL树的定义</h3><ul><li><p><strong>二叉搜索树 (BST) 特性</strong>：</p><ul><li>左子树中所有节点的值都小于当前节点的值。</li><li>右子树中所有节点的值都大于当前节点的值。</li></ul></li><li><p><strong>平衡因子 (Balance Factor)</strong>：</p><ul><li>对于任意一个节点，平衡因子定义为该节点的左子树高度与右子树高度的差值：</li><li>平衡因子 = 左子树的高度 - 右子树的高度</li><li>一个AVL树的每个节点的平衡因子必须是 -1、0 或 1。如果某个节点的平衡因子不在此范围内，树就不再平衡，需要通过旋转操作恢复平衡。</li></ul></li></ul><h3 id="2-avl树的操作"><a class="markdownIt-Anchor" href="#2-avl树的操作"></a> 2. AVL树的操作</h3><h4 id="插入操作-insertion"><a class="markdownIt-Anchor" href="#插入操作-insertion"></a> 插入操作 (Insertion)</h4><p>AVL树的插入操作和普通的二叉搜索树相同，但插入后可能导致某些节点的平衡因子超出范围，因此需要进行旋转操作来重新平衡树。</p><ul><li><strong>步骤</strong>：<ol><li>按照二叉搜索树的规则插入新节点。</li><li>从插入节点开始向上回溯，更新每个祖先节点的平衡因子。</li><li>一旦某个祖先节点的平衡因子超出范围（即平衡因子不是 -1、0、1），需要对该节点进行旋转操作。</li></ol></li></ul><h4 id="旋转操作-rotations"><a class="markdownIt-Anchor" href="#旋转操作-rotations"></a> 旋转操作 (Rotations)</h4><p>AVL树的关键在于通过旋转来恢复平衡。有四种旋转操作：</p><ul><li><p><strong>单右旋转 (Right Rotation, RR)</strong>：</p><ul><li>发生在左子树高度超过右子树时。</li><li>通过旋转将右子树的高度提升，恢复平衡。</li></ul></li><li><p><strong>单左旋转 (Left Rotation, LL)</strong>：</p><ul><li>发生在右子树高度超过左子树时。</li><li>通过旋转将左子树的高度提升，恢复平衡。</li></ul></li><li><p><strong>左-右旋转 (Left-Right Rotation, LR)</strong>：</p><ul><li>先对左子树进行左旋转，然后再对根节点进行右旋转。</li></ul></li><li><p><strong>右-左旋转 (Right-Left Rotation, RL)</strong>：</p><ul><li>先对右子树进行右旋转，然后再对根节点进行左旋转。</li></ul></li></ul><h4 id="删除操作-deletion"><a class="markdownIt-Anchor" href="#删除操作-deletion"></a> 删除操作 (Deletion)</h4><p>AVL树的删除操作和普通的二叉搜索树相同，但删除后也可能导致树失衡，因此需要进行旋转来重新平衡树。</p><ul><li><strong>步骤</strong>：<ol><li>按照二叉搜索树的规则找到要删除的节点并删除它。</li><li>从删除节点的父节点开始，向上回溯，更新每个祖先节点的平衡因子。</li><li>一旦某个祖先节点的平衡因子超出范围，进行旋转操作恢复平衡。</li></ol></li></ul><h3 id="3-时间复杂度"><a class="markdownIt-Anchor" href="#3-时间复杂度"></a> 3. 时间复杂度</h3><p>由于AVL树是严格平衡的，树的高度最多为 O(logn)，因此各种操作（如查找、插入和删除）的时间复杂度都是 O(logn)。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记②</title>
      <link href="/fd8bc25c.html"/>
      <url>/fd8bc25c.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W3</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="树-tree"><a class="markdownIt-Anchor" href="#树-tree"></a> 树 (Tree)</h2><p>在计算机科学中，树是一种抽象的层次结构模型。树结构由节点组成，并且这些节点之间具有父子关系。以下是一些常见的树的术语及其解释：</p><p><img src="../attach/Pasted%20image%2020240825140434.png" alt="" /></p><h3 id="根节点-root"><a class="markdownIt-Anchor" href="#根节点-root"></a> 根节点 (Root)</h3><p>没有父节点的节点。例如，节点 A 是根节点。</p><h3 id="内部节点-internal-node"><a class="markdownIt-Anchor" href="#内部节点-internal-node"></a> 内部节点 (Internal Node)</h3><p>至少有一个子节点的节点。例如，节点 A、B、C 和 F 都是内部节点。</p><h3 id="外部节点叶子节点-external-node-leaf-node"><a class="markdownIt-Anchor" href="#外部节点叶子节点-external-node-leaf-node"></a> 外部节点/叶子节点 (External Node / Leaf Node)</h3><p>没有子节点的节点。例如，节点 E、I、J、K、G、H 和 D 都是叶子节点。</p><h3 id="祖先节点-ancestors"><a class="markdownIt-Anchor" href="#祖先节点-ancestors"></a> 祖先节点 (Ancestors)</h3><p>包括父节点、祖父节点、曾祖父节点等。例如，节点 F 的祖先是 A 和 B。</p><h3 id="后代节点-descendants"><a class="markdownIt-Anchor" href="#后代节点-descendants"></a> 后代节点 (Descendants)</h3><p>包括子节点、孙节点、曾孙节点等。例如，节点 B 的后代包括 E、F、I、J 和 K。</p><h3 id="兄弟节点-siblings"><a class="markdownIt-Anchor" href="#兄弟节点-siblings"></a> 兄弟节点 (Siblings)</h3><p>具有相同父节点的两个节点。例如，节点 B 和 D 是兄弟节点。</p><h3 id="深度-depth"><a class="markdownIt-Anchor" href="#深度-depth"></a> 深度 (Depth)</h3><p>从根节点到某个节点的路径上的边数。例如，节点 F 的深度为 2。</p><h3 id="层级-level"><a class="markdownIt-Anchor" href="#层级-level"></a> 层级 (Level)</h3><p>具有相同深度的一组节点。例如，{E, F, G, H} 处于层级 2。</p><h3 id="高度-height"><a class="markdownIt-Anchor" href="#高度-height"></a> 高度 (Height)</h3><p>树的最大深度。例如，这棵树的高度为 3。</p><p><img src="../attach/Pasted%20image%2020240825140510.png" alt="" /></p><h3 id="子树-subtree"><a class="markdownIt-Anchor" href="#子树-subtree"></a> 子树 (Subtree)</h3><p>由某个节点及其所有后代构成的树。例如，以节点 C 为根的子树包括 {C, G, H}。</p><h3 id="边-edge"><a class="markdownIt-Anchor" href="#边-edge"></a> 边 (Edge)</h3><p>连接两个节点（父节点和子节点）的线段。例如，(B, F) 是一条边。</p><h3 id="路径-path"><a class="markdownIt-Anchor" href="#路径-path"></a> 路径 (Path)</h3><p>由节点序列构成的，序列中相邻的两个节点有边连接。例如，路径 <code>&lt;E, B, F, J&gt;</code>。</p><p>这些术语构成了理解树结构的基础，有助于进一步讨论树的性质和操作。</p><h2 id="树的抽象数据类型-tree-adt"><a class="markdownIt-Anchor" href="#树的抽象数据类型-tree-adt"></a> 树的抽象数据类型 (Tree ADT)</h2><p>树的抽象数据类型（ADT）定义了一组操作和方法，用于操作树结构中的节点。以下是树 ADT 的一些关键操作和方法：</p><h3 id="通用方法-generic-methods"><a class="markdownIt-Anchor" href="#通用方法-generic-methods"></a> 通用方法 (Generic Methods)</h3><ul><li><code>integer size()</code>：返回树中节点的数量。</li><li><code>boolean isEmpty()</code>：检查树是否为空。</li><li><code>Iterator iterator()</code>：返回一个用于遍历树的迭代器。</li><li><code>Iterable positions()</code>：返回树中所有节点的位置的集合。</li></ul><h3 id="访问方法-access-methods"><a class="markdownIt-Anchor" href="#访问方法-access-methods"></a> 访问方法 (Access Methods)</h3><ul><li><code>Position root()</code>：返回树的根节点位置。</li><li><code>Position parent(p)</code>：返回节点 <code>p</code> 的父节点位置。</li><li><code>Iterable children(p)</code>：返回节点 <code>p</code> 的所有子节点位置的集合。</li><li><code>Integer numChildren(p)</code>：返回节点 <code>p</code> 的子节点数量。</li></ul><h3 id="查询方法-query-methods"><a class="markdownIt-Anchor" href="#查询方法-query-methods"></a> 查询方法 (Query Methods)</h3><ul><li><code>boolean isInternal(p)</code>：检查节点 <code>p</code> 是否为内部节点。</li><li><code>boolean isExternal(p)</code>：检查节点 <code>p</code> 是否为叶子节点。</li><li><code>boolean isRoot(p)</code>：检查节点 <code>p</code> 是否为根节点。</li></ul><h3 id="更新方法-update-methods"><a class="markdownIt-Anchor" href="#更新方法-update-methods"></a> 更新方法 (Update Methods)</h3><p>除了上述基本方法外，某些数据结构实现树 ADT 时还可能定义额外的更新方法，以支持更复杂的操作。</p><h3 id="节点对象-node-object"><a class="markdownIt-Anchor" href="#节点对象-node-object"></a> 节点对象 (Node Object)</h3><p>节点对象的实现通常具有以下属性：</p><ul><li><code>value</code>：与该节点关联的值。</li><li><code>children</code>：该节点的子节点集合或列表。</li><li><code>parent</code>：（可选）该节点的父节点。</li></ul><h3 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_external</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="comment"># 检查节点 v 是否为叶子节点</span></span><br><span class="line">    <span class="keyword">return</span> v.children.is_empty()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_root</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="comment"># 检查节点 v 是否为根节点</span></span><br><span class="line">    <span class="keyword">return</span> v.parent <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="树的遍历-traversing-trees"><a class="markdownIt-Anchor" href="#树的遍历-traversing-trees"></a> 树的遍历 (Traversing Trees)</h2><p>树的遍历是指以一种系统的方式访问树中的所有节点。与简单的数据结构（如列表）相比，树的遍历方式更为复杂，存在多种不同的遍历策略。以下是树的主要遍历方式：</p><h3 id="先序遍历-pre-order-traversal"><a class="markdownIt-Anchor" href="#先序遍历-pre-order-traversal"></a> 先序遍历 (Pre-order Traversal)</h3><p>口诀：<strong>根左右</strong></p><p>在先序遍历中，从给定节点开始，首先访问该节点，然后依次访问其子节点。</p><ul><li><strong>特点</strong>：先访问节点本身，再访问其子节点。</li><li><strong>应用</strong>：适用于需要在处理子节点之前先处理父节点的情况。</li></ul><h4 id="示例代码-2"><a class="markdownIt-Anchor" href="#示例代码-2"></a> 示例代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order</span>(<span class="params">v</span>):</span><br><span class="line">    visit(v)  <span class="comment"># 对节点 v 进行处理</span></span><br><span class="line">    <span class="keyword">for</span> each child w of v:</span><br><span class="line">        pre_order(w)  <span class="comment"># 递归遍历子节点</span></span><br></pre></td></tr></table></figure><p><img src="../attach/Pasted%20image%2020240825140805.png" alt="" /></p><h3 id="后序遍历-post-order-traversal"><a class="markdownIt-Anchor" href="#后序遍历-post-order-traversal"></a> 后序遍历 (Post-order Traversal)</h3><p>口诀：<strong>左右根</strong></p><p>在后序遍历中，从给定节点开始，首先访问其所有子节点，然后再访问该节点本身。</p><ul><li><strong>特点</strong>：先访问子节点，再访问节点本身。</li><li><strong>应用</strong>：适用于需要在处理父节点之前先处理子节点的情况。</li></ul><h4 id="示例代码-3"><a class="markdownIt-Anchor" href="#示例代码-3"></a> 示例代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post_order</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="keyword">for</span> each child w of v:</span><br><span class="line">        post_order(w)  <span class="comment"># 递归遍历子节点</span></span><br><span class="line">    visit(v)  <span class="comment"># 对节点 v 进行处理</span></span><br></pre></td></tr></table></figure><p><img src="../attach/Pasted%20image%2020240825141238.png" alt="" /></p><h3 id="中序遍历-in-order-traversal"><a class="markdownIt-Anchor" href="#中序遍历-in-order-traversal"></a> 中序遍历 (In-order Traversal)</h3><p>口诀：<strong>左根右</strong></p><p>中序遍历仅适用于二叉树。在中序遍历中，从给定节点开始，先访问左子树，然后访问该节点本身，最后访问右子树。</p><ul><li><strong>特点</strong>：先访问左子树，再访问节点本身，最后访问右子树。</li><li><strong>应用</strong>：适用于二叉搜索树（BST）等特定情况。</li></ul><h4 id="示例代码-4"><a class="markdownIt-Anchor" href="#示例代码-4"></a> 示例代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">in_order</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="keyword">if</span> v.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        in_order(v.left)  <span class="comment"># 递归遍历左子节点</span></span><br><span class="line">    visit(v)  <span class="comment"># 对节点 v 进行处理</span></span><br><span class="line">    <span class="keyword">if</span> v.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        in_order(v.right)  <span class="comment"># 递归遍历右子节点</span></span><br></pre></td></tr></table></figure><p><img src="../attach/Pasted%20image%2020240825141419.png" alt="" /></p><h2 id="欧拉遍历-euler-tour-traversal"><a class="markdownIt-Anchor" href="#欧拉遍历-euler-tour-traversal"></a> 欧拉遍历 (Euler Tour Traversal)</h2><p>欧拉遍历是一种通用的树遍历方法，适用于二叉树。它结合了先序遍历、中序遍历和后序遍历，是这三种遍历的推广。在欧拉遍历中，遍历者围绕树进行移动，并在每个节点处访问三次：</p><ul><li><strong>第一次访问</strong>：称为 <strong>先序遍历 (Preorder Traversal)</strong>。</li><li><strong>第二次访问</strong>：称为 <strong>中序遍历 (Inorder Traversal)</strong>。</li><li><strong>第三次访问</strong>：称为 <strong>后序遍历 (Postorder Traversal)</strong>。</li></ul><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><ul><li>欧拉遍历可以同时获取先序、中序和后序遍历的结果。</li><li>当遍历树时，每个节点会被访问三次：左边一次（先序），底部一次（中序），右边一次（后序）。</li></ul><p><img src="../attach/Pasted%20image%2020240825141711.png" alt="" /></p><h2 id="树的递归代码示例-examples-of-recursive-code-on-trees"><a class="markdownIt-Anchor" href="#树的递归代码示例-examples-of-recursive-code-on-trees"></a> 树的递归代码示例 (Examples of Recursive Code on Trees)</h2><p>在树结构中，递归是处理树节点的常用方法。以下是一些常见的递归代码示例，展示了如何通过递归计算树的深度和高度。</p><h3 id="计算节点的深度-depth-of-a-node"><a class="markdownIt-Anchor" href="#计算节点的深度-depth-of-a-node"></a> 计算节点的深度 (Depth of a Node)</h3><p>节点的深度定义为从根节点到该节点的路径上的边数。根节点的深度为 <code>0</code>。</p><h4 id="示例代码-5"><a class="markdownIt-Anchor" href="#示例代码-5"></a> 示例代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="comment"># 如果节点 v 是根节点，则深度为 0</span></span><br><span class="line">    <span class="keyword">if</span> v.parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 否则，节点 v 的深度为其父节点的深度加 1</span></span><br><span class="line">        <span class="keyword">return</span> depth(v.parent) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h4><p>根节点：如果节点 v 没有父节点（即根节点），那么其深度为 0。<br />非根节点：如果节点 v 有父节点，那么其深度为父节点深度加 1。</p><h3 id="计算树的高度-height-of-a-tree"><a class="markdownIt-Anchor" href="#计算树的高度-height-of-a-tree"></a> 计算树的高度 (Height of a Tree)</h3><p>节点的高度定义为从该节点到其最深叶子节点的路径上的边数。叶子节点的高度为 0。</p><h4 id="示例代码-6"><a class="markdownIt-Anchor" href="#示例代码-6"></a> 示例代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="comment"># 如果节点 v 是叶子节点（即没有子节点），高度为 0</span></span><br><span class="line">    <span class="keyword">if</span> v.isExternal():</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算所有子节点的高度，取最大值并加 1</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> v.children:</span><br><span class="line">            h = <span class="built_in">max</span>(h, height(child))</span><br><span class="line">        <span class="keyword">return</span> h + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="解释-2"><a class="markdownIt-Anchor" href="#解释-2"></a> 解释</h4><p>叶子节点：如果节点 v 没有子节点（即叶子节点），那么其高度为 0。<br />非叶子节点：如果节点 v 有子节点，那么计算所有子节点的高度，取最大值并加 1。</p><h2 id="递归算法的复杂度分析-complexity-analysis-of-recursive-algorithms-on-trees"><a class="markdownIt-Anchor" href="#递归算法的复杂度分析-complexity-analysis-of-recursive-algorithms-on-trees"></a> 递归算法的复杂度分析 (Complexity Analysis of Recursive Algorithms on Trees)</h2><p>递归算法在树结构上通常具有以下两种复杂度：</p><h3 id="遍历所有子节点"><a class="markdownIt-Anchor" href="#遍历所有子节点"></a> 遍历所有子节点</h3><ul><li><strong>最坏情况</strong>：对树中的每个节点进行递归调用。</li><li><strong>总成本</strong>：如果每个节点的工作量是常数，那么总成本与节点数成线性关系，即 <code>O(n)</code>。</li></ul><h3 id="遍历单一子节点"><a class="markdownIt-Anchor" href="#遍历单一子节点"></a> 遍历单一子节点</h3><ul><li><strong>最坏情况</strong>：每一层递归调用一次。</li><li><strong>总成本</strong>：如果每层的工作量是常数，那么总成本与树的高度成线性关系，即 <code>O(h)</code>。</li></ul><h3 id="示例解释"><a class="markdownIt-Anchor" href="#示例解释"></a> 示例解释</h3><ul><li><p><strong>遍历所有子节点的递归</strong>：例如，计算树的高度需要递归调用所有子节点。由于每个节点都被访问一次，所以总成本是 <code>O(n)</code>，其中 <code>n</code> 是节点的总数。</p></li><li><p><strong>遍历单一子节点的递归</strong>：例如，查找最深的节点可能只需要沿着树的一条路径递归。在这种情况下，总成本是 <code>O(h)</code>，其中 <code>h</code> 是树的高度，因为只需在每一层进行一次递归调用。</p></li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>理解递归算法在树结构上的复杂度分析，对于优化和正确选择算法至关重要。通过分析遍历所有子节点和遍历单一子节点的不同情况，可以更好地预测递归算法的性能表现。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构相关笔记①</title>
      <link href="/8a8cf2ca.html"/>
      <url>/8a8cf2ca.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W1-W2</p></div><ol><li><a href="/8a8cf2ca.html" title="数据结构相关笔记①">数据结构相关笔记①</a></li><li><a href="/fd8bc25c.html" title="数据结构相关笔记②">数据结构相关笔记②</a></li><li><a href="/648293e6.html" title="数据结构相关笔记③">数据结构相关笔记③</a></li><li><a href="/1385a370.html" title="数据结构相关笔记④">数据结构相关笔记④</a></li><li><a href="/8de136d3.html" title="数据结构相关笔记⑤">数据结构相关笔记⑤</a></li><li><a href="/62d774a6.html" title="数据结构相关笔记⑥">数据结构相关笔记⑥</a></li><li><a href="/ed7d1563.html" title="数据结构相关笔记⑦">数据结构相关笔记⑦</a></li></ol><h2 id="算法复杂度"><a class="markdownIt-Anchor" href="#算法复杂度"></a> 算法复杂度</h2><p>算法复杂度描述了算法执行时间或空间随输入规模变化的增长趋势。以下是常见的算法复杂度及其表示方式：</p><h3 id="常数-constant"><a class="markdownIt-Anchor" href="#常数-constant"></a> 常数 (Constant)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(1) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h3 id="对数-logarithmic"><a class="markdownIt-Anchor" href="#对数-logarithmic"></a> 对数 (Logarithmic)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(\log n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><h3 id="线性-linear"><a class="markdownIt-Anchor" href="#线性-linear"></a> 线性 (Linear)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><h3 id="准线性-quasi-linear"><a class="markdownIt-Anchor" href="#准线性-quasi-linear"></a> 准线性 (Quasi-linear)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(n \log n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><h3 id="二次-quadratic"><a class="markdownIt-Anchor" href="#二次-quadratic"></a> 二次 (Quadratic)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(n^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="三次-cubic"><a class="markdownIt-Anchor" href="#三次-cubic"></a> 三次 (Cubic)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(n^3) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="指数-exponential"><a class="markdownIt-Anchor" href="#指数-exponential"></a> 指数 (Exponential)</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>c</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(c^n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><mi>log</mi><mo>⁡</mo><mi>n</mi><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><msqrt><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow></msqrt><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><msqrt><mi>n</mi></msqrt><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><mi>n</mi><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><mi>n</mi><msup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>n</mi><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><msup><mi>n</mi><mn>2</mn></msup><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><msup><mi>n</mi><mn>3</mn></msup><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><msup><mi>n</mi><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow></msup><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><msup><mn>2</mn><mi>n</mi></msup><mspace width="1em"/><mo>&lt;</mo><mspace width="1em"/><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">1 \quad &lt; \quad \log n \quad &lt; \quad \sqrt{\log n} \quad &lt; \quad \sqrt{n} \quad &lt; \quad n \quad &lt; \quad n \log n \quad &lt; \quad n \log^2 n \quad &lt; \quad n^2 \quad &lt; \quad n^3 \quad &lt; \quad n^{\log n} \quad &lt; \quad 2^n \quad &lt; \quad n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.25612499999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.983875em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span><span style="top:-2.9438750000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25612499999999994em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.190845em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491550000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.809155em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.190845em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0928879999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9032079999999999em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9032079999999999em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9382079999999999em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">l</span><span class="mtight">o</span><span class="mtight" style="margin-right:0.01389em;">g</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7534919999999999em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></span></p><h2 id="抽象数据类型-adt"><a class="markdownIt-Anchor" href="#抽象数据类型-adt"></a> 抽象数据类型 (ADT)</h2><p>抽象数据类型 Abstract Data Type,是一种数据类型，其特征仅由其行为（操作）定义，而不是其具体实现。例如，栈、队列、链表、树等都是抽象数据类型。</p><h3 id="索引列表-index-based-list-数组"><a class="markdownIt-Anchor" href="#索引列表-index-based-list-数组"></a> 索引列表 (Index-Based List) 数组</h3><table><thead><tr><th>操作</th><th>时间复杂度</th><th>描述</th></tr></thead><tbody><tr><td><strong>size()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>返回存储中的元素数量。</td></tr><tr><td><strong>isEmpty()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>检查存储是否为空。</td></tr><tr><td><strong>get(i)</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>返回索引为 <code>i</code> 的元素。</td></tr><tr><td><strong>set(i, e)</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>将索引 <code>i</code> 处的元素替换为元素 <code>e</code>，并返回被替换的元素。</td></tr><tr><td><strong>add(i, e)</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>在索引 <code>i</code> 处插入元素 <code>e</code>。索引大于或等于 <code>i</code> 的现有元素将后移。</td></tr><tr><td><strong>remove(i)</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>移除并返回索引 <code>i</code> 处的元素。索引大于或等于 <code>i</code> 的现有元素将前移。</td></tr></tbody></table><p>例子</p><table><thead><tr><th style="text-align:center">Method</th><th style="text-align:center">Returned value</th><th style="text-align:center">List content</th></tr></thead><tbody><tr><td style="text-align:center">add(0, A)</td><td style="text-align:center">-</td><td style="text-align:center">[A]</td></tr><tr><td style="text-align:center">add(0, B)</td><td style="text-align:center">-</td><td style="text-align:center">[B, A]</td></tr><tr><td style="text-align:center">get(1)</td><td style="text-align:center">A</td><td style="text-align:center">[B, A]</td></tr><tr><td style="text-align:center">set(2, C)</td><td style="text-align:center">“error”</td><td style="text-align:center">[B, A]</td></tr><tr><td style="text-align:center">add(2, C)</td><td style="text-align:center">-</td><td style="text-align:center">[B, A, C]</td></tr><tr><td style="text-align:center">add(4, D)</td><td style="text-align:center">“error”</td><td style="text-align:center">[B, A, C]</td></tr><tr><td style="text-align:center">remove(1)</td><td style="text-align:center">A</td><td style="text-align:center">[B, C]</td></tr><tr><td style="text-align:center">add(1, D)</td><td style="text-align:center">-</td><td style="text-align:center">[B, D, C]</td></tr><tr><td style="text-align:center">add(1, E)</td><td style="text-align:center">-</td><td style="text-align:center">[B, E, D, C]</td></tr><tr><td style="text-align:center">get(4)</td><td style="text-align:center">“error”</td><td style="text-align:center">[B, E, D, C]</td></tr><tr><td style="text-align:center">add(4, F)</td><td style="text-align:center">-</td><td style="text-align:center">[B, E, D, C, F]</td></tr><tr><td style="text-align:center">set(2, G)</td><td style="text-align:center">D</td><td style="text-align:center">[B, E, G, C, F]</td></tr></tbody></table><h3 id="位置列表-positional-list-单双向链表"><a class="markdownIt-Anchor" href="#位置列表-positional-list-单双向链表"></a> 位置列表 (Positional List) 单/双向链表</h3><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:center">单向链表</th><th style="text-align:center">双向链表</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>size()</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">返回存储中的元素数量。</td></tr><tr><td style="text-align:left"><strong>isEmpty()</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">检查存储是否为空。</td></tr><tr><td style="text-align:left"><strong>first(e)</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">返回第一个元素的位置（如果为空则返回 <code>null</code>）。</td></tr><tr><td style="text-align:left"><strong>last(e)</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">返回最后一个元素的位置（如果为空则返回 <code>null</code>）。</td></tr><tr><td style="text-align:left"><strong>removeFirst()</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">移除并返回第一个元素。</td></tr><tr><td style="text-align:left"><strong>removeLast()</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">移除并返回最后一个元素。</td></tr><tr><td style="text-align:left"><strong>insertBefore(p, e)</strong></td><td style="text-align:center">不适用</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">在位置 <code>p</code> 之前插入元素 <code>e</code>。</td></tr><tr><td style="text-align:left"><strong>insertAfter(p, e)</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">在位置 <code>p</code> 之后插入元素 <code>e</code>。</td></tr><tr><td style="text-align:left"><strong>remove(p)</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">移除并返回位置 <code>p</code> 处的元素。</td></tr><tr><td style="text-align:left"><strong>before(p)</strong></td><td style="text-align:center">不适用</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">返回位置 <code>p</code> 的前一个元素的位置（如果 <code>p</code> 是第一个位置则返回 <code>null</code>）。</td></tr><tr><td style="text-align:left"><strong>after(p)</strong></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left">返回位置 <code>p</code> 的后一个元素的位置（如果 <code>p</code> 是最后一个位置则返回 <code>null</code>）。</td></tr></tbody></table><h3 id="栈-stack"><a class="markdownIt-Anchor" href="#栈-stack"></a> 栈 (Stack)</h3><table><thead><tr><th>操作</th><th>时间复杂度</th><th>描述</th></tr></thead><tbody><tr><td><strong>push(e)</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>插入元素 <code>e</code>。</td></tr><tr><td><strong>pop()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>移除并返回最后插入的元素。</td></tr><tr><td><strong>top()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>返回最后插入的元素，但不移除。</td></tr><tr><td><strong>size()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>返回存储中的元素数量。</td></tr><tr><td><strong>isEmpty()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>检查存储是否为空。</td></tr></tbody></table><p>例子</p><table><thead><tr><th style="text-align:center">operation</th><th style="text-align:center">returns</th><th style="text-align:center">stack</th></tr></thead><tbody><tr><td style="text-align:center">push(5)</td><td style="text-align:center">-</td><td style="text-align:center">[5]</td></tr><tr><td style="text-align:center">push(3)</td><td style="text-align:center">-</td><td style="text-align:center">[5, 3]</td></tr><tr><td style="text-align:center">size()</td><td style="text-align:center">2</td><td style="text-align:center">[5, 3]</td></tr><tr><td style="text-align:center">pop()</td><td style="text-align:center">3</td><td style="text-align:center">[5]</td></tr><tr><td style="text-align:center">isEmpty()</td><td style="text-align:center">False</td><td style="text-align:center">[5]</td></tr><tr><td style="text-align:center">pop()</td><td style="text-align:center">5</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">isEmpty()</td><td style="text-align:center">True</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">push(7)</td><td style="text-align:center">-</td><td style="text-align:center">[7]</td></tr><tr><td style="text-align:center">push(9)</td><td style="text-align:center">-</td><td style="text-align:center">[7, 9]</td></tr><tr><td style="text-align:center">top()</td><td style="text-align:center">9</td><td style="text-align:center">[7, 9]</td></tr><tr><td style="text-align:center">push(4)</td><td style="text-align:center">-</td><td style="text-align:center">[7, 9, 4]</td></tr><tr><td style="text-align:center">pop()</td><td style="text-align:center">4</td><td style="text-align:center">[7, 9]</td></tr></tbody></table><h3 id="队列-queue"><a class="markdownIt-Anchor" href="#队列-queue"></a> 队列 (Queue)</h3><table><thead><tr><th>操作</th><th>时间复杂度</th><th>描述</th></tr></thead><tbody><tr><td><strong>enqueue(e)</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>插入元素 <code>e</code> 到队列的末尾。</td></tr><tr><td><strong>dequeue()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>移除并返回队列前端的元素。队列为空返回 nul</td></tr><tr><td><strong>first()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>返回队列前端的元素，但不移除它。队列为空返回 null</td></tr><tr><td><strong>size()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>返回队列中存储的元素数量。</td></tr><tr><td><strong>isEmpty()</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>检查队列是否为空。</td></tr></tbody></table><p>例子</p><table><thead><tr><th style="text-align:center">Operation</th><th style="text-align:center">Output</th><th style="text-align:center">Queue</th></tr></thead><tbody><tr><td style="text-align:center">enqueue(5)</td><td style="text-align:center">-</td><td style="text-align:center">(5)</td></tr><tr><td style="text-align:center">enqueue(3)</td><td style="text-align:center">-</td><td style="text-align:center">(5, 3)</td></tr><tr><td style="text-align:center">dequeue()</td><td style="text-align:center">5</td><td style="text-align:center">(3)</td></tr><tr><td style="text-align:center">enqueue(7)</td><td style="text-align:center">-</td><td style="text-align:center">(3, 7)</td></tr><tr><td style="text-align:center">dequeue()</td><td style="text-align:center">3</td><td style="text-align:center">(7)</td></tr><tr><td style="text-align:center">first()</td><td style="text-align:center">7</td><td style="text-align:center">(7)</td></tr><tr><td style="text-align:center">dequeue()</td><td style="text-align:center">7</td><td style="text-align:center">()</td></tr><tr><td style="text-align:center">dequeue()</td><td style="text-align:center">null</td><td style="text-align:center">()</td></tr><tr><td style="text-align:center">isEmpty()</td><td style="text-align:center">true</td><td style="text-align:center">()</td></tr><tr><td style="text-align:center">enqueue(9)</td><td style="text-align:center">-</td><td style="text-align:center">(9)</td></tr><tr><td style="text-align:center">enqueue(7)</td><td style="text-align:center">-</td><td style="text-align:center">(9, 7)</td></tr><tr><td style="text-align:center">size()</td><td style="text-align:center">2</td><td style="text-align:center">(9, 7)</td></tr><tr><td style="text-align:center">enqueue(3)</td><td style="text-align:center">-</td><td style="text-align:center">(9, 7, 3)</td></tr><tr><td style="text-align:center">enqueue(5)</td><td style="text-align:center">-</td><td style="text-align:center">(9, 7, 3, 5)</td></tr><tr><td style="text-align:center">dequeue()</td><td style="text-align:center">9</td><td style="text-align:center">(7, 3, 5)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MC联机-ZeroTier</title>
      <link href="/f3fe776e.html"/>
      <url>/f3fe776e.html</url>
      
        <content type="html"><![CDATA[<h2 id="zerotier-官网-httpswwwzerotiercom"><a class="markdownIt-Anchor" href="#zerotier-官网-httpswwwzerotiercom"></a> ZeroTier 官网: <a href="https://www.zerotier.com/">https://www.zerotier.com/</a></h2><p>注册账号然后开始 <strong>记下来生成的那一串 NETWORK ID</strong></p><p><img src="../attach/Pasted%20image%2020240717192809.png" alt="" /><br />当然你也可以修改成自己喜欢的网段</p><p><img src="../attach/Pasted%20image%2020240717192937.png" alt="" /></p><h2 id="安装-zerotier-点这里下载"><a class="markdownIt-Anchor" href="#安装-zerotier-点这里下载"></a> 安装 ZeroTier: <a href="https://download.zerotier.com/dist/ZeroTier%20One.msi">点这里下载</a></h2><p>安装完毕后 在任务栏右下角找到它 右键</p><p><img src="../attach/Pasted%20image%2020240717193927.png" alt="" /></p><p><img src="../attach/Pasted%20image%2020240717193956.png" alt="" /></p><p>输入之前存的那一串 NETWORK ID</p><p>再进到 zerotier 的管理页面 往下滑到 members 把勾打上就能连上了</p><p>没有设备显示的话 多刷新几次页面就能看到了</p><p><img src="../attach/Pasted%20image%2020240717194952.png" alt="" /></p><h2 id="mc-的设置"><a class="markdownIt-Anchor" href="#mc-的设置"></a> MC 的设置</h2><p>绕正版验证 mod: <a href="https://www.curseforge.com/minecraft/mc-mods/lan-server-properties">点击跳转下载</a></p><p><img src="../attach/Pasted%20image%2020240717201043.png" alt="" /></p><p>看说明就行（）端口有需求可以自己改</p><p><img src="../attach/Pasted%20image%2020240717201119.png" alt="" /></p><h2 id="关于-zerotier-的-moon-服务器"><a class="markdownIt-Anchor" href="#关于-zerotier-的-moon-服务器"></a> 关于 ZeroTier 的 Moon 服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com/ | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure><p>输入命令加入网络：<strong><code>[network_ID]</code>改成你自己的</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zerotier-cli join [network_ID]</span><br></pre></td></tr></table></figure><p>去后台打勾</p><p>回到 linux 中，输入命令观察是否加入成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zerotier-cli  listnetworks</span><br></pre></td></tr></table></figure><p>配置 moon：</p><p>进入 zerotier-one 程序目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/lib/zerotier-one</span><br></pre></td></tr></table></figure><p>生成 moon 配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zerotier-idtool initmoon identity.public &gt;&gt; moon.json</span><br></pre></td></tr></table></figure><p>自己修改 moon.json 里面 stableEndpoints 指定为当前云服务器的外网 ip 与监听端口号</p><p>需要注意 ip 与端口号直接用/分割，而不是冒号</p><p>比如 127.0.0.1/9993</p><p>生成.moon 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></table></figure><p>将生成的.moon 文件移动到 moons.d 目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir moons.d</span><br></pre></td></tr></table></figure><p>这个 xxxxx 改成你自己生成的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv 000000xxxxxx.moon moons.d</span><br></pre></td></tr></table></figure><p>重启 zerotier-one 服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart zerotier-one</span><br></pre></td></tr></table></figure><p>配置开机启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable zerotier-one.service</span><br></pre></td></tr></table></figure><h2 id="windows-下配置-moon"><a class="markdownIt-Anchor" href="#windows-下配置-moon"></a> Windows 下配置 Moon</h2><p>管理员身份运行 powershell，执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zerotier-cli.bat listpeers</span><br></pre></td></tr></table></figure><p>识别到 moon 的主机之后，输入命令将其由 LEAF 变为 MOON:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zerotier-cli.bat orbit [节点ID] [节点ID]  #windows</span><br></pre></td></tr></table></figure><p>linux 命令就是删除.bat</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
            <tag> #MC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INFJ杂谈</title>
      <link href="/96703ce8.html"/>
      <url>/96703ce8.html</url>
      
        <content type="html"><![CDATA[<p>在感情里面，INFJ 面对他们喜欢的人和喜欢他们的人跟玩狗一样。INFJ 最烦躁的就是当别人喜欢自己会带给别人情绪和自己喜欢上别人自己的情绪反扑。特别是后者，会让他时刻怀疑自己是不是不够强大，不然怎会有如此的情绪反扑。所以不算是 INFJ 玩狗，只是你永远不知道他是反反复复内耗了多久，然后修炼出关系里的云淡风轻。你根本无法预料你在他们心目中的位置。他们无法把一个人永远放在一个固定位置，永远且持久的观察、考量。也许这段时间你相对重要，（这里的相对是一 INFJ 压根不会有重要的人）过段时间就不是了，但不代表会有别人。</p><p>其实 INFJ 相当有洁癖，所以不允许自己有重要的人。这是他们骨子里的质疑一切，包括所有人，他们当然知道关系里的瞬息万变。他们致力于能随时放弃掉一切而开展一些关系，他们在一些时刻会故意释放愚蠢的缺点（为了以后斩断关系的妙用）或者洞察身边人的缺点。他们想洞察一切，他们时刻劝说自己不要将心沉到某一个人、某些群体、某些关系中。当然你压根毫无察觉。因为态度还是一如既往的，甚至他们会让你觉得你们正在感情上升。转眼你就是冷宫了。</p><p>看不起许多的刻意。但凡带点人为的都天生抵触。所向往寻找的不经意在 INFJ 眼里大于很多个刻意。可世界上没有那么多不经意。那些刻意的用心的精心准备的也值得去珍惜。INFJ 很难骗很难预测，除非一次次不断让 INFJ 看到坚信的真心或者关系之间原本的真相（INFJ 会试图寻找到，一段长期关系的最低点）他们深刻领悟和掂量到虽不是非你不可，但没你确实不行。</p><p>INFJ 真正用心的时刻，一定是一段关系将至未至，他找一个人，把玩一个人，观察一个人，入迷一个人，然后爱上一个人。实际上，最终 INFJ 自己都可能不知道究竟爱上他什么。可能是爱上了爱他过程中的自己。那么他已经爱上了一那个爱人的自己，那么这个人，也要留在身边。这里不是把那个人物化，相反，INFJ 如果能因为爱上你的过程而爱上自己，那么他们会时刻督促自己精进。他们对自己有一套强大的规训，他们无法接受在爱你和爱自己的同时让自己变得越来越差。没有什么比让 INfJ 感到自己越来越没有成长更糟糕的事情。成长不一定是社会化、物质化、普世的，可能是内部、心灵、灵魂。</p><p>INFJ 一生都贯穿的事情是什么？INFJ 一生都在选择抛弃、预备抛弃、已经抛弃。INFJ 他们为什么强大？为什么各个领域储备良好。因为他们敢于抛弃，把抛弃贯穿一生。他们常常从小到大，就开始沉迷某个东西、某方面、某领域，然后把它研究到他们自己满意的程度，就抛弃去找下一个。仿佛森林里不知疲倦的采蘑菇的一个老人。各种颜色各种形状他们都感兴趣，非要采来看看构造如何，最终 INFJ 会修炼到把各种道理规矩融会贯通。他们的沉迷也让他们有了许多颗宝石，他们深藏在心中，当人群中有相关的话题，他们总是能说道一二。INFJ 他们沉迷的过往从来不炫耀、展露。他们深谱人际关系里面隐藏的心态，一般一桌人里沉默不语、似笑非笑、时不时蹦哒一句的也许是 INFJ。</p><p>INFJ 的进阶之路到底是什么？INFJ 的进阶之路是一路披荆斩棘。是痛着斩断一些牵绊。尚未进阶的他们会沉溺在友情亲情爱情之中，但是心底时刻都在反问，我真的需要吗？然后带着答案去找问题，最终得出我不太需要。他们开始在友情中迁回地维持，然后寻找新的方向，不再执著于人际关系。他们开始在亲情中找到亲情的羁绊究竟是什么？发现也没什么不能撼动的，然后在礼尚往来中贯穿亲情，让自己处于一种尽量少接受亲情的馈赠，并做到自己认为的相等的回馈。他们开始在爱情中琢磨爱，将爱与许多东西对比，比如现实论。他们把自己炼化到做出一个选择。如果需要爱，那就要纯净且不参杂质的爱，若选现实论那一套，他们掌控自己的心绝不往名为爱的那条道路看一眼。实际上 INFJ 真的很擅长独自一人盘算关系，然后开始自我式的自虐，让自己丢弃或者必须选择一些东西。他们觉得当下不选择，以后痛苦迁回的是自己。</p><p>不知不觉又写了这么多，其他人看到这样的 INFJ 觉得活在自己世界里自大又讨厌，一副非要在关系里主宰的样子。希望 INFJ 下一次，如果别人来敲心门时，不要放那么多陷阱，不要上那么多的锁，不要把自己冷漠的关在里面。知道有的 INFJ 身在嘈杂社会时刻痛苦着，但强大的第一要义就是让自己不再痛苦。（这也是爱自己的准则）真心劝 INFJ 在尚未有能力摆脱社会规训或者尚未逃离去想到的地方时，就大胆接受。别在社会的人堆里，把自己关进笼子里，做一只困顿的野兽。</p><p>你那么强大，何惧别人踏进你心呢？</p>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #MBTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于INFJ的千层面具</title>
      <link href="/413a73a0.html"/>
      <url>/413a73a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="最外层心怀大爱的白日梦想家核心热"><a class="markdownIt-Anchor" href="#最外层心怀大爱的白日梦想家核心热"></a> 最外层：心怀大爱的白日梦想家「核心：热」</h2><p>以行动和 se 体现自已对于世界的热爱。热爱世界，热爱生命，热爱万物。但这并非 INFJ 自发的热爱，而是一种期望式的追求。是一种对 ENFP 人格的 fi 的吸纳和模仿。INFJ 内心深处的自卑和阴郁会让他们极力的想摆脱这样的标签，他们渴望自己能够活成 ENFP 的模样，还能够将自己的爱和温暖传递给别人。而这样的人格也很容易吸引到其他人，然而这只是 INFJ 最外层的表象。</p><h2 id="第二层行走人世间的空心人核心冷"><a class="markdownIt-Anchor" href="#第二层行走人世间的空心人核心冷"></a> 第二层：行走人世间的空心人「核心：冷」</h2><p>对世间的一切没有太多情绪的波动。大多数的情绪不过是从他人和外界的表现中习得的，只是觉得什么场合应该有什么样的情绪，有一种强制性的表演成分。这主要源于 Fi 的空心。比如：如果有同学身上发生了些不幸的事，INFJ 为了不想内心毫无情绪的违和以及难堪，会故意配合氛围表演情绪，来强制自己和同学共情并给予对方相应的安慰和鼓励。而一旦脱离人群，脸上的表情则会快速消失，恢复平静。虽然 INFJ 会发自内心的对同学的遭遇表示遗憾和失落，但他就是很难由此产生相应的情绪，只是觉得应该如此。因为这些情绪并不是自发的，而不是一种代入式的理解。</p><p>前两层都是面对世界的样子，尝试热爱世界改造自己以及内心的淡漠和抽离。到第三层开始接触人群和社会。</p><h2 id="第三层社交群里的千面佛核心热"><a class="markdownIt-Anchor" href="#第三层社交群里的千面佛核心热"></a> 第三层：社交群里的千面佛「核心：热」</h2><p>INFJ 早年被打压 fi 的经历造就了自身内核的空心和自卑，并由此对于他人身上美好的品质产生了渴望。于是他们开始让自已发展 fe 来迎合他人避免冲突，以示友好，也能避免自卑的内核受到他人的冲击被伤害。并不断的从他人身上吸纳合适的信念和价值观来重新打造自身的 fi。能和任何人都聊的来。有时会让人误以为他们是 e 型的外向人。他们吸纳了众多的面具以能够在众多不同的人面前显得游刃有余，并不断的吸纳他人的优秀品质来巩固自身的成长。这一层是最常看到的 INFJ 的模样，见人说人话，见鬼说鬼话。所有人不管是朋友还是陌生人，一视同仁，没有任何区别。</p><h2 id="第四层无视性别的暧昧大师核心冷"><a class="markdownIt-Anchor" href="#第四层无视性别的暧昧大师核心冷"></a> 第四层：无视性别的暧昧大师「核心：冷」</h2><p>INFJ 自卑的内核激发了他们对于多样化的社交关系的渴望，他们也希望像其他人一样拥有很多朋友，受人欢迎。他们在早期不断的尝试结交新朋友。但当和新朋友确认熟悉的关系后，又会尝试保持距离。因为他们自身并不习惯和别人保持太亲近的关系，他们只喜欢普通朋友了解自己外在的面具，而并不喜欢他们太过深入。这样会暴露自身更脆弱的部分，从而让关系面临失控的风险。这是众多人吐槽 INFJ 茶，若即若离，PUA 的原因。</p><p>大多数人和朋友都会被 INFJ 牵制在这一层，以防止他们过于深入自己的生活和内心。这也是他们筛选朋友的第一层过滤网。而筛选的标准便是共同的志趣和爱好。另外要提一点的是，INFJ 的朋友与时间无关，只与你到达的层数有关。并不是认识时间越久，关系越好。只是说，认识时间越久，INFJ 的责任感会更强。如果你有什么需要帮助的地方，他们还是会两肋插刀的。但不会做深入的交流，更别提交心。</p><h2 id="第五层共鸣狂欢的寻觅者核心热"><a class="markdownIt-Anchor" href="#第五层共鸣狂欢的寻觅者核心热"></a> 第五层：共鸣狂欢的寻觅者「核心：热」</h2><p>INFJ 时刻都在寻觅着那些和自己有着共同志趣、经历或对人生以及社会思考的个体，并不断的用一些话题引子试探着身边人对于这些抽象命题的态度和反应。他们对于有共同话题的人会表现出难得的自发的热情，它不同于和外界互动时的那层虚假，而是一种内在的真诚。如果你对 INFJ 聊的问题有自己独到或深刻的理解，有相似的兴趣爱好，那么 INFJ 会直接把你提到这一层。互动率会比其他朋友显著提高。</p><h2 id="第六层自我厌弃的道德标兵核心冷"><a class="markdownIt-Anchor" href="#第六层自我厌弃的道德标兵核心冷"></a> 第六层：自我厌弃的道德标兵「核心：冷」</h2><p>INFJ 时常被一种不安感和焦虑感裹挟，这源于他们内在的矛盾在不断的斗争和运动。INFJ 既希望向别人展示自己优秀有魅力的一面，又害怕他们了解到自己更深层次的不堪和丑恶。他们总是不断的否定的自己，希望自己完美无瑕，并担心那些难看的缺口会吓坏身边的朋友。所以又一批同志趣的朋友会被 INFJ 卡在第五层，而这些大概率是那些心直口快，攻击性强，包容心差的人。这会让 INFJ 不断的思考自己被朋友发现自己糟糕的一面时，对方内心的想法，并不断内耗。所以会和这类人保持在一定的距离。而如果你是一个包容心很强的人，并能给 INFJ 足够的安全感，那么你会顺利的进入到 INFJ 的第六层。</p><p>到这一层已经算是很亲密的朋友了，你知道了 INFJ 白的一面，也了解了一部分黑的一面，并完全接纳了他。但你可能还是不够懂他，不太懂他的性格，他的需求。他行为的原因和内在的动机。</p><h2 id="第七层顾影自怜的望灵石核心热"><a class="markdownIt-Anchor" href="#第七层顾影自怜的望灵石核心热"></a> 第七层：顾影自怜的望灵石「核心：热」</h2><p>INFJ 极度的渴望有一个 soulmate 能够懂自己，他们孤独的太久了，也非常缺乏一个懂自己的人的认可，认可自己人格的底色，而不是那些花样繁多的面具。然而身边却几乎找不到同类的人，INFJ 只能独自顾影自怜，一边不断的成长，一边热切的期盼着一个 soulmate 的到来。而能来到这一层的朋友已经是史诗级别的了，是万中无一的期盼，是长年累月的坚守，是上天赐予 INFJ 历经磨难的礼物。难以想象 INFJ 究竟会有多开心。他们能理解自己的感受，能包容自己的缺陷，能和自己探讨人生与理想，能肩并肩的为共同的目标努力奋进。</p><h2 id="第八层傍依孤独的守望者核心冷"><a class="markdownIt-Anchor" href="#第八层傍依孤独的守望者核心冷"></a> 第八层：傍依孤独的守望者「核心：冷」</h2><p>INFJ 孤独的太久了，长期对孤独的依恋，已经让他们变成了回避型人格。这样一个礼物的出现会让 INFJ 觉得仿佛一个梦。他们极度的患得患失，极度的害怕失去这样的 soulmate。他们早已习惯了孤独，突然一个如此美好的人出现在他们的生命里，他们在激动后便是恐慌和害怕。他们想着还不如没有的好，至少不会有这么大的情绪波动，万一.。没错，他们极度害怕那个万一，那个重新搅动自己内在情绪和失控的万一。如果只是孤独，忍忍也就那样，并没有多糟糕。如果万一…….那对 INFJ 来说简直是万劫不复。甚至可能产生极端的念头。</p><p>到这一层，剩下的便是时间的考验。经过足够长的时间的沉淀和预热，双方都足够了解了彼此，也逐渐抹去了刚认识时的生涩和不安，INFJ 在你面前能够大胆的做自己，能够大方的展现自身的缺陷，那么 INFJ 是时候给你展现以前独处时的自己了。</p><h2 id="第九层精神自在的狂想家核心狂热"><a class="markdownIt-Anchor" href="#第九层精神自在的狂想家核心狂热"></a> 第九层：精神自在的狂想家「核心：狂热」</h2><p>似神似疯魔的 INFJ 在独处时尽情的享受着一个人的疯癫。他们在自己舒适的房间里作舞、打拳、蹦迪、唱歌、演讲、角色扮演、幻想世界、精分、行为艺术、冥想、中二、浮夸、释放、野性等，他们张扬着释放长久以来压抑的矜持和端着，真正的通过各种方式表达个性的自己，散播着自己自由的精神。任何你能想象，不能想象的事情都能出现在 INFJ 的小空间里。因为他们足够丰（men）富（sao）。如果你能看到这层，说明 INFJ 真的和你相处的极度舒适和放松了。能够让自己释放极度压抑的个性，没有任何的压抑和不适，你便是 INFJ 足够理想的伴侣（不分性别）。</p><h2 id="第十层卑弱胆怯的卡西莫多核心卑冷"><a class="markdownIt-Anchor" href="#第十层卑弱胆怯的卡西莫多核心卑冷"></a> 第十层：卑弱胆怯的卡西莫多「核心：卑冷」</h2><p>INFJ 因为从小的打压和认同的缺乏，他们总是认为自己不够好不够优秀，不配得到鼓励。他们的自卑几乎要刻在骨子里，以致于无论自己变得如何，哪怕在常人眼里变得足够好，他们也很难满足，很难有幸福感。他们并不需要这些外在的优秀的标签的衬托，来让自己显得很好。他们厌恶这些，又无法避免。他们最缺乏的是洞悉他们内心深处的真诚的认同和包容。能够让他们摆脱自卑的阴影，让他们相信哪怕他们一无所有。你们仅仅是因为他这个人，因为骨子里透露出的善良和美好，而选择他们。自此 INFJ 才真正的接纳了你，也接纳了自己。</p><p>到这一层，是大部分人，甚至包括 INFJ 自己在不了解心理学基础和工具下能够到达的极限了。以下几层是往更深层次的 INFJ 去挖掘而来。</p><h2 id="第十一层一念神魔的殉道者核心空无"><a class="markdownIt-Anchor" href="#第十一层一念神魔的殉道者核心空无"></a> 第十一层：一念神魔的殉道者「核心：空无」</h2><p>INFJ 的成因起源于自卑，而自卑起源于被打压的 fi 导致的内在的空无。这让他们内心就像一个容器，能够吸纳和包容任何不同形式的价值观，甚至是对立的。但是他们因为缺乏足够的经历和知识去为任何一种价值观辩护，使得他们内心从外界吸纳的未经整合的混乱的 fi，成为了一个隐形的炸弹。因为任何一种极端的情绪和险境，都可能让他们往另一个方向的 fi 去笃定践行。INFJ 选择善还是恶，真的只在一念之间。</p><h2 id="第十二层埋葬-fi-的童年守墓人"><a class="markdownIt-Anchor" href="#第十二层埋葬-fi-的童年守墓人"></a> 第十二层：埋葬 fi 的童年守墓人</h2><p>这里埋藏着 INFJ 小时候的愿望和价值观在追求职业的道路上，INFJ 们不仅寻求个人成就，更渴望在工作中实现自己的价值观和对和谐世界的贡献。他们的内心充满了对美好未来的憧憬，而他们的职业选择却往往在受到社会现实的敲打下选择妥协。我现在回想起来我小时候有道未来想从事的职业的勾画题，我选择了画家、警察、发明家、小说家、心理学家。而且自己当时特别爱看类似艺术创想的科教频道和纪录频道，动画片都没这吸引我。可惜还是败在了现实里。有人告诉我干这些没出息，挣不到钱。清明给自己内心幼小的 fi 上柱香吧。</p><h2 id="第十三层人类命运的卫道士"><a class="markdownIt-Anchor" href="#第十三层人类命运的卫道士"></a> 第十三层：人类命运的卫道士</h2><p>被内在欲望和 ni 包装所构建的早期 fi，往往有着深刻宏大的夙愿，想要为整个人类做出自己的伟大的贡献。这里有着 INFJ 最基础原始的价值判断和理想主义追求。</p><h2 id="第十四层原始混杂的野心家"><a class="markdownIt-Anchor" href="#第十四层原始混杂的野心家"></a> 第十四层：原始混杂的野心家</h2><p>这里有着 INFJ 最原始的内在欲望和野心。可能由 ni 代表的集体无意识导致的完美主义和直达本质诱发。让 INFJ 总是想要做到最好。</p><h2 id="第十五层人类智海的拾荒者"><a class="markdownIt-Anchor" href="#第十五层人类智海的拾荒者"></a> 第十五层：人类智海的拾荒者</h2><p>这里是整个人类的集体潜意识的海洋，而 INFJ 的原始 ni 便是这片海洋的拾荒者。说不定哪天就被大海送上来一些稀奇古怪又深刻的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #MBTI </tag>
            
            <tag> #人际 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红烧肉</title>
      <link href="/38c77035.html"/>
      <url>/38c77035.html</url>
      
        <content type="html"><![CDATA[<h2 id="1切块焯水"><a class="markdownIt-Anchor" href="#1切块焯水"></a> 1.切块焯水</h2><p>放葱姜蒜<br />料酒<br />撇清浮沫<br />煮到肉变色<br />捞起来洗干净</p><h2 id="2煸炒出油"><a class="markdownIt-Anchor" href="#2煸炒出油"></a> 2.煸炒出油</h2><p>em 这里不用放油了<br />因为猪油炒炒就出来了 用大火<br />再把肉捞起来 准备炒糖色</p><h2 id="3炒糖色"><a class="markdownIt-Anchor" href="#3炒糖色"></a> 3.炒糖色</h2><p>三勺白砂糖 量 自己看着办<br />先大火 炒到黄色 转小火<br />炒到 红褐色 就可以把肉再倒进去了</p><h2 id="4加佐料"><a class="markdownIt-Anchor" href="#4加佐料"></a> 4.加佐料</h2><p>稍微炒一下 看到上色了之后<br />加一勺料酒 两勺生抽 一勺老抽 一勺蚝油<br />继续炒</p><h2 id="5煮煮煮"><a class="markdownIt-Anchor" href="#5煮煮煮"></a> 5.煮煮煮</h2><p>加水 把肉没过的量就 ok<br />大火把水烧开<br />转小火 慢炖 50 分钟</p><h2 id="6完工"><a class="markdownIt-Anchor" href="#6完工"></a> 6.完工</h2><p>大火收汁<br />撒芝麻</p><p><img src="../attach/88e5e021f3a30d167ba9b12e60ab398b.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 菜谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #好吃的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五种沟通模式</title>
      <link href="/6b45c387.html"/>
      <url>/6b45c387.html</url>
      
        <content type="html"><![CDATA[<p><strong>五种沟通模式</strong></p><p>沟通是人际交往中至关重要的技能。不同的沟通模式会对人际关系产生不同的影响。以下介绍五种常见的沟通模式：</p><p><strong>1. 讨好型</strong></p><p>讨好型沟通者以迎合和让步为主要特点。他们倾向于顺从他人，满足他人的情感需求，而忽视自己的感受和需求。他们经常使用“好的”、“没问题”、“我会改进”等措辞，往往在讨好别人的同时牺牲自己的利益。</p><p><strong>2. 指责型</strong></p><p>指责型沟通者经常使用斥责和责备的沟通方式。他们倾向于指责别人的错误，认为自己受到不公平对待。他们有时会表现得非常暴躁，甚至会失去控制。他们经常使用“你怎么能这样”、“你永远都不会理解”等方式来表达自己的感受和情感需求。</p><p><strong>3. 超理智型</strong></p><p>超理智型沟通者以理性分析和忽略感情为主要特点。他们倾向于隐藏自己的感受，掩饰自己的情感需求，表现得非常冷漠和理智。他们专注于分析问题，找到问题的根源，而不是关注情感上的需求。他们经常使用“但是”、“如果”等词语，对问题进行逻辑分析和推断，甚至刻意回避自己的感受。</p><p><strong>4. 打岔型</strong></p><p>打岔型沟通者经常使用幽默或转移话题的方式来缓和紧张气氛。他们在交流中用幽默来化解尴尬，以获得他人接纳。打岔型沟通者通常很难在人际交往中保持真实性，他们往往会引导对话，逃避自己的感受和需求，使得交流无法深入。</p><p><strong>5. 一致型</strong></p><p>一致型沟通者能够承认自己的所有情感，并能很好地表达自己的想法，同时顾及他人的感受，并考虑到情境。一致性回应的每部分信息都表达同一种意思：话语中的意思与面部表情、肢体姿态、语调所传达的内容一致。在表里一致的行为和关系中，我们可以不带任何评判地接纳并拥有自己的感受，并且以一种积极、开放的态度来处理它们。</p><p><strong>不一致沟通的问题</strong></p><p>四种典型的“不一致”沟通的问题在于，我们都在掩饰、压抑或扭曲自己的情感，不愿袒露自己的感受，而是用自以为高明的办法去掩饰它。不一致的沟通让人很压抑，长期下来令人头疼（扶额.jpg）。</p><p><strong>一致沟通的好处</strong></p><p>一致性沟通不意味着你不可以有隐私，恰恰相反，你不用扭扭捏捏地岔开话题，只需一致地说：“这个话题我现在还没有准备好谈。”最终，一致的沟通让人感觉到你是可以信任的，人们愿意向你敞开心扉。</p><p>是不是只有绿人才能做到一致型沟通啊 🌿</p>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #人际 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站24小时直播</title>
      <link href="/1fc8eec1.html"/>
      <url>/1fc8eec1.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><ul><li><p>最好使用 24 小时不关机的机器，安装 ubuntu</p></li><li><p>安装 ffmpeg</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure><ul><li>准备直播的视频</li></ul><h2 id="推流脚本"><a class="markdownIt-Anchor" href="#推流脚本"></a> 推流脚本</h2><ul><li><a href="http://xn--4gqvds00dlkg.sh">新建一个.sh</a> 文件</li><li>复制粘贴就行</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">folder=&quot;/home/xt/zb/&quot; #这里改成你的文件夹地址</span><br><span class="line">read -p &quot;请输入您的直播推流地址(形式为rtmp地址): &quot; rtmp</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    cd $folder</span><br><span class="line">    for video in $(ls *.mp4)</span><br><span class="line">    do</span><br><span class="line">        echo &#x27;正在播放: $&#123;video&#125;&#x27;</span><br><span class="line">        echo $(date +%F%N%T)</span><br><span class="line">        ffmpeg -re -i &quot;$video&quot; -vcodec copy -acodec copy -f flv $&#123;rtmp&#125;</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="推流地址"><a class="markdownIt-Anchor" href="#推流地址"></a> 推流地址</h2><p>点这个链接打开: <a href="https://link.bilibili.com/p/center/index#/my-room/start-live">blibilli</a></p><p><img src="../attach/Pasted%20image%2020240521210636.png" alt="" /></p><p>点开始直播 推流码是这两个拼接</p><p><img src="../attach/Pasted%20image%2020240521210703.png" alt="" /></p><h2 id="开启直播"><a class="markdownIt-Anchor" href="#开启直播"></a> 开启直播</h2><ul><li>启动新窗口:</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new-session -s zhibo</span><br></pre></td></tr></table></figure><ul><li><a href="http://xn--jn2aw7m.sh">运行.sh</a> 文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zhibo.sh</span><br></pre></td></tr></table></figure><ul><li><p>输入推流码</p></li><li><p>附加到现有窗口:</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux attach-session -t zhibo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux的用法</title>
      <link href="/709b21f3.html"/>
      <url>/709b21f3.html</url>
      
        <content type="html"><![CDATA[<p>Tmux 是一个终端复用器，它允许用户在单个终端窗口中访问多个终端会话，并且能够将会话从一个终端分离出来，然后在另一个终端重新连接。这对于远程工作和需要保持长时间运行程序的场景非常有用。以下是一些基本的 tmux 命令和用法：</p><p>在大多数 Linux 发行版中，可以通过包管理器安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install tmux  <span class="comment"># Debian/Ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> yum install tmux      <span class="comment"># CentOS/RHEL</span></span><br></pre></td></tr></table></figure><p>基本命令</p><ul><li>启动新会话:</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -s 会话名称</span><br></pre></td></tr></table></figure><ul><li>附加到现有会话:</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux attach -t 会话名称</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关笔记④</title>
      <link href="/e4eb22c1.html"/>
      <url>/e4eb22c1.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/7de2737b.html" title="数据库相关笔记①">数据库相关笔记①</a></li><li><a href="/ae543ed.html" title="数据库相关笔记②">数据库相关笔记②</a></li><li><a href="/93ec1257.html" title="数据库相关笔记③">数据库相关笔记③</a></li><li><a href="/e4eb22c1.html" title="数据库相关笔记④">数据库相关笔记④</a></li></ol><h1 id="闭包-closure"><a class="markdownIt-Anchor" href="#闭包-closure"></a> 闭包 Closure</h1><p>例如，假设我们有以下函数依赖性：</p><p>A -&gt; B<br />B -&gt; C<br />那么，属性集合 {A} 的闭包就是 {A, B, C}，因为 A 可以决定 B，B 可以决定 C。</p><p>闭包的概念在数据库设计（特别是在进行范式分解）中非常重要，因为它可以帮助我们理解和使用函数依赖性。</p><h1 id="范式"><a class="markdownIt-Anchor" href="#范式"></a> 范式</h1><h2 id="1nf-第一范式"><a class="markdownIt-Anchor" href="#1nf-第一范式"></a> 1NF (第一范式)</h2><p>第一范式要求数据库表的每一列都是不可分割的原子数据项。换句话说，每一列都应该是最小的数据单位，不能再被分割。</p><p>例如，一个违反第一范式的表可能如下：</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>张三, 李四</td></tr></tbody></table><p>在这个例子中，“Name” 列包含了两个名字，违反了第一范式。应该将其分割为两行：</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr></tbody></table><h2 id="2nf-第二范式"><a class="markdownIt-Anchor" href="#2nf-第二范式"></a> 2NF (第二范式)</h2><p>第二范式要求数据库表满足第一范式的基础上，非主键列完全依赖于主键（如果主键是组合键，则必须完全依赖于整个组合键）。</p><p>例如，一个违反第二范式的表可能如下：</p><table><thead><tr><th>ID</th><th>Course</th><th>Teacher</th></tr></thead><tbody><tr><td>1</td><td>Math</td><td>张三</td></tr><tr><td>1</td><td>English</td><td>李四</td></tr></tbody></table><p>在这个例子中，“Teacher” 列只依赖于 “Course” 列，而不是整个主键 “ID, Course”，违反了第二范式。应该将其分割为两个表：</p><p>学生表：</p><table><thead><tr><th>ID</th><th>Course</th></tr></thead><tbody><tr><td>1</td><td>Math</td></tr><tr><td>1</td><td>English</td></tr></tbody></table><p>课程表：</p><table><thead><tr><th>Course</th><th>Teacher</th></tr></thead><tbody><tr><td>Math</td><td>张三</td></tr><tr><td>English</td><td>李四</td></tr></tbody></table><h2 id="3nf-第三范式"><a class="markdownIt-Anchor" href="#3nf-第三范式"></a> 3NF (第三范式)</h2><p>第三范式要求数据库表满足第二范式的基础上，非主键列必须直接依赖于主键，不能存在传递依赖。</p><p>例如，一个违反第三范式的表可能如下：</p><table><thead><tr><th>ID</th><th>Course</th><th>Teacher</th><th>Teacher_Age</th></tr></thead><tbody><tr><td>1</td><td>Math</td><td>张三</td><td>40</td></tr><tr><td>2</td><td>English</td><td>李四</td><td>35</td></tr></tbody></table><p>在这个例子中，“Teacher_Age” 列依赖于 “Teacher” 列，存在传递依赖，违反了第三范式。应该将其分割为两个表：</p><p>学生表：</p><table><thead><tr><th>ID</th><th>Course</th><th>Teacher</th></tr></thead><tbody><tr><td>1</td><td>Math</td><td>张三</td></tr><tr><td>2</td><td>English</td><td>李四</td></tr></tbody></table><p>教师表：</p><table><thead><tr><th>Teacher</th><th>Age</th></tr></thead><tbody><tr><td>张三</td><td>40</td></tr><tr><td>李四</td><td>35</td></tr></tbody></table><h2 id="bcnf-博伊斯-科德第四范式"><a class="markdownIt-Anchor" href="#bcnf-博伊斯-科德第四范式"></a> BCNF (博伊斯-科德第四范式)</h2><p>BCNF 要求数据库表满足第三范式的基础上，对任何的决定因素 X，X 必须是候选键。</p><p>例如，一个违反 BCNF 的表可能如下：</p><table><thead><tr><th>ID</th><th>Course</th><th>Teacher</th></tr></thead><tbody><tr><td>1</td><td>Math</td><td>张三</td></tr><tr><td>2</td><td>Math</td><td>李四</td></tr></tbody></table><p>在这个例子中，“Teacher” 列是 “Course” 列的决定因素，但 “Course” 列不是候选键，违反了 BCNF。应该将其分割为两个表：</p><p>学生表：</p><table><thead><tr><th>ID</th><th>Course</th></tr></thead><tbody><tr><td>1</td><td>Math</td></tr><tr><td>2</td><td>Math</td></tr></tbody></table><p>教师表：</p><table><thead><tr><th>Course</th><th>Teacher</th></tr></thead><tbody><tr><td>Math</td><td>张三</td></tr><tr><td>Math</td><td>李四</td></tr></tbody></table><h2 id="4nf-第四范式"><a class="markdownIt-Anchor" href="#4nf-第四范式"></a> 4NF (第四范式)</h2><p>第四范式要求数据库表满足 BCNF 的基础上，表中不能存在多值依赖。</p><p>例如，一个违反第四范式的表可能如下：</p><table><thead><tr><th>ID</th><th>Course</th><th>Hobby</th></tr></thead><tbody><tr><td>1</td><td>Math</td><td>Reading</td></tr><tr><td>1</td><td>Math</td><td>Swimming</td></tr></tbody></table><p>在这个例子中，“Course” 和 “Hobby” 列存在多值依赖，违反了第四范式。应该将其分割为两个表：</p><p>学生表：</p><table><thead><tr><th>ID</th><th>Course</th></tr></thead><tbody><tr><td>1</td><td>Math</td></tr></tbody></table><p>兴趣表：</p><table><thead><tr><th>ID</th><th>Hobby</th></tr></thead><tbody><tr><td>1</td><td>Reading</td></tr><tr><td>1</td><td>Swimming</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关笔记③</title>
      <link href="/93ec1257.html"/>
      <url>/93ec1257.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/7de2737b.html" title="数据库相关笔记①">数据库相关笔记①</a></li><li><a href="/ae543ed.html" title="数据库相关笔记②">数据库相关笔记②</a></li><li><a href="/93ec1257.html" title="数据库相关笔记③">数据库相关笔记③</a></li><li><a href="/e4eb22c1.html" title="数据库相关笔记④">数据库相关笔记④</a></li></ol><h1 id="integrity-constraints-ics-完整性约束"><a class="markdownIt-Anchor" href="#integrity-constraints-ics-完整性约束"></a> Integrity Constraints (ICs) 完整性约束</h1><p>完整性约束是数据库中的一种机制，用于确保数据的准确性和一致性。这些约束可以在创建表或之后的任何时间定义。主要有以下几种类型的完整性约束：</p><ul><li>主键约束（Primary Key Constraint）：确保列（或列组合）具有唯一的值，并且每个表中的每一行都有一个主键值。</li><li>唯一约束（Unique Constraint）：确保列（或列组合）的所有值都是唯一的。</li><li>外键约束（Foreign Key Constraint）：确保引用另一个表的数据的完整性。</li><li>非空约束（Not Null Constraint）：确保列不能有 NULL 值。</li><li>检查约束（Check Constraint）：确保列中的值满足指定的条件。</li></ul><h2 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h2><ul><li>数据一致性：完整性约束确保了数据库中的数据满足预定义的规则，从而保证了数据的一致性。</li><li>数据准确性：通过防止无效数据输入到数据库，完整性约束提高了数据的准确性。</li><li>避免冗余：主键和唯一约束避免了数据的冗余，提高了数据的效率。</li><li>引用完整性：外键约束保证了在相关表之间的数据的引用完整性。</li><li>业务规则实施：检查约束允许数据库在表级别实施业务规则。</li></ul><h2 id="static-integrity-constraints-静态完整性约束"><a class="markdownIt-Anchor" href="#static-integrity-constraints-静态完整性约束"></a> Static Integrity Constraints 静态完整性约束</h2><p>Static Integrity Constraints，也被称为静态完整性约束，是数据库中的一种约束，它要求数据库中的所有数据在任何时候都必须满足某些特定的条件。这些约束是在数据库定义时指定的，并且在数据库的整个生命周期中都保持不变。</p><p>静态完整性约束：</p><ul><li>键约束（Key Constraints）：确保某一列（或列的组合）在表中具有唯一值，每个表中的每一行都有一个主键值。</li><li>外键约束（Foreign Key Constraints）是数据库中的一种约束，它用于建立两个表之间的链接。外键是一个表中的字段，它的值匹配另一个表的主键。<br />例如，如果你有一个订单表和一个客户表，订单表中可能有一个客户 ID 字段，这个字段是客户表的主键的外键。外键约束会确保每个订单都对应一个真实存在的客户。</li><li>域约束（Domain Constraints）：这种约束定义了一个字段可以包含的值的范围。<br />例如，一个年龄字段可能被限制为只能包含 0 到 100 之间的整数。</li><li>域检查约束（Domain Check Constraints）是数据库中的一种约束，它定义了一个字段可以接受的值的范围或类型。<br />例如，如果你有一个年龄字段，你可能会设置一个域检查约束，以确保年龄字段只能包含 0 到 100 之间的整数。如果试图插入一个负数或超过 100 的值，数据库将拒绝这个操作并返回一个错误。（不是 我就不能活到 100 岁吗？）</li><li>参照完整性约束（Referential Integrity Constraints）：这种约束要求在一个表中引用另一个表的数据时，被引用的数据必须真实存在。<br />例如，如果一个订单表中有一个字段引用了客户表中的客户 ID，那么每个订单中的客户 ID 必须在客户表中有对应的记录。</li><li>语义完整性约束（Semantic Integrity Constraints）：这是一种更高级的约束，它涉及到数据的含义和业务规则。例如：<ul><li>一个规则可能是“员工的工资不能超过其经理的工资”。</li><li>学生的年龄不能小于 5 岁，也不能大于 30 岁。这是一个关于学生年龄的业务规则。</li><li>一个订单的总价不能小于其中所有商品价格的总和。这是一个关于订单和商品价格的业务规则。</li><li>一个员工的入职日期不能晚于他的离职日期。这是一个关于员工入职和离职日期的业务规则。</li></ul></li><li>完整性约束命名（Naming Integrity Constraints）是数据库设计中的一个重要步骤，它可以帮助你更好地理解和管理你的数据库约束。约束的命名应该清晰、简洁，并且能够准确地描述约束的作用。<br />例如，如果你有一个约束是确保员工的工资不能超过其经理的工资，你可以将这个约束命名为&quot;EmployeeSalaryLessThanManager&quot;。</li><li>断言（Assertions）：这是一种特殊类型的约束，它在整个数据库而不仅仅是单个表上定义条件。<br />例如，一个断言可能是“所有部门的总预算必须小于公司的总预算”</li></ul><h2 id="延迟约束检查deferring-constraint-checking"><a class="markdownIt-Anchor" href="#延迟约束检查deferring-constraint-checking"></a> 延迟约束检查（Deferring Constraint Checking）</h2><p>延迟约束检查（Deferring Constraint Checking）可以分为两种类型：不可延迟（Immediate）和可延迟（Deferrable）。</p><ul><li><p>不可延迟（Immediate）：这是默认的类型，数据库在每次数据变更（如 INSERT、UPDATE 或 DELETE）后立即检查约束。如果约束条件不满足，数据库将回滚变更并返回错误。</p></li><li><p>可延迟（Deferrable）：在这种类型下，数据库将约束检查推迟到事务结束时进行。这在某些情况下是非常有用的，例如，当你需要在同一个事务中更新两个相互引用的表时。</p></li></ul><h2 id="dynamic-integrity-constraints-动态完整性约束"><a class="markdownIt-Anchor" href="#dynamic-integrity-constraints-动态完整性约束"></a> Dynamic Integrity Constraints 动态完整性约束</h2><p>动态完整性约束（Dynamic Integrity Constraints）是数据库中的一种约束，它主要关注数据库状态的变化。这种约束通常用于确保数据库事务不会导致违反预定义规则的数据库状态。</p><p>动态完整性约束通常通过触发器（Triggers）或存储过程（Stored Procedures）来实现。例如，您可能有一个规则，即“库存数量不能小于 0”。当有一个事务试图将库存数量减少到 0 以下时，动态完整性约束会阻止这个事务的执行。</p><h2 id="触发器trigger"><a class="markdownIt-Anchor" href="#触发器trigger"></a> 触发器（Trigger）</h2><p>触发器（Trigger）通常由三部分组成：事件（Event）、前置条件（Precondition）和动作（Action）。</p><ul><li><p>事件（Event）：这是触发器被激活的数据库操作，例如 INSERT、UPDATE 或 DELETE。</p></li><li><p>前置条件（Precondition）：这是一个可选的测试，用于确定是否应执行触发器。例如，你可能只想在更新特定字段时才触发触发器。</p></li><li><p>动作（Action）：这是当触发器被激活时要执行的操作。这可以是一系列的 SQL 语句，例如，更新其他表，或者插入日志记录等。</p></li></ul><p>创建触发器（Create Trigger）通常需要以下几个步骤：</p><p>使用 CREATE TRIGGER 语句开始。</p><p>指定触发器的名称。</p><p>指定触发器的触发事件，可以是 INSERT、UPDATE 或 DELETE。</p><p>指定触发器的触发时间，可以是 BEFORE 或 AFTER。</p><p>在 BEGIN 和 END 之间编写触发器的动作，这可以是一系列的 SQL 语句。</p><p>以下是一个创建触发器的示例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> table_name</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在创建触发器时，你可以选择触发器是在每行数据变更时触发（FOR EACH ROW），还是在每个 SQL 语句执行时触发（FOR EACH STATEMENT）。</p><ul><li><p><code>FOR EACH ROW</code>：如果 INSERT、UPDATE 或 DELETE 影响多行数据，触发器会为每行数据执行一次。</p></li><li><p><code>FOR EACH STATEMENT</code>：无论 INSERT、UPDATE 或 DELETE 影响多少行数据，触发器只会执行一次。</p></li></ul><p>此外，你还可以使用 <code>OLD</code> 和 <code>NEW</code> 关键字来引用被修改的数据：</p><ul><li><p><code>OLD</code>：引用被删除或更新前的旧数据。</p></li><li><p><code>NEW</code>：引用将要插入或更新的新数据。</p></li></ul><h1 id="transaction-事务"><a class="markdownIt-Anchor" href="#transaction-事务"></a> Transaction 事务</h1><p>事务是数据库处理的基本单位，它是一系列操作，Begin 开始 Commit 结尾，这些操作要么全部执行，要么全部不执行。事务具有以下四个重要的属性，通常被称为 ACID 属性：</p><ul><li>原子性（Atomicity）：事务是一个不可分割的工作单位，事务中包含的操作要么全部完成，要么全部不做。</li><li>一致性（Consistency）：事务必须使数据库从一个一致性状态转变为另一个一致性状态。</li><li>隔离性（Isolation）：事务的执行不会被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性（Durability）：一旦事务提交，则其结果就是永久的，即使系统出现故障也不会丢失。</li></ul><h2 id="事务回滚transaction-rollback"><a class="markdownIt-Anchor" href="#事务回滚transaction-rollback"></a> 事务回滚（Transaction Rollback）</h2><p>在数据库中，<code>ROLLBACK</code> 是一个重要的命令，它用于撤销未提交的事务。如果在事务中的某个点发生错误，或者你决定不再需要事务中的更改，你可以使用 <code>ROLLBACK</code> 命令来撤销事务。</p><p>在 Python 中，你可以使用 sqlite3 库（或其他数据库库，如 psycopg2 对于 PostgreSQL，pymysql 对于 MySQL 等）来执行 ROLLBACK 操作。以下是一个基本的示例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import psycopg2</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">  # 连接到数据库</span><br><span class="line">  conn <span class="operator">=</span> psycopg2.connect(<span class="string">&#x27;my_database.db&#x27;</span>)</span><br><span class="line">  curs <span class="operator">=</span> conn.cursor()</span><br><span class="line"></span><br><span class="line">  # 执行一些<span class="keyword">SQL</span>操作</span><br><span class="line">  curs.execute(&quot;INSERT INTO my_table VALUES (?, ?)&quot;, (value1, value2))</span><br><span class="line"></span><br><span class="line">  # 提交事务</span><br><span class="line">  conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">  # 如果在事务中发生错误，回滚事务</span><br><span class="line">  print(&quot;An error occurred: &quot;, e)</span><br><span class="line">  conn.rollback()</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">  # 关闭数据库连接</span><br><span class="line">  curs.close()</span><br></pre></td></tr></table></figure><p>这段代码是 Python 操作数据库的一部分，主要包含了错误处理和数据库连接的清理工作。</p><ul><li><p><code>conn.commit()</code>：这是提交事务的操作。在数据库中，事务是一种保证数据一致性的机制。当你对数据库进行一系列操作（如 INSERT、UPDATE 或 DELETE）时，你可以将这些操作放在一个事务中，然后一起提交。如果在事务中的任何操作失败，整个事务都会被回滚，数据库将恢复到事务开始之前的状态。</p></li><li><p><code>except:</code>：这是 Python 的错误处理机制。如果在<code>try</code>块中的代码执行过程中发生任何错误，控制流将立即跳转到<code>except</code>块。</p></li><li><p><code>conn.rollback()</code>：这是回滚事务的操作。如果在事务中发生错误，你可以使用<code>rollback</code>方法撤销事务，数据库将恢复到事务开始之前的状态。</p></li></ul><h2 id="并发事务和串行化serializability"><a class="markdownIt-Anchor" href="#并发事务和串行化serializability"></a> 并发事务和串行化（Serializability）</h2><p>在数据库中，当多个事务同时访问和修改数据时，就会发生并发事务。为了保证数据的一致性和完整性，数据库系统需要对并发事务进行管理。</p><p>串行化（Serializability）是一种并发控制的方法，它要求并发事务的执行结果必须与某种串行执行的结果相同。换句话说，无论事务是并发执行还是串行执行，最终的数据库状态都应该是一样的。</p><p>假设我们有两个事务 T1 和 T2，它们都要操作同一份数据。</p><p>事务 T1：读取一个值，增加 100，然后写回。<br />事务 T2：读取同一个值，减少 50，然后写回。<br />如果这两个事务串行执行，即先执行 T1，然后执行 T2，那么最终的结果将是原始值增加 50。</p><p>但是，如果这两个事务并发执行，可能会出现以下情况：</p><p>T1 读取原始值。<br />T2 读取原始值。<br />T1 增加 100，写回新值。<br />T2 减少 50，写回新值。<br />在这种情况下，T1 的修改被 T2 覆盖，最终的结果是原始值减少 50，这与串行执行的结果不一致。</p><p>为了避免这种情况，我们需要使用串行化（Serializability）来保证并发事务的正确执行。在串行化的环境中，数据库系统会使用锁或其他并发控制机制来确保事务的执行结果与串行执行的结果一致。</p><h2 id="可串行调度serializable-schedule"><a class="markdownIt-Anchor" href="#可串行调度serializable-schedule"></a> 可串行调度（Serializable schedule）</h2><p>可串行调度（Serializable schedule）是数据库并发控制的一种策略，它要求并发事务的执行结果必须与某种串行执行的结果相同。换句话说，无论事务是并发执行还是串行执行，最终的数据库状态都应该是一样的。</p><p>在可串行调度中，数据库系统会使用各种并发控制机制（如两阶段锁定协议）来确保事务的执行结果与串行执行的结果一致。这样可以避免并发事务带来的各种问题，如丢失更新、脏读、不可重复读和幻读。</p><h2 id="冲突可串行化conflict-serializability"><a class="markdownIt-Anchor" href="#冲突可串行化conflict-serializability"></a> 冲突可串行化（Conflict Serializability）</h2><p>冲突可串行化（Conflict Serializability）是一种并发控制的策略，它要求并发事务的冲突操作（即对同一数据项的读写操作）的顺序必须与某种串行执行的顺序相同。</p><p>例子：我们有两个事务 T1 和 T2，它们分别操作两个不同的表 X 和 Y。</p><ul><li>事务 T1：读取表 X 的一个值（R1(X)），然后修改这个值（W1(X)）。</li><li>事务 T2：读取表 Y 的一个值（R2(Y)），然后修改这个值（W2(Y)）。</li></ul><p>如果这两个事务串行执行，即先执行 T1，然后执行 T2，那么执行顺序将是：R1(X), W1(X), R2(Y), W2(Y)。</p><p>但是，因为 T1 和 T2 操作的是不同的表，它们之间没有冲突操作。<br />这意味着，无论是并发执行还是串行执行，最终的结果都是一样的。这就是冲突可串行化的一个例子。</p><p>例子，我们有两个事务 T1 和 T2，它们都要操作同一份数据 X 和 Y。</p><ul><li>事务 T1：读取 X 和 Y 的值（R1(X), R1(Y)），然后修改这些值（W1(X), W1(Y)）。</li><li>事务 T2：读取 X 和 Y 的值（R2(X), R2(Y)），然后修改这些值（W2(X), W2(Y)）。</li></ul><p>如果这两个事务串行执行，即先执行 T1，然后执行 T2，<br />那么执行顺序将是：R1(X), R1(Y), W1(X), W1(Y), R2(X), R2(Y), W2(X), W2(Y)。</p><p>但是，如果我们尝试将这两个事务并发执行，可能会出现以下情况：</p><ol><li>T1 读取 X 的值（R1(X)）。</li><li>T1 读取 Y 的值（R1(Y)）。</li><li>T2 读取 X 的值（R2(X)）。</li><li>T2 读取 Y 的值（R2(Y)）。</li><li>T1 修改 Y 的值（W1(Y)）。</li><li>T2 修改 X 的值（W2(X)）。</li><li>T2 修改 Y 的值（W2(Y)）。</li><li>T1 修改 X 的值（W1(X)）。</li></ol><p>在这种情况下，我们可以看到，R2(X)与 W1(X)冲突，R2(Y)与 W1(Y)冲突，W2(X)与 W1(X)冲突，W1(Y)与 W1(X)冲突，因此这个调度是非冲突可串行化的。但是，R1(X)与 R2(X)不冲突，因为它们都是读操作。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关笔记②</title>
      <link href="/ae543ed.html"/>
      <url>/ae543ed.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/7de2737b.html" title="数据库相关笔记①">数据库相关笔记①</a></li><li><a href="/ae543ed.html" title="数据库相关笔记②">数据库相关笔记②</a></li><li><a href="/93ec1257.html" title="数据库相关笔记③">数据库相关笔记③</a></li><li><a href="/e4eb22c1.html" title="数据库相关笔记④">数据库相关笔记④</a></li></ol><h1 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h1><h2 id="introduction-to-sql"><a class="markdownIt-Anchor" href="#introduction-to-sql"></a> Introduction to SQL</h2><p>SQL is a <em>declarative language</em> which means that you use it to describe <em>what</em> data you are interested in, but not <em>how</em> it should be retrieved. The database system uses a variety of algorithms internally to produce the query result. With declarative languages such as SQL, you do not need to worry about these implementation details.</p><h3 id="query"><a class="markdownIt-Anchor" href="#query"></a> Query</h3><p>Your task is to write an SQL query. Your query must output the <code>name</code> and <code>age</code> of all students in the <code>Student</code> table.<br /><img src="../attach/s.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> Student</span><br></pre></td></tr></table></figure><h3 id="select-from"><a class="markdownIt-Anchor" href="#select-from"></a> Select * from</h3><p>The <code>*</code> (asterisk) wildcard is a useful shortcut when writing SQL queries. You can use the <code>*</code> wildcard in the <code>SELECT</code> clause to refer to a complete tuple of a table with all its attributes.</p><p>Your task is to write an SQL query. Your query must output all entries in the <code>Student</code> table and all available <code>Student</code> attributes.<br /><img src="../attach/s.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure><h3 id="where-clause-and-strings"><a class="markdownIt-Anchor" href="#where-clause-and-strings"></a> WHERE Clause and Strings</h3><blockquote><p>Strings <strong>must</strong> be enclosed in <strong>single quotes</strong> (<code>'example'</code>).</p></blockquote><p>Your task is to write an SQL query to output the result list for <code>'INFO2120'</code>, using data in the <code>Enrolled</code> table.<br />Your query’s result should have two columns:</p><ol><li>the <code>studentId</code> of each student who took INFO2120 at any point in time (ignore which year or semester the subject was taught);</li><li>the <code>grade</code> that student received for INFO2120.<br /><img src="../attach/s.png" alt="" /></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> studentid,grade <span class="keyword">from</span> enrolled <span class="keyword">where</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="count"><a class="markdownIt-Anchor" href="#count"></a> COUNT</h3><p>在 SQL 中,除了<code>COUNT(*)</code>函数外,其他的聚合函数如 SUM、AVG、MIN、MAX 在遇到 NULL 值时,会自动将 NULL 值忽略掉。<br />只有<code>COUNT(*)</code>不忽略 NULL</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(mark) <span class="keyword">FROM</span> Assessments</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回 Assessments 表中 mark 列的平均值，忽略空值。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Assessments</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回 Assessments 表中的记录总数，不会忽略空值</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(mark) <span class="keyword">FROM</span> Assessments</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回 Assessments 表中 mark 列中非空值的计数，忽略空值。</span></span><br></pre></td></tr></table></figure><h3 id="distinct"><a class="markdownIt-Anchor" href="#distinct"></a> Distinct</h3><p>SQL 中，count 函数如果不加 distinct 的话会计算重复的行数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(city)</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"></span><br><span class="line"><span class="comment">--计算 Customers 表中 city 列中所有值的计数。这将包括重复的城市名称。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> city)</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"></span><br><span class="line"><span class="comment">--计算 Customers 表中 city 列中唯一值的计数。这将仅包括城市的唯一名称。</span></span><br></pre></td></tr></table></figure><p>但这些聚合函数会去计算重复的 attribute，如果 unique 限制条件没有给出来的话</p><p>查找一共有多少学生注册</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Enrolled</span><br></pre></td></tr></table></figure><p>和这个是一样的</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">FROM</span> Enrolled</span><br></pre></td></tr></table></figure><p>找到 9120 最高分</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(mark)</span><br><span class="line"><span class="keyword">FROM</span> Assessment</span><br><span class="line"><span class="keyword">WHERE</span> uos_code <span class="operator">=</span> <span class="string">&#x27;COMP9120&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ddl-data-definition-language"><a class="markdownIt-Anchor" href="#ddl-data-definition-language"></a> DDL (Data Definition Language)</h2><h3 id="create-table"><a class="markdownIt-Anchor" href="#create-table"></a> CREATE TABLE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> <span class="operator">&lt;</span>tablename<span class="operator">&gt;</span> (</span><br><span class="line">  <span class="operator">&lt;</span>attr1<span class="operator">&gt;</span> <span class="operator">&lt;</span>TYPE1<span class="operator">&gt;</span>,</span><br><span class="line">  <span class="operator">&lt;</span>attr2<span class="operator">&gt;</span> <span class="operator">&lt;</span>TYPE2<span class="operator">&gt;</span>,</span><br><span class="line">  ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="consistency-constraints"><a class="markdownIt-Anchor" href="#consistency-constraints"></a> Consistency Constraints</h3><p><code>PRIMARY KEY</code><br />Declares an attribute (or several) as <em>the</em> unique identifier for rows in the table.</p><p><code>NOT NULL</code><br />Forces every row in the table to have a value for this attribute.</p><p><code>DEFAULT &lt;default_value&gt;</code><br />Specify a default value for an attribute.</p><h3 id="foreign-key-constraints"><a class="markdownIt-Anchor" href="#foreign-key-constraints"></a> Foreign Key Constraints</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> Film_Actor (</span><br><span class="line"> actor_id <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Actor(actor_id),</span><br><span class="line"> film_id  <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Film(film_id),</span><br><span class="line"> <span class="keyword">PRIMARY KEY</span> (actor_id, film_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="drop-table"><a class="markdownIt-Anchor" href="#drop-table"></a> DROP TABLE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>tablename<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>Write an SQL DDL statement that extends the DVD Shop database with an additional table for film studios, called <code>Studio</code>. Each <code>Studio</code> must have:</p><ol><li>a unique <code>studio_id</code> identifier (integer)</li><li>a <code>name</code> of up-to 50 characters length which must be given</li><li>an <code>address</code> (up-to 100 chars long)</li><li>a specific <code>country</code> (store the short code)<br />Make sure that the studio’s <code>country</code> references the <code>Country</code> table. Both <code>country</code> and <code>name</code> must always be stored for a <code>Studio</code>, but the <code>address</code> is optional.</li></ol><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> Studio(</span><br><span class="line">    studio_id <span class="type">int</span> <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not null</span>,</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    country <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not null</span>,</span><br><span class="line">    <span class="keyword">foreign key</span> (country) <span class="keyword">references</span> country (short_code)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dml-data-manipulation-language"><a class="markdownIt-Anchor" href="#dml-data-manipulation-language"></a> DML (Data Manipulation Language)</h2><h3 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> <code>INSERT</code></h3><p>Used to insert a new row into a table.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> <span class="operator">&lt;</span>tablename<span class="operator">&gt;</span> <span class="keyword">VALUES</span> (...);</span><br></pre></td></tr></table></figure><h3 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> <code>DELETE</code></h3><p>Used to delete zero or more rows from a table.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>tablename<span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">&lt;</span><span class="keyword">condition</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="update"><a class="markdownIt-Anchor" href="#update"></a> <code>UPDATE</code></h3><p>Used to update the content of zero or more rows in a table.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>tablename<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="operator">&lt;</span>expression<span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">&lt;</span><span class="keyword">condition</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="example-2"><a class="markdownIt-Anchor" href="#example-2"></a> Example</h3><p><img src="../attach/f.png" alt="" /><br />Add a new actor into the <code>Actor</code> table for <code>'Arnold Schwarzenegger'</code> with ID <code>4711</code>. Arnold is born in Austria.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> actor <span class="keyword">values</span>(<span class="number">4711</span>,<span class="string">&#x27;Arnold&#x27;</span>,<span class="string">&#x27;Schwarzenegger&#x27;</span>,<span class="string">&#x27;AT&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Update the database so that <code>rental_rate</code> of the <code>Film</code> <code>'ANGELS LIFE'</code> is increased by 20%.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> film</span><br><span class="line"><span class="keyword">set</span> rental_rate <span class="operator">=</span> <span class="number">1.2</span> <span class="operator">*</span> rental_rate</span><br><span class="line"><span class="keyword">where</span> title <span class="operator">=</span> <span class="string">&#x27;ANGELS LIFE&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="where-range-queries"><a class="markdownIt-Anchor" href="#where-range-queries"></a> WHERE (Range Queries)</h2><p><strong><em>point queries</em></strong></p><p>search for individual database entries, typically specified with an equality (<code>=</code>) condition.</p><p><strong><em>range queries</em></strong></p><p>select multiple rows in a defined value range.</p><table><thead><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr></thead><tbody><tr><td>=</td><td>equal to</td><td>WHERE age = 20</td></tr><tr><td>&gt;</td><td>greater than</td><td>WHERE age &gt; 20</td></tr><tr><td>&gt;=</td><td>greater than or equal</td><td>WHERE age &gt;= 20</td></tr><tr><td>&lt;</td><td>smaller than</td><td>WHERE age &lt; 20</td></tr><tr><td>&lt;=</td><td>smaller than or equal</td><td>WHERE age &lt;= 20</td></tr><tr><td>&lt;&gt; / !=</td><td>unequal to</td><td>WHERE age != 20</td></tr><tr><td>between</td><td>between start and end value (inclusive)</td><td>WHERE age between 20 and 25</td></tr><tr><td>in</td><td>set of valid values</td><td>WHERE age in (20,21,22)</td></tr></tbody></table><h2 id="order-by"><a class="markdownIt-Anchor" href="#order-by"></a> ORDER BY</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studentId, age</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>, name <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>``<br /><code>DESC</code>: Z-A  大到小<br /><code>ASC</code>: A-Z 小到大</p><h2 id="distinct-2"><a class="markdownIt-Anchor" href="#distinct-2"></a> DISTINCT</h2><p>DISTINCT 关键字用于返回结果集中唯一不同的值。你可以在 SELECT 语句中使用它来消除重复的行。</p><p>虽然我们可以使用 <code>DISTINCT</code> 关键字删除结果中的重复项，但我们也可以使用 <code>ALL</code> 显式保留它们</p><h2 id="like"><a class="markdownIt-Anchor" href="#like"></a> LIKE</h2><ul><li><code>%</code> matches any string of 0 to unlimited many characters</li><li><code>_</code> matches exactly one character</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;Database%&#x27;</span><span class="comment">--以Database开头</span></span><br><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;%Database&#x27;</span><span class="comment">--以Database结尾</span></span><br><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;%Database%&#x27;</span><span class="comment">--包含Database %代表所有其他的东西</span></span><br><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;INFO1___&#x27;</span><span class="comment">--以INFO1开头 三个_占位符结尾</span></span><br></pre></td></tr></table></figure><p>注意默认情况下，SQL 的 <code>LIKE</code> 比较区分大小写</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> uosName <span class="keyword">LIKE</span> <span class="string">&#x27;%systems%&#x27;</span>;</span><br><span class="line"><span class="comment">--严格区分大小写 如果uosName里面有Systems就不匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">LOWER</span>(uosName) <span class="keyword">LIKE</span> <span class="string">&#x27;%systems%&#x27;</span>;</span><br><span class="line"><span class="comment">--把uosName列都变小写和like里面的匹配 原来里面包含Systems的就变成systems了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">UPPER</span>(uosName) <span class="keyword">LIKE</span> <span class="string">&#x27;%SYSTEMS%&#x27;</span>;</span><br><span class="line"><span class="comment">--把uosName列都变大写和like里面的匹配 原来里面包含Systems的就变成SYSTEMS了</span></span><br></pre></td></tr></table></figure><h2 id="null-values"><a class="markdownIt-Anchor" href="#null-values"></a> NULL Values</h2><p>查询还没有成绩的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sid</span><br><span class="line"><span class="keyword">FROM</span> Assessment</span><br><span class="line"><span class="keyword">WHERE</span> mark <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>利用 IS NULL 或者 IS NOT NULL 可以在 SQL 中查找 nulI 值<br />任何包含 NULL 的算术表达式的结果为空，<br />如 3+NuII 还是 Null<br />任何比较符号如&gt;，&lt;等，和 Null 一起返回 Unknown<br />在 where 子句中，其会将 Unknown 认定为 false</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sid</span><br><span class="line"><span class="keyword">FROM</span> Assessment</span><br><span class="line"><span class="keyword">WHERE</span> mark <span class="operator">&lt;</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ignores all students without a mark so far</span></span><br><span class="line"><span class="comment">--忽略没有成绩的学生</span></span><br></pre></td></tr></table></figure><h3 id="three-valued-logic-for-boolean-operations"><a class="markdownIt-Anchor" href="#three-valued-logic-for-boolean-operations"></a> Three-valued logic for Boolean operations</h3><p>这段内容是关于 SQL 中的三值逻辑（3VL）的。在 SQL 中，布尔值不仅可以是 TRUE 或 FALSE，还可以是 UNKNOWN。这主要是因为 SQL 需要处理 NULL 值，而 NULL 在 SQL 中表示未知或缺失的值。因此，当我们在 SQL 中进行逻辑运算时，需要考虑到 UNKNOWN 这种情况。</p><p>以下是对这段内容的详细解释：</p><ul><li><p><code>OR</code> 运算：如果其中一个值为 TRUE，则结果为 TRUE，无论另一个值是什么。如果其中一个值为 FALSE，另一个值为 UNKNOWN，则结果为 UNKNOWN。如果两个值都为 UNKNOWN，则结果为 UNKNOWN。</p></li><li><p><code>AND</code> 运算：如果其中一个值为 FALSE，则结果为 FALSE，无论另一个值是什么。如果其中一个值为 TRUE，另一个值为 UNKNOWN，则结果为 UNKNOWN。如果两个值都为 UNKNOWN，则结果为 UNKNOWN。</p></li><li><p><code>NOT</code> 运算：如果值为 UNKNOWN，则结果仍为 UNKNOWN。因为我们不能确定未知值的非（NOT）是什么。</p></li></ul><p>这就是为什么在 SQL 中，当我们处理包含 NULL 值的数据时，需要特别小心。因为 NULL 值会影响逻辑运算的结果。</p><ul><li>OR:<ul><li>(unknown OR true) = true</li><li>(unknown OR false) = unknown</li><li>(unknown OR unknown) = unknown</li></ul></li><li>AND:<ul><li>(true AND unknown) = unknown</li><li>(false AND unknown) = false</li><li>(unknown AND unknown) = unknown</li></ul></li><li>NOT:<ul><li>(NOT unknown) = unknown</li></ul></li></ul><p><img src="../attach/qwuiheoiqwe.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">25</span></span><br><span class="line"><span class="keyword">OR</span> age <span class="operator">&gt;=</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--此 SQL 查询返回了表 `Person` 中所有年龄小于 25 岁或年龄大于或等于 25 岁的记录。年龄未知的人员将不会包含在结果集中。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">25</span></span><br><span class="line"><span class="keyword">OR</span> age <span class="operator">&gt;=</span> <span class="number">25</span></span><br><span class="line"><span class="keyword">OR</span> age <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--此 SQL 查询返回了表 `Person` 中所有具有以下条件的记录：</span></span><br><span class="line"><span class="comment">--年龄小于 25 岁</span></span><br><span class="line"><span class="comment">--年龄大于或等于 25 岁</span></span><br><span class="line"><span class="comment">--年龄未知</span></span><br><span class="line"><span class="comment">--这将导致返回表中所有记录，包括那些年龄未知的记录。</span></span><br></pre></td></tr></table></figure><h3 id="making-null-visible"><a class="markdownIt-Anchor" href="#making-null-visible"></a> Making NULL Visible</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\pset <span class="keyword">null</span> <span class="string">&#x27;[NULL]&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Enrolled;</span><br></pre></td></tr></table></figure><h3 id="coalesce-function"><a class="markdownIt-Anchor" href="#coalesce-function"></a> COALESCE Function</h3><p>The <code>COALESCE(</code> <strong><em>expr</em></strong> <code>,</code> <strong><em>value_if_null</em></strong> <code>)</code> function returns the second argument (<strong><em>value_if_null</em></strong>) if the expression in the first argument (<strong><em>expr</em></strong>) evaluates to <code>NULL</code>.<br />如果第一个参数 (expr) 中的表达式计算为 <code>NULL</code> ，则 <code>COALESCE(</code> expr <code>,</code> value_if_null <code>)</code> 函数返回第二个参数 (value_if_null)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studentId, <span class="built_in">COALESCE</span>(grade, <span class="string">&#x27;[UNKNOWN]&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> Enrolled;</span><br></pre></td></tr></table></figure><h2 id="view"><a class="markdownIt-Anchor" href="#view"></a> VIEW</h2><p>The <code>CREATE VIEW</code> DDL statement extends the current database schema with a new <em>view</em>:<br />Views ≠ Tables<br />Existing views can be removed with the <code>DROP VIEW</code> command. The general syntax is:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>viewname<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>Your task is to write an SQL DDL statement which creates a new view called <code>LengthyDramas</code>. This view should list all <code>'drama'</code> films (as mentioned in their <code>description</code> <em>regardless of capitalisation</em>) which have a running time over <code>90</code> minutes. Your view needs to have the following attributes:</p><ol><li><code>id</code> - the <code>film_id</code> of each drama</li><li><code>title</code> - the <code>title</code> of each drama</li><li><code>year</code> - the <code>release_year</code> of each drama</li><li><code>minutes</code> - the <code>length</code> of each drama<br />Your view also needs to list dramas in reverse order of their running time (<code>minutes</code>). Any dramas with the same running time should be further sorted in alphabetical order by their <code>title</code>.</li></ol><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> LengthyDramas <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> film_id <span class="keyword">as</span> id,</span><br><span class="line">title <span class="keyword">as</span> title,</span><br><span class="line">release_year <span class="keyword">as</span> <span class="keyword">year</span>,</span><br><span class="line">length <span class="keyword">as</span> minutes</span><br><span class="line"><span class="keyword">from</span> film</span><br><span class="line"><span class="keyword">where</span> <span class="built_in">LOWER</span>(description) <span class="keyword">like</span> <span class="string">&#x27;%drama%&#x27;</span></span><br><span class="line"><span class="keyword">and</span> length <span class="operator">&gt;</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> length <span class="keyword">desc</span>,</span><br><span class="line">title <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> LengthyDramas</span><br></pre></td></tr></table></figure><h2 id="join"><a class="markdownIt-Anchor" href="#join"></a> JOIN</h2><h3 id="equi-join"><a class="markdownIt-Anchor" href="#equi-join"></a> Equi-Join</h3><p>Your task is to write an SQL query that finds the number of actors who acted in the <code>Film</code> entitled <code>'ALONE TRIP'</code>. Your query should return just the number of actors.</p><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(actor_id) <span class="keyword">from</span></span><br><span class="line">Film_Actor,Film</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">Film_Actor.film_id <span class="operator">=</span> Film.film_id</span><br><span class="line"><span class="keyword">and</span> title <span class="operator">=</span> <span class="string">&#x27;ALONE TRIP&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="multiple-explicit-equi-join"><a class="markdownIt-Anchor" href="#multiple-explicit-equi-join"></a> Multiple Explicit Equi-Join</h3><p>Your task is to write an SQL query that lists the <code>title</code> of every <code>Film</code> in which the <code>Actor</code> named <code>JOHNNY CAGE</code> has appeared. The titles should be in alphabetical order.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.title <span class="keyword">from</span></span><br><span class="line">Film A,Film_Actor B,Actor C</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">A.film_id <span class="operator">=</span> B.film_id</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">B.actor_id <span class="operator">=</span> C.actor_id</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">C.first_name <span class="operator">=</span> <span class="string">&#x27;JOHNNY&#x27;</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">C.last_name <span class="operator">=</span> <span class="string">&#x27;CAGE&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> A.title <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h3 id="natural-join"><a class="markdownIt-Anchor" href="#natural-join"></a> Natural Join</h3><p>Natural Join 两个表一定要有一个公共属性是一样的才行</p><h4 id="natural-join-vs-explicit-equi-join"><a class="markdownIt-Anchor" href="#natural-join-vs-explicit-equi-join"></a> Natural Join vs. Explicit Equi-Join</h4><p><img src="../attach/s.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Enrolled</span><br><span class="line"> <span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> Student S, Enrolled E</span><br><span class="line"> <span class="keyword">WHERE</span> S.studentId <span class="operator">=</span> E.studentId</span><br><span class="line">       <span class="keyword">AND</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="multi-way-natural-joins"><a class="markdownIt-Anchor" href="#multi-way-natural-joins"></a> Multi-way Natural Joins</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studentId, name</span><br><span class="line">  <span class="keyword">FROM</span> (Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Enrolled E)</span><br><span class="line">                <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> UnitOfStudy</span><br><span class="line"> <span class="keyword">WHERE</span> uosName <span class="operator">=</span> <span class="string">&#x27;Database Systems I&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="example-3"><a class="markdownIt-Anchor" href="#example-3"></a> Example</h4><p>Your task is to write an SQL query that lists every <code>Film</code> in the <code>Category</code> <code>'Horror'</code> that is rated <code>'R'</code>, in alphabetical order by <code>title</code>. Your query should return these attributes:</p><ol><li><code>film_id</code>;</li><li><code>title</code>; and</li><li><code>release_year</code>.<br />Try to make use of SQL’s <code>NATURAL JOIN</code> operator in your answer.</li></ol><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> film_id,title,release_year <span class="keyword">from</span></span><br><span class="line">(Film_Category <span class="keyword">natural</span> <span class="keyword">join</span> Category)</span><br><span class="line"><span class="keyword">natural</span> <span class="keyword">join</span> Film</span><br><span class="line"><span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Horror&#x27;</span></span><br><span class="line"><span class="keyword">and</span> rating <span class="operator">=</span> <span class="string">&#x27;R&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h3 id="inner-join"><a class="markdownIt-Anchor" href="#inner-join"></a> Inner Join</h3><p><code>r1 JOIN r2 ON (</code> <em>condition</em> <code>)</code></p><p><code>r1 JOIN r2 USING (</code> <em>field(s)</em> <code>)</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>, name</span><br><span class="line">  <span class="keyword">FROM</span> AcademicStaff</span><br><span class="line">       <span class="keyword">JOIN</span> Lecture <span class="keyword">ON</span> (id <span class="operator">=</span> lecturer)</span><br><span class="line"> <span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;COMP5138&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="further-join-examples"><a class="markdownIt-Anchor" href="#further-join-examples"></a> Further JOIN Examples</h4><p>以下查询查找所有学分点数少于 info2120 的研究单位。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> U2.uoscode, U2.credits</span><br><span class="line">  <span class="keyword">FROM</span> UnitOfStudy U1 <span class="keyword">JOIN</span> UnitOfStudy U2</span><br><span class="line">                        <span class="keyword">ON</span> (U2.credits <span class="operator">&lt;</span> U1.credits)</span><br><span class="line"> <span class="keyword">WHERE</span> U1.uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> U2.uoscode, U2.credits</span><br><span class="line">  <span class="keyword">FROM</span> UnitOfStudy U1 <span class="keyword">JOIN</span> UnitOfStudy U2</span><br><span class="line">       <span class="keyword">ON</span> (U1.uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span></span><br><span class="line">           <span class="keyword">AND</span> U2.credits <span class="operator">&lt;</span> U1.credits);</span><br></pre></td></tr></table></figure><h4 id="using"><a class="markdownIt-Anchor" href="#using"></a> Using</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line">  <span class="keyword">FROM</span> Student</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Enrolled <span class="keyword">USING</span> (studentId)</span><br><span class="line"> <span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h4><p><img src="../attach/f.png" alt="" /><br />Your task is to write an SQL query that lists the <code>first_name</code> and <code>last_name</code> of every <code>Actor</code> who played in the <code>Film</code> entitled <code>'AMERICAN CIRCUS'</code>, in alphabetical order by last name. Try to use SQL’s <code>INNER JOIN</code> operator in your answer.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> first_name,last_name <span class="keyword">from</span></span><br><span class="line">(Actor <span class="keyword">inner</span> <span class="keyword">join</span> Film_Actor <span class="keyword">using</span>(actor_id) )</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Film <span class="keyword">using</span>(film_id)</span><br><span class="line"><span class="keyword">where</span> title  <span class="operator">=</span> <span class="string">&#x27;AMERICAN CIRCUS&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> last_name <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><p>Your task is to write an SQL query that lists all film sub-categories and their corresponding parent categories. Your query’s result should contain the following attributes：</p><ol><li><code>category_id</code>;</li><li><code>category</code> - the name of the category; and</li><li><code>parent</code> - the name of the category’s parent category.<br />You should ignore any category which does not have a parent category, i.e. your query’s result table should contain no <code>NULL</code>s.</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.category_id,</span><br><span class="line">A.name <span class="keyword">as</span> category,</span><br><span class="line">B.name <span class="keyword">as</span> parent</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">Category A <span class="keyword">inner</span> <span class="keyword">join</span> Category B</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">A.parent_cat <span class="operator">=</span> B.category_id</span><br><span class="line"><span class="keyword">where</span> A.parent_cat <span class="keyword">is</span> <span class="keyword">not null</span></span><br></pre></td></tr></table></figure><p>We are looking for the correct way to join two tables which have no attributes in common. The following query tries to find the <code>Country</code> <code>name</code> for the <code>nationality</code> of every <code>Actor</code> with last name <code>'DEPP'</code>:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name,</span><br><span class="line">       name <span class="keyword">AS</span> country_name</span><br><span class="line">  <span class="keyword">FROM</span> Actor <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Country</span><br><span class="line"> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;DEPP&#x27;</span>;</span><br><span class="line"> <span class="comment">--这个是错误的示范 因为Actor和Country表里面相同那一列的属性名字不一样</span></span><br><span class="line"> <span class="comment">--所以不能用NATURAL JOIN</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name,</span><br><span class="line">       name <span class="keyword">AS</span> country_name</span><br><span class="line">  <span class="keyword">FROM</span> Actor <span class="keyword">JOIN</span> Country <span class="keyword">ON</span> (nationality <span class="operator">=</span> short_code)</span><br><span class="line"> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;DEPP&#x27;</span>;</span><br><span class="line"> <span class="comment">--这个才是正确的 用Actor的nationality去join表Country的short_code</span></span><br></pre></td></tr></table></figure><h3 id="outer-joins"><a class="markdownIt-Anchor" href="#outer-joins"></a> Outer Joins</h3><h4 id="左外连接left-outer-join"><a class="markdownIt-Anchor" href="#左外连接left-outer-join"></a> 左外连接（LEFT OUTER JOIN）</h4><p>左外连接（LEFT OUTER JOIN）返回左表中的所有行和右表中匹配的行。如果右表中没有匹配的行，则结果中的对应行将包含 NULL。</p><p>例如，我们有两个表，表 A 和表 B：</p><p>表 A：</p><table><thead><tr><th>A_id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr></tbody></table><p>表 B：</p><table><thead><tr><th>B_id</th><th>Name</th></tr></thead><tbody><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr><tr><td>4</td><td>赵六</td></tr></tbody></table><p>如果我们进行左外连接（以 Name 为连接条件），结果将如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.Name <span class="operator">=</span> B.Name;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>A_id</th><th>Name</th><th>B_id</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>NULL</td></tr><tr><td>2</td><td>李四</td><td>2</td></tr><tr><td>3</td><td>王五</td><td>3</td></tr></tbody></table><h4 id="右外连接right-outer-join"><a class="markdownIt-Anchor" href="#右外连接right-outer-join"></a> 右外连接（RIGHT OUTER JOIN）</h4><p>右外连接（RIGHT OUTER JOIN）返回右表中的所有行和左表中匹配的行。如果左表中没有匹配的行，则结果中的对应行将包含 NULL。</p><p>如果我们进行右外连接（以 Name 为连接条件），结果将如下：</p><table><thead><tr><th>A_id</th><th>Name</th><th>B_id</th></tr></thead><tbody><tr><td>2</td><td>李四</td><td>2</td></tr><tr><td>3</td><td>王五</td><td>3</td></tr><tr><td>NULL</td><td>赵六</td><td>4</td></tr></tbody></table><h4 id="全外连接full-outer-join"><a class="markdownIt-Anchor" href="#全外连接full-outer-join"></a> 全外连接（FULL OUTER JOIN）</h4><p>全外连接（FULL OUTER JOIN）返回左表和右表中的所有行。如果左表和右表中的行在连接条件上没有匹配，那么结果表中的对应行将包含 NULL。</p><p>如果我们进行全外连接（以 Name 为连接条件），结果将如下：</p><table><thead><tr><th>A_id</th><th>Name</th><th>B_id</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>NULL</td></tr><tr><td>2</td><td>李四</td><td>2</td></tr><tr><td>3</td><td>王五</td><td>3</td></tr><tr><td>NULL</td><td>赵六</td><td>4</td></tr></tbody></table><h4 id="examples-2"><a class="markdownIt-Anchor" href="#examples-2"></a> Examples</h4><p>Your task is to write an SQL query to return the title of all films released in <code>2004</code> and all cast members (<code>Actor</code>s) who played in those films. Your query should return the following columns:</p><ul><li>Title of the <code>Film</code>;</li><li>First name of the <code>Actor</code>, or <code>N/A</code> if the film has no actors; and</li><li>Last name of the <code>Actor</code>, or <code>N/A</code> if the film has no actors.</li></ul><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> title,</span><br><span class="line"><span class="built_in">COALESCE</span>(first_name,<span class="string">&#x27;N/A&#x27;</span>) <span class="keyword">as</span> actor_firstname,</span><br><span class="line"><span class="built_in">COALESCE</span>(last_name,<span class="string">&#x27;N/A&#x27;</span>) <span class="keyword">as</span> actor_lastname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(Film <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> Film_Actor <span class="keyword">using</span> (film_id))</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> Actor <span class="keyword">using</span> (actor_id)</span><br><span class="line"><span class="keyword">where</span> release_year <span class="operator">=</span> <span class="number">2004</span></span><br></pre></td></tr></table></figure><h2 id="set-operations"><a class="markdownIt-Anchor" href="#set-operations"></a> Set Operations</h2><h3 id="union"><a class="markdownIt-Anchor" href="#union"></a> UNION</h3><h3 id="intersect"><a class="markdownIt-Anchor" href="#intersect"></a> INTERSECT</h3><h3 id="except"><a class="markdownIt-Anchor" href="#except"></a> EXCEPT</h3><h3 id="examples-3"><a class="markdownIt-Anchor" href="#examples-3"></a> Examples</h3><p>The set operators require that all input relations have the same schema. In other words, queries that are combined with either <code>UNION</code>, <code>INTERSECT</code>, or <code>EXCEPT</code> need to return their result in the same format.</p><p>The following query tries to identify all countries which have at least one actor named ‘DEPP’:</p><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> name</span><br><span class="line">    <span class="keyword">FROM</span> Country</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> actor_id, nationality</span><br><span class="line">    <span class="keyword">FROM</span> Actor</span><br><span class="line">   <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;DEPP&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">--错误的示范</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> Short_code <span class="keyword">as</span> name</span><br><span class="line">    <span class="keyword">FROM</span> Country</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> nationality</span><br><span class="line">    <span class="keyword">FROM</span> Actor</span><br><span class="line">   <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;DEPP&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">--正确的示范</span></span><br><span class="line"><span class="comment">--第一点 用intersect的话 要保证两个表的 规格是一样的 不能第一个表只有一列而第二个表有两列</span></span><br><span class="line"><span class="comment">--第二点 你得有相同的值 才能用intersect交集 上面的国家名就分缩写和全程两种</span></span><br></pre></td></tr></table></figure><h3 id="duplicates-in-set-results"><a class="markdownIt-Anchor" href="#duplicates-in-set-results"></a> Duplicates in Set Results</h3><p>By default, the set operations return results without duplicates. If you need to keep all input values, even if they occur multiple times in the result, you can use a set operation with the <code>ALL</code> keyword.<br />默认情况下，set 操作返回无重复项的结果。如果需要保留所有输入值，即使它们在结果中多次出现，也可以使用带有 <code>ALL</code> 关键字的设置操作。</p><p>The same <code>ALL</code> modifier is available to all set operators:</p><ul><li><code>UNION ALL</code> see above</li><li><code>INTERSECT ALL</code> keeps duplicates in intersections</li><li><code>EXCEPT ALL</code> keeps duplicates after set difference</li></ul><h2 id="cross-join"><a class="markdownIt-Anchor" href="#cross-join"></a> CROSS JOIN</h2><p>笛卡尔积<br /><img src="https://s2.loli.net/2024/04/01/qrbJnw2xajgILtH.png" alt="image.png" /></p><p>Your task is to write an SQL query that finds all entries in the Actor table where the <code>first_name</code> and <code>last_name</code> are the same as another actor’s first and last names.</p><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.actor_id,A.first_name,A.last_name</span><br><span class="line"><span class="keyword">from</span> Actor A <span class="keyword">cross</span> <span class="keyword">join</span> Actor B</span><br><span class="line"><span class="keyword">where</span> A.first_name <span class="operator">=</span> B.first_name</span><br><span class="line"><span class="keyword">and</span> A.last_name <span class="operator">=</span> B.last_name</span><br><span class="line"><span class="keyword">and</span> A.actor_id <span class="operator">!=</span> B.actor_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> A.first_name <span class="keyword">asc</span>,</span><br><span class="line">A.last_name <span class="keyword">asc</span>,</span><br><span class="line">A.actor_id <span class="keyword">asc</span></span><br><span class="line"><span class="comment">--这个地方是找到同名同姓的不同演员 就先用笛卡尔集 把这个表与它自己相乘</span></span><br><span class="line"><span class="comment">--相当于把它复制了一份放在右边</span></span><br></pre></td></tr></table></figure><h2 id="mathematical-operators-in-select"><a class="markdownIt-Anchor" href="#mathematical-operators-in-select"></a> Mathematical operators in SELECT</h2><p><img src="../attach/dasioduasoiduaspod.png" alt="" /></p><p>Select 子句中可以包含加减乘除</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID,title,Salary<span class="operator">*</span><span class="number">2</span> <span class="keyword">FROM</span> Staff</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID,title,Salary<span class="number">-2000</span> <span class="keyword">FROM</span> Staff</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID,title,Salary<span class="operator">/</span><span class="number">2</span> <span class="keyword">FROM</span> Staff</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID,title,Salary<span class="operator">+</span><span class="number">2000</span> <span class="keyword">FROM</span> Staff</span><br></pre></td></tr></table></figure><h2 id="mathematical-functions-in-sql"><a class="markdownIt-Anchor" href="#mathematical-functions-in-sql"></a> Mathematical functions in SQL</h2><p>它们通常用在 <code>SELECT</code> 语句或 <code>WHERE</code> 子句中。这些函数包括：</p><ol><li><code>mod(a, b)</code>：计算 <code>a</code> 除以 <code>b</code> 的余数。 示例：<code>SELECT mod(10, 3);</code> 这将返回 <code>1</code>，因为 <code>10</code> 除以 <code>3</code> 的余数是 <code>1</code>。</li><li><code>round(n, d)</code>：将数字 <code>n</code> 四舍五入到小数点后 <code>d</code> 位。 示例：<code>SELECT round(3.14159, 2);</code> 这将返回 <code>3.14</code>。</li><li><code>trunc(n, d)</code>：将数字 <code>n</code> 截断到小数点后 <code>d</code> 位，不进行四舍五入。 示例：<code>SELECT trunc(3.14159, 2);</code> 这将返回 <code>3.14</code>。</li><li><code>ceil(n)</code>：计算不小于 <code>n</code> 的最小整数值。 示例：<code>SELECT ceil(3.1);</code> 这将返回 <code>4</code>。</li><li><code>floor(n)</code>：计算不大于 <code>n</code> 的最大整数值。 示例：<code>SELECT floor(3.9);</code> 这将返回 <code>3</code>。</li><li><code>abs(n)</code>：计算数字 <code>n</code> 的绝对值。 示例：<code>SELECT abs(-5);</code> 这将返回 <code>5</code>。</li></ol><p>Your task is to write an SQL query to calculate the length of every <code>'R'</code>-rated <code>Film</code> in <code>hours</code> and <code>minutes</code>. Your query’s result must have the following columns:</p><ol><li><code>film_id</code> of the <code>Film</code>;</li><li><code>title</code> of the <code>Film</code>;</li><li><code>hours</code> - length of the <code>Film</code> in hours; and</li><li><code>minutes</code> - length of the <code>Film</code> in minutes.</li></ol><p><img src="../attach/f.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">film_id,title,</span><br><span class="line">trunc(length<span class="operator">/</span><span class="number">60</span>, <span class="number">0</span>) <span class="keyword">as</span> hours,</span><br><span class="line"><span class="built_in">mod</span>(length,<span class="number">60</span>) <span class="keyword">as</span> minutes</span><br><span class="line"><span class="keyword">from</span> film</span><br><span class="line"><span class="keyword">where</span> rating <span class="operator">=</span> <span class="string">&#x27;R&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hours <span class="keyword">desc</span>,</span><br><span class="line">minutes <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="string-operators-in-select"><a class="markdownIt-Anchor" href="#string-operators-in-select"></a> String Operators in SELECT</h2><p><img src="../attach/dasiutfiuaftga.png" alt="" /></p><p>Your task is to write an SQL query to list the <code>actor_id</code> and <code>fullname</code> of every <code>Actor</code> whose <code>last_name</code> begins with <code>'A'</code>. The name of each <code>Actor</code> should be given as a single value in the format</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> actor_id,(last_name <span class="operator">||</span> <span class="string">&#x27;, &#x27;</span> <span class="operator">||</span> first_name) <span class="keyword">as</span> fullname</span><br><span class="line"><span class="keyword">from</span> Actor</span><br><span class="line"><span class="keyword">where</span> last_name <span class="keyword">like</span> <span class="string">&#x27;A%&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>actor_id</th><th>fullname</th></tr></thead><tbody><tr><td>58</td><td>AKROYD, CHRISTIAN</td></tr><tr><td>76</td><td>ASTAIRE, ANGELINA</td></tr><tr><td>92</td><td>AKROYD, KIRSTEN</td></tr><tr><td>118</td><td>ALLEN, CUBA</td></tr></tbody></table><h2 id="nesting-sql-queries"><a class="markdownIt-Anchor" href="#nesting-sql-queries"></a> Nesting SQL Queries</h2><p>找到成绩最高的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sid</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> mark <span class="operator">&gt;=</span> <span class="keyword">ALL</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> mark</span><br><span class="line">  <span class="keyword">FROM</span> Student</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>找到没有在 2020-s2 注册的学生姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> sid <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> sid</span><br><span class="line">  <span class="keyword">FROM</span> Enrolled</span><br><span class="line">  <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Student</span><br><span class="line">  <span class="keyword">WHERE</span> semester <span class="operator">=</span> <span class="string">&#x27;2020-S2&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="co-related-subqueries"><a class="markdownIt-Anchor" href="#co-related-subqueries"></a> Co-related subqueries</h3><p>相关子查询在执行过程中依赖于外部查询的每一行数据。简而言之，对于外部查询返回的每一行记录，相关子查询都会执行一次。</p><p>举个例子，如果你想查询每个部门薪资最高的员工，你可能会这样写：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_name, salary, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">  <span class="keyword">FROM</span> employees e2</span><br><span class="line">  <span class="keyword">WHERE</span> e2.department_id <span class="operator">=</span> e1.department_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在这个查询中，外部查询遍历 <code>employees</code> 表中的每一行，对于每一个 <code>department_id</code>，子查询都会重新执行并找出该部门的最高薪资。因为子查询中的 <code>e2.department_id = e1.department_id</code> 这一条件，这是一个典型的相关子查询。</p><h3 id="non-co-related-subqueries"><a class="markdownIt-Anchor" href="#non-co-related-subqueries"></a> Non-co-related subqueries</h3><p>非相关子查询与外部查询独立，它不依赖于外部查询的任何一行数据，也就是说它只执行一次，并且结果通常被外部查询整体使用。</p><p>例如，你可以查询所有薪资高于公司平均薪资的员工：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h3><ul><li><strong>性能</strong>：因为相关子查询可能需要对外部查询的每一行都执行一次，所以通常比非相关子查询慢。优化器可能难以对相关子查询进行优化。</li><li><strong>使用场景</strong>：相关子查询适合于需要基于外部查询每行数据进行评估的情况。而非相关子查询适合于可以独立计算一次，然后应用于所有外部查询行的情况。</li><li><strong>复杂性</strong>：相关子查询通常逻辑更加复杂，因为它们必须考虑与外部查询的关系。</li></ul><h3 id="exists"><a class="markdownIt-Anchor" href="#exists"></a> EXISTS</h3><p><code>EXISTS</code> 用于测试子查询是否返回至少一行数据。如果子查询返回至少一行，那么 <code>EXISTS</code> 的条件为真（TRUE），整个 <code>WHERE</code> 子句的条件也就为真。<code>EXISTS</code> 常用于相关子查询，因为它们允许子查询引用外部查询中的列。</p><p>举个例子，假设你有一个订单表（orders）和一个订单明细表（order_details），现在你想找出至少有一条订单明细的所有订单：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_id, customer_id</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">FROM</span> order_details od</span><br><span class="line">  <span class="keyword">WHERE</span> od.order_id <span class="operator">=</span> o.order_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>EXISTS</code> 子查询检查 <code>order_details</code> 表中是否有与外部查询中 <code>orders</code> 表的 <code>order_id</code> 相匹配的行。如果有，返回这个 <code>order_id</code> 的订单。</p><p>与 <code>EXISTS</code> 相反，<code>NOT EXISTS</code> 用于测试子查询是否返回零行。如果子查询没有返回任何行，那么 <code>NOT EXISTS</code> 的条件为真。<code>NOT EXISTS</code> 通常用于排除在其他关联表中有相关记录的行。</p><p>继续使用上面的例子，如果你想找出没有任何订单明细的订单，你可以这样写：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_id, customer_id</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">FROM</span> order_details od</span><br><span class="line">  <span class="keyword">WHERE</span> od.order_id <span class="operator">=</span> o.order_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>NOT EXISTS</code> 子查询检查 <code>order_details</code> 表中是否有与 <code>orders</code> 表的 <code>order_id</code> 相匹配的行。如果没有，说明这个订单没有任何订单明细，那么就返回这个 <code>order_id</code> 的订单。</p><p><strong>使用场景</strong></p><ul><li>当你需要确认至少存在一条符合特定条件的记录时，使用 <code>EXISTS</code>。</li><li>当你需要确认不存在任何符合特定条件的记录时，使用 <code>NOT EXISTS</code>。</li></ul><h2 id="grouping"><a class="markdownIt-Anchor" href="#grouping"></a> Grouping</h2><p>语法结构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name(s)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">--此查询将返回一个结果集，其中数据已根据指定的列分组和排序。</span></span><br></pre></td></tr></table></figure><p>此 SQL 查询用于从表中检索数据并根据指定的条件对其进行分组和排序。</p><ul><li><strong>SELECT</strong>  子句指定要从表中选择的列。</li><li><strong>FROM</strong>  子句指定要查询的表。</li><li><strong>WHERE</strong>  子句指定要应用于返回结果的条件。</li><li><strong>GROUP BY</strong>  子句指定要分组的列。</li><li><strong>ORDER BY</strong>  子句指定要排序的列以及排序顺序（升序或降序）。</li></ul><table><thead><tr><th>company</th><th>amount</th></tr></thead><tbody><tr><td>IBM</td><td>5000</td></tr><tr><td>DELL</td><td>4500</td></tr><tr><td>IBM</td><td>7000</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> company, <span class="built_in">SUM</span>(amount)</span><br><span class="line"><span class="keyword">FROM</span> Sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> company</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询结果是一个表，其中数据已按公司分组，并显示了每家公司的总销售额。</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>company</th><th>amount</th></tr></thead><tbody><tr><td>IBM</td><td>12000</td></tr><tr><td>DELL</td><td>4500</td></tr></tbody></table><h2 id="having"><a class="markdownIt-Anchor" href="#having"></a> Having</h2><p>Having 子句可以进一步筛选 group</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uos_code, <span class="built_in">AVG</span>(mark)</span><br><span class="line"><span class="keyword">FROM</span> Assessment</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> uos_code</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(mark) <span class="operator">&gt;</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--要应用于分组结果的条件：平均成绩大于 10</span></span><br><span class="line"><span class="comment">--此 SQL 查询用于从名为“Assessment”的表中检索数据并根据“uos_code”（课程代码）列对其进行分组。它计算每个课程的平均成绩，并将结果存储在名为“AVG(mark)”的列中。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--此 SQL 查询用于从名为“student”的表中检索数据并根据“country”（国家）列对其进行分组。它计算每个国家的学生人数，并将结果存储在名为“COUNT(*)”的列中。查询结果是一个表，其中数据已按国家分组，并显示了每个国家的学生人数。HAVING 子句用于仅选择学生人数大于 1 的国家。</span></span><br></pre></td></tr></table></figure><p>查找所有学生人数超过 1 人的 6 个学分点课程的学生总人数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.uos_code, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> enrolled e</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> UnitOfStudy u</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.uos_code</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--此 SQL 查询用于从名为“enrolled”和“UnitOfStudy”的表中检索数据并根据“uos_code”（课程代码）列对其进行分组。它计算了每个课程的学生人数，并将结果存储在名为“COUNT(*)”的列中。查询结果是一个表，其中数据已按课程代码分组，并显示了每个课程的学生人数。HAVING 子句用于仅选择学生人数大于 1 的课程。</span></span><br></pre></td></tr></table></figure><h2 id="dcl-data-control-language"><a class="markdownIt-Anchor" href="#dcl-data-control-language"></a> DCL (Data Control Language)</h2><p>Commands that control a database, including administering privileges and users</p><p><img src="https://s2.loli.net/2024/04/01/Bd3Dief9GotMnWZ.png" alt="image.png" /></p><p><img src="https://s2.loli.net/2024/04/01/Wh2Km96H1RPZuCz.png" alt="image.png" /></p><h2 id="example5"><a class="markdownIt-Anchor" href="#example5"></a> Example5</h2><ol><li>Which lecturers (by id and name) have taught both ‘INFO2120’ and ‘INFO3404’? Write a SQL query to answer this question using a SET operator.哪些讲师（按 ID 和姓名）同时讲授过 &quot;INFO2120 &quot;和 “INFO3404”？使用 SET 操作符编写一个 SQL 查询来回答这个问题。</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name</span><br><span class="line"><span class="keyword">FROM</span> AcademicStaff</span><br><span class="line"><span class="keyword">JOIN</span> UoSOffering <span class="keyword">ON</span> id <span class="operator">=</span> instructorId</span><br><span class="line"><span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> id, name</span><br><span class="line"><span class="keyword">FROM</span> AcademicStaff</span><br><span class="line"><span class="keyword">JOIN</span> UoSOffering <span class="keyword">ON</span> id <span class="operator">=</span> instructorId</span><br><span class="line"><span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO3404&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Which lecturers (by id and name) have taught both ‘INFO2120’ and ‘INFO3404’? Answer this using a sub-query without SET operators. Make sure your result doesn’t include duplicates.哪些讲师（按 ID 和姓名）同时讲授过 &quot;INFO2120 &quot;和 “INFO3404”？使用不含 SET 操作符的子查询回答此问题。确保您的结果不包括重复结果。</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> id, name</span><br><span class="line"><span class="keyword">FROM</span> AcademicStaff</span><br><span class="line"><span class="keyword">JOIN</span> UoSOffering <span class="keyword">ON</span> id <span class="operator">=</span> instructorId</span><br><span class="line"><span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO2120&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> instructorId <span class="keyword">FROM</span> UoSOffering <span class="keyword">WHERE</span> uosCode <span class="operator">=</span> <span class="string">&#x27;INFO3404&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>Write a SQL query to give the student IDs of all students who have enrolled in only one lecture using GROUP BY, and order the result by student ID. A lecture is a unit_of_study in a semester of a year.编写一条 SQL 查询，使用 GROUP BY 列出所有只参加过一次讲座的学生的学号，并按学号对结果排序。讲座是一年中一个学期的一个学习单元。</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studId <span class="keyword">FROM</span> Transcript</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> studId</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studId;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关笔记①</title>
      <link href="/7de2737b.html"/>
      <url>/7de2737b.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/7de2737b.html" title="数据库相关笔记①">数据库相关笔记①</a></li><li><a href="/ae543ed.html" title="数据库相关笔记②">数据库相关笔记②</a></li><li><a href="/93ec1257.html" title="数据库相关笔记③">数据库相关笔记③</a></li><li><a href="/e4eb22c1.html" title="数据库相关笔记④">数据库相关笔记④</a></li></ol><h1 id="relational-algebrara关系代数"><a class="markdownIt-Anchor" href="#relational-algebrara关系代数"></a> Relational Algebra(RA)关系代数</h1><p>关系代数（Relational Algebra，RA）是一种用于查询和操作关系数据库的理论语言。它主要包括一组操作符，如选择（Selection），投影（Projection），并集（Union），交集（Intersection），差集（Difference），笛卡尔积（Cartesian Product），重命名（Rename）等，这些操作符可以用于操作数据库中的表（也称为关系）。</p><p>关系代数是关系数据库理论的基础，SQL 等查询语言的设计就是基于关系代数的理论。</p><p>关系代数的主要优点是它提供了一种形式化的方法来表示数据库操作，这对于理解和优化查询非常有用。</p><h2 id="投影projectionπ操作"><a class="markdownIt-Anchor" href="#投影projectionπ操作"></a> 投影（Projection，π）操作</h2><p>投影操作用于从表中提取我们需要的列。</p><p>投影操作会删除不在投影列表（projectionlist）中的列，并且移除结果中的重复行。</p><p>投影操作完成后，结果集的属性（attribute）将与投影列表中的属性一致。</p><p>假设我们有一个学生表，其结构如下：</p><table><thead><tr><th>学生 ID</th><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>20</td><td>男</td></tr><tr><td>2</td><td>李四</td><td>21</td><td>女</td></tr><tr><td>3</td><td>王五</td><td>22</td><td>男</td></tr><tr><td>4</td><td>赵六</td><td>20</td><td>女</td></tr></tbody></table><p>如果我们只想提取学生的姓名和年龄，那么可以使用投影操作。在 SQL 中，这可以通过 SELECT 语句实现：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄 <span class="keyword">FROM</span> 学生表;</span><br></pre></td></tr></table></figure><p>对应的关系代数: π<sub>姓名, 年龄</sub>(学生表)</p><table><thead><tr><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>张三</td><td>20</td></tr><tr><td>李四</td><td>21</td></tr><tr><td>王五</td><td>22</td></tr><tr><td>赵六</td><td>20</td></tr></tbody></table><h2 id="选择selectionσ操作"><a class="markdownIt-Anchor" href="#选择selectionσ操作"></a> 选择（Selection，σ）操作</h2><p>选择操作用于从表中筛选出满足特定条件的行（元组）。</p><p>经过选择操作后，输出的表结构与输入的表结构保持一致。</p><p>选择条件（Selection Condition）由一组布尔（bool）操作符构成。</p><p>这些操作符包括：小于（&lt;），大于（&gt;），小于等于（&lt;=），大于等于（&gt;=），等于（=），不等于（≠）。</p><p>这些条件可以通过逻辑连接词进行连接：Λ 表示“与”（AND），V 表示“或”（OR）。</p><p>假设我们有一个学生表，其结构如下：</p><table><thead><tr><th>学生 ID</th><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>20</td><td>男</td></tr><tr><td>2</td><td>李四</td><td>21</td><td>女</td></tr><tr><td>3</td><td>王五</td><td>22</td><td>男</td></tr><tr><td>4</td><td>赵六</td><td>20</td><td>女</td></tr></tbody></table><p>如果我们想选择年龄大于 20 岁的学生，那么可以使用选择操作。在 SQL 中，这可以通过 WHERE 子句实现：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 学生表 <span class="keyword">WHERE</span> 年龄 <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>对应的关系代数: σ<sub>年龄&gt;20</sub>(学生表)</p><table><thead><tr><th>学生 ID</th><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>2</td><td>李四</td><td>21</td><td>女</td></tr><tr><td>3</td><td>王五</td><td>22</td><td>男</td></tr></tbody></table><h2 id="重命名renameρ操作"><a class="markdownIt-Anchor" href="#重命名renameρ操作"></a> 重命名（Rename，ρ）操作</h2><p>重命名操作允许我们使用多个名称来指代关系。</p><p>它也允许我们为关系代数表达式的结果命名并引用。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CustomerID <span class="keyword">AS</span> ID,</span><br><span class="line">CustomerName <span class="keyword">AS</span> Customer</span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><h2 id="笛卡尔积cross-product"><a class="markdownIt-Anchor" href="#笛卡尔积cross-product"></a> 笛卡尔积（Cross-product，×）</h2><p>笛卡尔积操作是对两个表（例如，表 R 和表 S）进行的操作，它会将两个表中的每一行（元组）进行一一配对，生成一个新的表。</p><p>具体来说，如果表 R 有 m 行，表 S 有 n 行，那么 R 和 S 的笛卡尔积将会有 m*n 行。每一行是由 R 的一行和 S 的一行组合而成的。</p><p>如果表 R 和表 S 都为空（即，没有任何行），那么 R 和 S 的笛卡尔积也将为空。</p><p>在 SQL 中，可以使用<code>CROSS JOIN</code>语句来进行笛卡尔积操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> S;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/04/01/qrbJnw2xajgILtH.png" alt="image.png" /></p><h2 id="条件连接conditional-joinθ"><a class="markdownIt-Anchor" href="#条件连接conditional-joinθ"></a> 条件连接（Conditional Join，θ⋈）</h2><p>条件连接的结果表的结构与笛卡尔积操作的结果一致。</p><p>条件连接也被称为 Theta Join（θ 连接）。</p><p>它首先进行笛卡尔积操作，然后对结果进行筛选，只保留满足特定条件的行。</p><p>R ⋈<sub>ϴ</sub> S = σ<sub>ϴ</sub>(R× S)</p><p><img src="https://s2.loli.net/2024/04/01/sYTNOLnfz9I73U2.png" alt="image.png" /></p><p>Find the student ID,name,and gender of all students enrolled in INFO6007</p><p>σ_course_id=‘INFO6007’(students ⋈_student_id=id enrollments)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> students.id, students.name, students.gender</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">JOIN</span> enrollments <span class="keyword">ON</span> students.id <span class="operator">=</span> enrollments.student_id</span><br><span class="line"><span class="keyword">WHERE</span> enrollments.course_id <span class="operator">=</span> <span class="string">&#x27;INFO6007&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="自然连接natural-join"><a class="markdownIt-Anchor" href="#自然连接natural-join"></a> 自然连接（Natural Join，⋈）</h2><p>自然连接是一种特殊的连接操作，它基于两个表中的所有具有相同名称的列进行连接。</p><p>在自然连接操作中，结果表将只包含一次具有相同名称的列。</p><p>例如，如果表 R 和表 S 都有一个名为&quot;A&quot;的列，那么在 R 和 S 的自然连接结果中，只会有一个名为&quot;A&quot;的列。</p><p>在 SQL 中，可以使用<code>INNER JOIN</code>语句来实现自然连接：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">INNER</span> <span class="keyword">JOIN</span> S <span class="keyword">USING</span> (A);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/04/01/MuLrlbIUkcW4NdJ.png" alt="image.png" /></p><h2 id="左连接left-join和右连接right-join"><a class="markdownIt-Anchor" href="#左连接left-join和右连接right-join"></a> 左连接（Left Join）和右连接（Right Join）</h2><p>左连接和右连接是 SQL 中的两种连接操作，它们都是基于两个表中的一个或多个列的值进行连接的。</p><ul><li><p>左连接（Left Join）：返回包含左表中的所有行和右表中匹配的行的结果表。如果右表中没有匹配的行，则结果表中的对应行将包含 NULL。</p></li><li><p>右连接（Right Join）：返回包含右表中的所有行和左表中匹配的行的结果表。如果左表中没有匹配的行，则结果表中的对应行将包含 NULL。</p></li></ul><p>在 SQL 中，可以使用 <code>LEFT JOIN</code> 或 <code>RIGHT JOIN</code> 语句来实现左连接或右连接：</p><p>假设我们有两个表，表 A 和表 B：</p><p>表 A：</p><table><thead><tr><th>A_id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr></tbody></table><p>表 B：</p><table><thead><tr><th>B_id</th><th>Name</th></tr></thead><tbody><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr><tr><td>4</td><td>赵六</td></tr></tbody></table><p>如果我们进行左连接（以 Name 为连接条件），结果将如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.Name <span class="operator">=</span> B.Name;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>A_id</th><th>Name</th><th>B_id</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>NULL</td></tr><tr><td>2</td><td>李四</td><td>2</td></tr><tr><td>3</td><td>王五</td><td>3</td></tr></tbody></table><p>如果我们进行右连接（以 Name 为连接条件），结果将如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.Name <span class="operator">=</span> B.Name;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>A_id</th><th>Name</th><th>B_id</th></tr></thead><tbody><tr><td>2</td><td>李四</td><td>2</td></tr><tr><td>3</td><td>王五</td><td>3</td></tr><tr><td>NULL</td><td>赵六</td><td>4</td></tr></tbody></table><h2 id="全外连接full-outer-join"><a class="markdownIt-Anchor" href="#全外连接full-outer-join"></a> 全外连接（Full Outer Join）</h2><p>全外连接是 SQL 中的一种连接操作，它返回左表和右表中的所有行。如果左表和右表中的行在连接条件上没有匹配，那么结果表中的对应行将包含 NULL。</p><p>在 SQL 中，可以使用 <code>FULL OUTER JOIN</code> 语句来实现全外连接：</p><p>例如，如果我们有两个表，表 R 和表 S：</p><p>表 R：</p><table><thead><tr><th>R_id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr></tbody></table><p>表 S：</p><table><thead><tr><th>S_id</th><th>Name</th></tr></thead><tbody><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr><tr><td>4</td><td>赵六</td></tr></tbody></table><p>如果我们进行全外连接（以 Name 为连接条件），结果将如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> S <span class="keyword">ON</span> R.Name <span class="operator">=</span> S.Name;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>R_id</th><th>Name</th><th>S_id</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>NULL</td></tr><tr><td>2</td><td>李四</td><td>2</td></tr><tr><td>3</td><td>王五</td><td>3</td></tr><tr><td>NULL</td><td>赵六</td><td>4</td></tr></tbody></table><h2 id="set-operators"><a class="markdownIt-Anchor" href="#set-operators"></a> Set Operators</h2><p><img src="https://s2.loli.net/2024/04/01/KAk2qL9ZxIcTfW7.png" alt="image.png" /></p><p><img src="https://s2.loli.net/2024/04/01/rvSR6osNubHMqWt.png" alt="image.png" /></p><h3 id="union"><a class="markdownIt-Anchor" href="#union"></a> Union</h3><ol><li><p><code>UNION</code> 操作用于合并两个表的结果。</p></li><li><p>在 SQL 中，<code>UNION</code> 操作会自动去除结果中的重复行。</p></li></ol><p><code>UNION ALL</code> 操作则会保留结果中的所有行，包括重复的行。</p><p><img src="https://s2.loli.net/2024/04/01/msinJPyDMvrObW6.png" alt="image.png" /><br /><img src="https://s2.loli.net/2024/04/01/dXW5soxJTGDZMB9.png" alt="image.png" /></p><h3 id="intersection"><a class="markdownIt-Anchor" href="#intersection"></a> Intersection</h3><p>1.lntersection 取两个 table 的交集</p><p>2.在 SQL 语句中的语法 Intersect</p><h3 id="difference"><a class="markdownIt-Anchor" href="#difference"></a> Difference</h3><p>1.lntersection 取两个 table 交集及以外的部分</p><p>2.在 SQL 语句中的语法 Except</p><p>R ∩ S = R - (R-S)</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><img src="https://s2.loli.net/2024/04/01/wTzRU7XJpxWqSEZ.png" alt="image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组相关笔记④</title>
      <link href="/8e4b6846.html"/>
      <url>/8e4b6846.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>什么计组学到最后变成计网了！？？</p></div><ol><li><a href="/174239bb.html" title="计组相关笔记①">计组相关笔记①</a></li><li><a href="/68e0ed44.html" title="计组相关笔记②">计组相关笔记②</a></li><li><a href="/8e4b6801.html" title="计组相关笔记③">计组相关笔记③</a></li><li><a href="/8e4b6846.html" title="计组相关笔记④">计组相关笔记④</a></li></ol><h1 id="计算机与网络组织"><a class="markdownIt-Anchor" href="#计算机与网络组织"></a> 计算机与网络组织</h1><h2 id="互联网"><a class="markdownIt-Anchor" href="#互联网"></a> 互联网</h2><h3 id="互联网的定义"><a class="markdownIt-Anchor" href="#互联网的定义"></a> 互联网的定义</h3><p>互联网是连接了数百万台计算设备的网络，这些设备包括：</p><ul><li>主机：运行网络应用程序的终端系统</li><li>通信链路：光纤、铜线、无线电、卫星，其传输速率（比特/秒）定义了带宽</li><li>分组交换机：转发数据包（数据块），例如路由器和交换机</li></ul><h3 id="互联网的组成"><a class="markdownIt-Anchor" href="#互联网的组成"></a> 互联网的组成</h3><p>互联网可以被视为“网络的网络”，由互连的 ISP 组成。互联网中的所有通信活动都由协议管理，例如 TCP，IP，HTTP，Skype，802.11 等。这些协议控制消息的发送和接收。</p><h3 id="互联网的标准"><a class="markdownIt-Anchor" href="#互联网的标准"></a> 互联网的标准</h3><p>互联网的标准通常以 RFC（请求评论）的形式发布，并由 IETF（互联网工程任务组）进行维护。</p><h3 id="互联网作为服务的基础设施"><a class="markdownIt-Anchor" href="#互联网作为服务的基础设施"></a> 互联网作为服务的基础设施</h3><p>互联网提供了各种服务的基础设施，包括网络、VoIP、电子邮件、游戏、电子商务、社交网络等。它还提供了应用程序的编程接口，使应用程序能够通过连接到互联网来发送和接收消息。</p><h2 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h2><h3 id="什么是协议"><a class="markdownIt-Anchor" href="#什么是协议"></a> 什么是协议？</h3><p>协议定义了网络实体之间发送和接收消息的格式、顺序以及消息传输和接收时采取的操作。这不仅包括人类协议，如“现在几点了？”或“我有个问题”，也包括网络协议，这些协议由机器而不是人来管理。</p><h3 id="协议的例子"><a class="markdownIt-Anchor" href="#协议的例子"></a> 协议的例子</h3><p>一个人类协议和一个计算机网络协议的例子：</p><ul><li>“你好” - “你好”</li><li>“现在几点了？” - “2:00”</li><li>TCP 连接请求 - TCP 连接响应</li><li>获取<a href="http://www.sydney.edu.au">http://www.sydney.edu.au</a> - &lt;文件&gt;</li></ul><hr /><h2 id="网络分层"><a class="markdownIt-Anchor" href="#网络分层"></a> 网络分层</h2><p>网络是复杂的，包含许多组成部分，如主机、路由器、各种介质的链路、应用程序、协议、硬件和软件。为了更好地组织网络结构，我们可以将其分层。</p><h3 id="分层的类比航空旅行"><a class="markdownIt-Anchor" href="#分层的类比航空旅行"></a> 分层的类比：航空旅行</h3><p>航空旅行的组织可以作为网络分层的一个类比。航空旅行包括一系列步骤，如购票、行李检查、登机、起飞、飞行路线、投诉、行李提取、卸货和着陆。每一步都可以看作是网络组织中的一层。</p><p>在航空旅行中，每一层通过其自身的内部操作实现服务，同时依赖于下一层提供的服务。例如，购票、行李检查、登机、起飞、飞行路线、出发机场、到达机场和中间的空中交通管制中心。</p><h3 id="互联网协议栈"><a class="markdownIt-Anchor" href="#互联网协议栈"></a> 互联网协议栈</h3><p>互联网协议栈是网络分层的一个具体实例，包括以下层次：</p><ul><li>应用层：支持网络应用，如 FTP，SMTP，HTTP</li><li>传输层：处理数据传输，如 TCP，UDP</li><li>网络层：负责从源到目的地的数据报路由，如 IP，路由协议</li><li>链路层：处理相邻网络元素之间的数据传输，如以太网，802.11（WiFi），PPP</li><li>物理层：处理在线路上的比特</li></ul><h3 id="isoosi-参考模型"><a class="markdownIt-Anchor" href="#isoosi-参考模型"></a> ISO/OSI 参考模型</h3><p>ISO/OSI 参考模型是另一个网络分层的模型，它包括两个额外的层：</p><ul><li>表示层：允许应用程序解释数据的含义，如加密、压缩、机器特定约定</li><li>会话层：负责同步、检查点、数据交换恢复</li></ul><p>需要注意的是，互联网协议栈缺少这些层；如果需要这些服务，必须在应用层实现。</p><hr /><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><h3 id="网络边缘"><a class="markdownIt-Anchor" href="#网络边缘"></a> 网络边缘</h3><p>网络边缘包括：</p><ul><li>主机：客户端和服务器（通常在数据中心）</li><li>接入网络，物理媒体：有线，无线通信链路</li></ul><h3 id="网络核心"><a class="markdownIt-Anchor" href="#网络核心"></a> 网络核心</h3><p>网络核心包括：</p><ul><li>互连的路由器，网络的网络</li></ul><h2 id="接入网络和物理媒体"><a class="markdownIt-Anchor" href="#接入网络和物理媒体"></a> 接入网络和物理媒体</h2><h3 id="接入网络"><a class="markdownIt-Anchor" href="#接入网络"></a> 接入网络</h3><p>接入网络的主要问题是如何将终端系统连接到边缘路由器。这包括：</p><ul><li>住宅接入网</li><li>机构接入网（学校、公司）</li><li>移动接入网</li></ul><p>我们需要考虑接入网络的带宽（每秒比特数）以及是共享还是专用。</p><h3 id="主机发送数据包"><a class="markdownIt-Anchor" href="#主机发送数据包"></a> 主机发送数据包</h3><p>主机发送数据包的功能包括：</p><ul><li>接收应用程序消息，分解成长度为 L 比特的小块（数据包）</li><li>以传输速率 R（链路容量或链路带宽）将数据包传输到接入网络</li></ul><h2 id="物理媒体"><a class="markdownIt-Anchor" href="#物理媒体"></a> 物理媒体</h2><p>物理媒体是比特在发送器/接收器对之间传播的物理链路。物理链路可以是：</p><ul><li>有导介质：信号在固体介质中传播（铜线、光纤、同轴电缆）</li><li>无导介质：信号自由传播（例如，无线电）</li></ul><h3 id="有导介质"><a class="markdownIt-Anchor" href="#有导介质"></a> 有导介质</h3><p>有导介质包括：</p><ul><li>双绞线：两根绝缘铜线（5 类：100 Mbps，6a 类：10 Gbps）</li><li>同轴电缆：两根同心铜导体，双向，宽带</li><li>光纤电缆：玻璃纤维传输光脉冲，高速，低错误率</li></ul><hr /><h2 id="网络核心-2"><a class="markdownIt-Anchor" href="#网络核心-2"></a> 网络核心</h2><p>网络核心是互连路由器的网状结构。它主要负责如何从端到端传输数据，主要有两种方式：分组交换和电路交换。</p><h3 id="分组交换"><a class="markdownIt-Anchor" href="#分组交换"></a> 分组交换</h3><p>分组交换是主机将应用层消息分解为数据包，从一个路由器转发到下一个路由器的过程。</p><h4 id="存储转发"><a class="markdownIt-Anchor" href="#存储转发"></a> 存储转发</h4><p>存储转发是整个数据包必须到达路由器，然后才能在下一条链路上传输的过程。例如，传输 L 比特的数据包到链路以 R bps 速率需要 L/R 秒。端到端延迟为 2L/R（假设零传播延迟）。例如，如果 L = 7.5 Mbits，R = 1.5 Mbps，那么延迟 = 5 秒。</p><h4 id="排队延迟和丢包"><a class="markdownIt-Anchor" href="#排队延迟和丢包"></a> 排队延迟和丢包</h4><p>如果在一段时间内到达链路的速率超过链路的传输速率，数据包将排队等待在链路上传输。如果内存（缓冲区）满了，数据包可能会被丢弃（丢包）。</p><h4 id="转发和路由"><a class="markdownIt-Anchor" href="#转发和路由"></a> 转发和路由</h4><p>转发是将数据包从路由器的输入移动到适当的路由器输出的过程。路由则是确定数据包从源到目的地的路径，包括路由算法和本地转发表。</p><h3 id="电路交换"><a class="markdownIt-Anchor" href="#电路交换"></a> 电路交换</h3><p>电路交换是为源和目的地之间的“呼叫”分配和保留端到端资源的过程。每条链路都有有限数量的电路，呼叫获得专用电路段。这些资源是专用的，不共享，因此可以提供类似电路的（有保证的）性能。</p><h4 id="频分多路复用和时分多路复用"><a class="markdownIt-Anchor" href="#频分多路复用和时分多路复用"></a> 频分多路复用和时分多路复用</h4><p>频分多路复用（FDM）和时分多路复用（TDM）是电路交换的两种主要技术。频分多路复用是不同的频道在不同的频带中传输，而时分多路复用是不同的频道在不同的时间槽中传输。</p><h3 id="分组交换与电路交换的比较"><a class="markdownIt-Anchor" href="#分组交换与电路交换的比较"></a> 分组交换与电路交换的比较</h3><p>分组交换允许更多用户使用网络，非常适合突发数据，资源共享，更简单，无需呼叫设置。但是，分组交换可能会遭受过度拥塞，导致数据包延迟和丢失，需要协议进行可靠的数据传输和拥塞控制。</p><hr /><h2 id="网络延迟"><a class="markdownIt-Anchor" href="#网络延迟"></a> 网络延迟</h2><p>网络延迟主要有四个来源：</p><ul><li><strong>节点处理延迟 (dproc):</strong> 检查比特错误，确定输出链路，通常 &lt; 毫秒</li><li><strong>排队延迟 (dqueue):</strong> 在输出链路等待传输的时间，取决于路由器的拥塞程度</li><li><strong>传输延迟 (dtrans):</strong> L: 数据包长度（比特），R: 链路带宽（bps），dtrans = L/R</li><li><strong>传播延迟 (dprop):</strong> d: 物理链路长度，s: 介质中的传播速度 (~2x10^8 米/秒)，dprop = d/s</li></ul><h2 id="车队类比"><a class="markdownIt-Anchor" href="#车队类比"></a> 车队类比</h2><p>我们可以通过车队类比来理解网络延迟：</p><ul><li>汽车以 100 公里/小时的速度“传播”</li><li>收费站需要 12 秒钟为一辆车服务（比特传输时间）</li><li>汽车 ~ 比特；车队 ~ 数据包</li></ul><h3 id="车队类比的计算"><a class="markdownIt-Anchor" href="#车队类比的计算"></a> 车队类比的计算</h3><ul><li>将整个车队推进收费站到高速公路的时间 = 12*10 = 120 秒</li><li>最后一辆车从第一个收费站到第二个收费站的传播时间：100 公里/(100 公里/小时) = 1 小时</li><li>因此，车队排到第二个收费站前需要的总时间为：62 分钟</li></ul><h2 id="排队延迟"><a class="markdownIt-Anchor" href="#排队延迟"></a> 排队延迟</h2><p>排队延迟的计算公式为：</p><ul><li>R: 链路带宽（bps）</li><li>L: 数据包长度（比特）</li><li>a: 数据包到达率</li><li>流量强度 = La/R<ul><li>La/R ~ 0: 小排队延迟</li><li>La/R &gt;~ 1: 大排队延迟</li><li>La/R &gt; 1: 到达的数据包超过处理能力，平均延迟无穷大</li></ul></li></ul><h2 id="网络路径和延迟"><a class="markdownIt-Anchor" href="#网络路径和延迟"></a> 网络路径和延迟</h2><p>我们可以使用 Traceroute 程序来测量从源到路由器沿端到端互联网路径的延迟。</p><h2 id="数据包丢失"><a class="markdownIt-Anchor" href="#数据包丢失"></a> 数据包丢失</h2><p>数据包丢失通常是由于前一个链路的队列（即缓冲区）容量有限，到达满队列的数据包将被丢弃（即丢失）。丢失的数据包可能由上一个节点、源端系统或根本不重新传输。</p><h2 id="吞吐量"><a class="markdownIt-Anchor" href="#吞吐量"></a> 吞吐量</h2><p>吞吐量是发送方/接收方之间比特传输的速率（比特/时间单位）。</p><ul><li>瞬时：给定时间点的速率</li><li>平均：较长时间段的速率</li></ul><h3 id="吞吐量的计算"><a class="markdownIt-Anchor" href="#吞吐量的计算"></a> 吞吐量的计算</h3><ul><li>Rs &lt; Rc：平均端到端吞吐量是多少？</li><li>Rs &gt; Rc：平均端到端吞吐量是多少？</li></ul><h3 id="吞吐量的应用场景"><a class="markdownIt-Anchor" href="#吞吐量的应用场景"></a> 吞吐量的应用场景</h3><p>在互联网场景下，例如 10 个客户端从 10 个服务器下载文件：</p><ul><li>每个连接的端到端吞吐量：min(Rc, Rs, R/10)</li><li>实际中：Rc 或 Rs 通常是瓶颈</li></ul><hr /><h2 id="web-和-http"><a class="markdownIt-Anchor" href="#web-和-http"></a> Web 和 HTTP</h2><p>Web 页面由对象组成，如 HTML 文件、JPEG 图像、Java applet、音频文件等。一个网页由基 HTML 文件组成，其中包含多个引用对象。每个对象可通过 URL 寻址（例如，<a href="http://www.someschool.edu/someDept/pic.gif%EF%BC%89%E3%80%82">www.someschool.edu/someDept/pic.gif）。</a></p><h3 id="http-概述"><a class="markdownIt-Anchor" href="#http-概述"></a> HTTP 概述</h3><p>HTTP（超文本传输协议）采用客户端/服务器模型：</p><ul><li><strong>客户端</strong>：使用 HTTP 协议请求、接收和显示 Web 对象的浏览器</li><li><strong>服务器</strong>：使用 HTTP 协议响应请求并发送对象的 Web 服务器</li></ul><p>HTTP 使用 TCP 进行通信，客户端发起到服务器的 TCP 连接（创建套接字）到端口 80，服务器接受客户端的 TCP 连接。HTTP 消息在浏览器（HTTP 客户端）和 Web 服务器（HTTP 服务器）之间交换，然后关闭 TCP 连接。值得注意的是，HTTP 是无状态的，服务器不维护过去客户端请求的信息。</p><h3 id="http-连接"><a class="markdownIt-Anchor" href="#http-连接"></a> HTTP 连接</h3><p>HTTP 连接可以分为非持久 HTTP 和持久 HTTP：</p><ul><li><strong>非持久 HTTP</strong>：在 TCP 连接上最多发送一个对象，然后关闭连接。下载多个对象需要多个连接。</li><li><strong>持久 HTTP</strong>：客户端和服务器之间可以通过单个 TCP 连接发送多个对象。</li></ul><h3 id="http-请求消息"><a class="markdownIt-Anchor" href="#http-请求消息"></a> HTTP 请求消息</h3><p>HTTP 请求消息是 ASCII（人类可读格式）：</p><ul><li>请求行（GET、POST、HEAD 命令）</li><li>标头行</li><li>行首的回车换行表示标头行结束</li></ul><p>HTTP 请求消息的通用格式包括请求行、标头行和主体（可选）。</p><h3 id="http-方法"><a class="markdownIt-Anchor" href="#http-方法"></a> HTTP 方法</h3><p>HTTP 方法包括 POST、GET、PUT、DELETE 和 HEAD：</p><ul><li><strong>POST</strong>：用户填写表单时使用</li><li><strong>GET</strong>：请求对象时使用，对象在 URL 字段中标识</li><li><strong>PUT</strong>：用于将对象上传到特定 Web 服务器的特定路径</li><li><strong>DELETE</strong>：用于删除 Web 服务器上的对象</li><li><strong>HEAD</strong>：类似于 GET，但省略请求的对象，用于调试</li></ul><h3 id="http-响应消息"><a class="markdownIt-Anchor" href="#http-响应消息"></a> HTTP 响应消息</h3><p>HTTP 响应消息包括状态行（协议、状态代码、状态短语）、标头行和数据（例如，请求的 HTML 文件）。</p><h3 id="http-响应状态代码"><a class="markdownIt-Anchor" href="#http-响应状态代码"></a> HTTP 响应状态代码</h3><p>状态代码出现在服务器到客户端响应消息的第一行，例如：</p><ul><li>200 OK：请求成功，请求的对象在消息中稍后出现</li><li>301 Moved Permanently：请求的对象已移动，新位置在消息中指定</li><li>400 Bad Request：服务器无法理解请求消息</li><li>404 Not Found：服务器上未找到请求的文档</li><li>505 HTTP Version Not Supported</li></ul><h3 id="用户服务器状态cookie"><a class="markdownIt-Anchor" href="#用户服务器状态cookie"></a> 用户服务器状态：Cookie</h3><p>虽然 HTTP 服务器是无状态的，简化了服务器设计并允许开发高性能 Web 服务器，但 Cookie 允许网站识别用户并跟踪其状态。Cookie 技术组件包括 HTTP 响应消息的 Cookie 标头行、下一个 HTTP 请求消息中的 Cookie 标头行、保存在用户主机上的 Cookie 文件（由浏览器管理）和网站的后端数据库。</p><p>Cookie 的用途包括授权、购物车、推荐和用户会话状态（例如，Web 电子邮件）。然而，Cookie 也涉及到隐私问题，因为它允许网站了解用户的许多信息，用户可能会向网站提供个人信息。</p><h2 id="web-缓存与性能测量"><a class="markdownIt-Anchor" href="#web-缓存与性能测量"></a> Web 缓存与性能测量</h2><h3 id="web-缓存代理服务器"><a class="markdownIt-Anchor" href="#web-缓存代理服务器"></a> Web 缓存（代理服务器）</h3><p>Web 缓存通过以下方式访问 Web：</p><ul><li>浏览器将所有 HTTP 请求发送到缓存。</li><li>如果对象在缓存中，则缓存返回对象。</li><li>否则，缓存从原始服务器请求对象，然后返回给客户端。</li></ul><p>目标是在不涉及原始服务器的情况下满足客户端请求。</p><h3 id="web-缓存的角色和目标"><a class="markdownIt-Anchor" href="#web-缓存的角色和目标"></a> Web 缓存的角色和目标</h3><p>缓存既作为客户端又作为服务器：</p><ul><li>对原始请求客户端来说是服务器。</li><li>对原始服务器来说是客户端。</li></ul><p>通常，缓存由 ISP（大学、公司、住宅 ISP）安装。</p><p>Web 缓存的目标包括：</p><ul><li>减少客户端请求的响应时间。</li><li>减少机构访问链接上的流量。</li></ul><h3 id="web-缓存的性能测量"><a class="markdownIt-Anchor" href="#web-缓存的性能测量"></a> Web 缓存的性能测量</h3><p>以下是一些假设和结果的示例，以说明 Web 缓存如何影响性能：</p><h4 id="示例-1基本情况"><a class="markdownIt-Anchor" href="#示例-1基本情况"></a> 示例 1：基本情况</h4><p>假设：</p><ul><li>平均对象大小：100K 比特</li><li>浏览器到原始服务器的平均请求率：15 次/秒</li><li>从互联网路由器到任何原始服务器的 RTT：2 秒</li><li>访问链路速率：1.54 Mbps</li></ul><p>结果：</p><ul><li>局域网利用率：0.15%</li><li>访问链路利用率：97.4%</li><li>总延迟：互联网延迟 + 访问延迟 + 局域网延迟 = 2 秒 + 分钟 + 微秒</li></ul><h4 id="示例-2增加访问链路速度"><a class="markdownIt-Anchor" href="#示例-2增加访问链路速度"></a> 示例 2：增加访问链路速度</h4><p>假设与示例 1 相同。</p><p>结果：</p><ul><li>局域网利用率：0.15%</li><li>访问链路利用率：0.974%</li><li>总延迟：互联网延迟 + 访问延迟 + 局域网延迟 = 2 秒 + 分钟 + 微秒</li></ul><p>成本：增加访问链路速度（不便宜！）</p><h4 id="示例-3安装本地缓存"><a class="markdownIt-Anchor" href="#示例-3安装本地缓存"></a> 示例 3：安装本地缓存</h4><p>假设与示例 1 相同。</p><p>结果：</p><ul><li>局域网利用率：15%</li><li>访问链路利用率：？</li><li>总延迟：？</li></ul><p>成本：Web 缓存（便宜！）</p><h3 id="使用缓存计算访问链路利用率和延迟"><a class="markdownIt-Anchor" href="#使用缓存计算访问链路利用率和延迟"></a> 使用缓存计算访问链路利用率和延迟</h3><p>假设缓存命中率为 0.4：</p><ul><li>40%的请求在缓存中满足，60%的请求在原始服务器中满足</li><li>访问链路利用率：60%的请求使用访问链路</li><li>总延迟：0.6 _（来自原始服务器的延迟）+ 0.4 _（在缓存中满足时的延迟）= 0.6（2.01）+ 0.4（~毫秒）= ~1.2 秒</li></ul><h3 id="条件-get"><a class="markdownIt-Anchor" href="#条件-get"></a> 条件 GET</h3><p>条件 GET 的目标是，如果缓存有最新的缓存版本，则不发送对象。缓存在 HTTP 请求中指定缓存副本的日期（If-modified-since: <date>）。如果缓存副本是最新的，服务器在响应中不包含对象（HTTP/1.0 304 Not Modified）。</p><hr /><h2 id="计算机性能测量"><a class="markdownIt-Anchor" href="#计算机性能测量"></a> 计算机性能测量</h2><h3 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h3><ul><li>了解计算机性能的各种测量。</li><li>使用这些思想来构建或改进系统性能。</li><li>讨论影响系统性能的因素和改进程序性能的技巧。</li></ul><h3 id="性能测量的数学基础"><a class="markdownIt-Anchor" href="#性能测量的数学基础"></a> 性能测量的数学基础</h3><ul><li>通过测量完成相同工作量的时间来比较性能。</li><li>如果系统 A 比系统 B 快 n 倍，如果系统 A 比系统 B 快 x%。</li><li>示例：两辆赛车，A 车在 2 分钟内完成比赛，B 车在 3 分钟内完成比赛。A 车比 B 车快 1.5 倍，比 B 车快 50%。</li><li>在评估系统性能时，我们关注给定工作负载下的预期性能。</li><li>使用衡量集中趋势的统计工具。</li><li>算术平均数（平均值）是最熟悉的度量。</li><li>如果数据偏斜或分散，算术平均数可能会产生误导。</li><li>如果已知执行频率（预期工作负载），加权平均数可以揭示性能。</li><li>但是，工作负载可能会随时间变化。</li><li>针对一种工作负载优化的系统在工作负载变化时可能表现不佳。</li><li>如果我们的测量值表现出很大的变异性，我们不能使用算术平均数。</li><li>几何平均数是比较系统相对性能的首选度量。</li><li>几何平均数通常使用被测系统和参考机器之间的标准化比率。</li><li>无论使用哪种系统作为参考，几何平均数的比率是一致的。</li><li>几何平均数不提供系统性能的真实期望，只是一个比较工具。</li><li>调和平均数提供了一种比较表示为速率的执行时间的方法。</li><li>调和平均数使我们能够形成吞吐量的数学期望，并比较相对吞吐量。</li><li>调和平均数适用于预测机器行为和改善最慢的性能。</li><li>各性能度量适用时间的总结。</li></ul><h3 id="性能基准测试"><a class="markdownIt-Anchor" href="#性能基准测试"></a> 性能基准测试</h3><ul><li>性能基准测试是对系统性能进行客观评估的科学。</li><li>性价比可以从标准基准测试中得出。</li><li>CPU 速度通常与性能等同，但这只有在 ISA 相同的情况下才有效。</li><li>不同的 ISA 可以在相同的墙钟时间内产生相同的结果。</li><li>合成基准测试试图描述与时钟速度和 ISA 无关的性能。</li><li>早期的合成基准测试（例如，Whetstone，Dhrystone，Linpack）很小且易于优化，限制了它们的实用性。</li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>性能度量（算术平均数，几何平均数，调和平均数）有特定的用途和限制。</li><li>基准测试提供了一种客观评估系统性能的方法，但必须谨慎使用以避免误导结果。</li></ul><h3 id="实用提示"><a class="markdownIt-Anchor" href="#实用提示"></a> 实用提示</h3><ul><li>使用适合被评估工作负载和系统的性能度量。</li><li>考虑平均和最坏情况下的性能，以获得完整的画面。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组相关笔记③</title>
      <link href="/8e4b6801.html"/>
      <url>/8e4b6801.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W7-W9 的内容</p></div><ol><li><a href="/174239bb.html" title="计组相关笔记①">计组相关笔记①</a></li><li><a href="/68e0ed44.html" title="计组相关笔记②">计组相关笔记②</a></li><li><a href="/8e4b6801.html" title="计组相关笔记③">计组相关笔记③</a></li><li><a href="/8e4b6846.html" title="计组相关笔记④">计组相关笔记④</a></li></ol><h1 id="memory"><a class="markdownIt-Anchor" href="#memory"></a> Memory</h1><h2 id="rom-只读存储器"><a class="markdownIt-Anchor" href="#rom-只读存储器"></a> ROM (只读存储器)</h2><p>ROM，全称为只读存储器（Read-Only Memory），是一种非易失性的存储设备，这意味着即使在断电的情况下，ROM 中的数据也不会丢失。ROM 中的数据在制造时就被写入，并且在使用过程中不能被修改。ROM 常用于存储固定的程序，如计算机的 BIOS。</p><h2 id="ram-随机存取存储器"><a class="markdownIt-Anchor" href="#ram-随机存取存储器"></a> RAM (随机存取存储器)</h2><p>RAM，全称为随机存取存储器（Random Access Memory），是一种易失性的存储设备，这意味着在断电的情况下，RAM 中的数据会丢失。与 ROM 不同，RAM 中的数据可以在任何时候被读取和写入。RAM 是计算机的主要工作区域，用于存储操作系统、应用程序和当前工作的数据。</p><h3 id="sram-静态随机存取存储器"><a class="markdownIt-Anchor" href="#sram-静态随机存取存储器"></a> SRAM (静态随机存取存储器)</h3><p>SRAM，全称为静态随机存取存储器（Static Random Access Memory），也是 RAM 的一种类型。与 DRAM 不同，SRAM 的每个存储单元由六个晶体管组成，不需要定期刷新。因此，SRAM 的速度比 DRAM 快，但是成本更高，容量更小。SRAM 常用于 CPU 的缓存。</p><h3 id="dram-动态随机存取存储器"><a class="markdownIt-Anchor" href="#dram-动态随机存取存储器"></a> DRAM (动态随机存取存储器)</h3><p>DRAM，全称为动态随机存取存储器（Dynamic Random Access Memory），是 RAM 的一种类型。DRAM 的每个存储单元都是由一个电容和一个晶体管组成的，电容存储电荷（数据），晶体管控制读写。由于电容会自然漏电，所以 DRAM 需要定期刷新来保持存储的数据。</p><h1 id="命中-hit"><a class="markdownIt-Anchor" href="#命中-hit"></a> 命中 hit</h1><p>在存储器层次结构中，当 CPU 在给定的内存级别上找到所需的数据时，我们称之为 “命中”（hit）。如果在给定的内存级别上找不到所需的数据，我们称之为 “未命中”（miss）。</p><p><strong>命中率</strong>（hit rate）是指在给定内存级别上找到数据的时间百分比。换句话说，它是 CPU 在该内存级别上找到所需数据的概率。</p><p><strong>未命中率</strong>（miss rate）是指在给定内存级别上找不到数据的时间百分比。未命中率等于 1 减去命中率。</p><p><strong>命中时间</strong>（hit time）是指访问给定内存级别的数据所需的时间。这包括从该内存级别读取数据以及将数据传输到 CPU 的时间。</p><p><strong>未命中惩罚</strong>（miss penalty）是指处理未命中所需的时间。这包括从下一级内存中获取数据、替换当前级别内存中的数据（如果需要的话）以及将数据传输到 CPU 的时间。</p><p>理解这些概念对于理解和优化计算机系统的性能至关重要。通过提高命中率、减少命中时间和未命中惩罚，我们可以使 CPU 大部分时间都在与速度最快的存储设备交互，从而提高系统的性能。</p><p>（Effective Access Time, EAT）的公式，它是评估存储器层次结构性能的一个重要指标。</p><p>在两级存储器系统中，EAT 的计算公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>A</mi><mi>T</mi><mo>=</mo><mi>H</mi><mo>×</mo><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi mathvariant="normal">_</mi><mi>C</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>H</mi><mo stretchy="false">)</mo><mo>×</mo><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi mathvariant="normal">_</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">EAT = H \times Access\_C + (1 - H) \times Access\_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>其中：</p><p>H 是命中率（hit rate），即在高级存储器（例如高速缓存）中找到所需数据的概率。<br />Access_C 是高级存储器（例如高速缓存）的访问时间。<br />Access_M 是低级存储器（例如主存）的访问时间。<br />这个公式的含义是，有效访问时间等于命中时的访问时间（即在高级存储器中找到数据的时间）和未命中时的访问时间（即在低级存储器中找到数据的时间）的加权平均。<br />这是一个计算有效访问时间（EAT）的例子。</p><p>在这个例子中，我们有一个主存访问时间为 200ns 的系统，由一个访问时间为 10ns 的高速缓存支持，命中率为 99%。</p><p>我们可以将这些值代入 EAT 的公式进行计算：</p><p>EAT = H × Access_C + (1 - H) × Access_M</p><p>将给定的值代入公式，我们得到：</p><p>EAT = 0.99 × 10ns + (1 - 0.99) × 200ns = 9.9ns + 2ns = 11.9ns</p><p>所以，这个系统的有效访问时间是 3ns。</p><h1 id="高速缓存cache-memory"><a class="markdownIt-Anchor" href="#高速缓存cache-memory"></a> 高速缓存（Cache Memory）</h1><p>高速缓存是位于 CPU 和主存之间的一种非常快速的存储设备，用于存储频繁使用的数据。高速缓存的设计目的是减少 CPU 访问主存的次数，从而提高系统的性能。</p><p>在存储器层次结构中，越是上层的存储设备，其容量越小、速度越快、价格也越贵。相反，越是下层的存储设备，其容量越大、速度越慢、价格也越便宜。这是因为上层的存储设备使用的是更先进、更昂贵的技术，而下层的存储设备使用的是更成熟、更便宜的技术。</p><p>以下是存储器层次结构的一个典型例子：</p><ol><li><p><strong>寄存器</strong>：位于 CPU 内部，存储正在被处理的数据。寄存器的存取速度最快，但数量有限。</p></li><li><p><strong>一级缓存（L1 Cache）</strong>：位于 CPU 内部，存储最近使用的数据。一级缓存的存取速度非常快，但容量小。</p></li><li><p><strong>二级缓存（L2 Cache）</strong>：位于 CPU 内部或者 CPU 和主存之间，存储一级缓存中未能存储的数据。二级缓存的存取速度比一级缓存慢，但容量大。</p></li><li><p><strong>三级缓存（L3 Cache）</strong>：位于 CPU 和主存之间，存储二级缓存中未能存储的数据。三级缓存的存取速度比二级缓存慢，但容量更大。</p></li><li><p><strong>主存（RAM）</strong>：存储当前正在运行的程序和数据。主存的存取速度比高速缓存慢，但容量大。</p></li><li><p><strong>本地磁盘（硬盘、SSD）</strong>：用于长期存储数据。本地磁盘的存取速度比主存慢，但容量非常大。</p></li><li><p><strong>网络存储（网络硬盘、云存储）</strong>：用于存储大量的、不常访问的数据。网络存储的存取速度最慢，但容量几乎无限。</p></li></ol><h1 id="高速缓存映射"><a class="markdownIt-Anchor" href="#高速缓存映射"></a> 高速缓存映射</h1><p>高速缓存映射是计算机科学中的一个重要概念，它描述了如何将内存地址映射到高速缓存中的特定位置。这种映射关系决定了当 CPU 需要访问一个特定的内存地址时，应该在高速缓存的哪个位置查找数据。</p><h2 id="直接映射高速缓存"><a class="markdownIt-Anchor" href="#直接映射高速缓存"></a> 直接映射高速缓存</h2><p>在直接映射高速缓存中，每个内存块都映射到高速缓存的一个特定块。这个映射是通过地址的一部分来确定的。例如，如果我们有一个内存大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>14</mn></msup></mrow><annotation encoding="application/x-tex">2^{14}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> 个字，高速缓存有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> 个块，每个块可以存储 8 个字。这意味着内存被划分为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>14</mn></msup><mi mathvariant="normal">/</mi><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><msup><mn>2</mn><mn>11</mn></msup></mrow><annotation encoding="application/x-tex">2^{14} / 2^{3} = 2^{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个块。</p><p>对于我们的字段大小，我们知道我们需要 4 位来表示块（因为高速缓存有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> 个块），需要 3 位来表示字（因为每个块有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">2^{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> 个字）。剩下的位数用于表示标记（tag）。</p><p>标记用于确定存储在特定高速缓存块中的数据是来自哪个内存块的。这种设计使得高速缓存可以快速确定一个特定的内存地址是否在高速缓存中（即，是否命中），并且如果在，那么它在哪个块中。</p><h2 id="关联映射高速缓存"><a class="markdownIt-Anchor" href="#关联映射高速缓存"></a> 关联映射高速缓存</h2><p>在关联映射高速缓存中，内存地址被划分为两个字段：标签（Tag）和字（Word）。例如，如果我们有 14 位的内存地址和一个有 16 个块的高速缓存，每个块的大小为 8。内存引用的字段格式为：标签和字。</p><p>当搜索高速缓存时，所有的标签都会并行搜索以快速检索数据。这需要特殊的、昂贵的硬件。</p><p>关联映射高速缓存的优点是任何内存块都可以映射到任何高速缓存块，这可以减少高速缓存未命中的可能性。但是，这种方法的缺点是需要更复杂的硬件来并行搜索所有的标签，并在命中时选择正确的数据。</p><h1 id="io-system"><a class="markdownIt-Anchor" href="#io-system"></a> I/O system</h1><h2 id="raid"><a class="markdownIt-Anchor" href="#raid"></a> RAID</h2><p>RAID（冗余独立磁盘阵列）是一种用于提高数据可靠性和性能的存储技术。它通过将数据分布在多个磁盘上，实现了数据的冗余存储和并行访问。</p><h3 id="raid-0"><a class="markdownIt-Anchor" href="#raid-0"></a> RAID 0</h3><p>RAID 0，也被称为条带化，不提供冗余保护，因此不真正符合 RAID 的定义。它通过将数据分布在所有磁盘上，提高了数据的读写速度。但是，如果任何一个磁盘失败，所有的数据都将丢失。</p><h3 id="raid-1"><a class="markdownIt-Anchor" href="#raid-1"></a> RAID 1</h3><p>RAID 1，也被称为镜像，通过完全复制数据到两个或更多的磁盘来提供冗余保护。这意味着每个磁盘都有数据的完整副本。如果一个磁盘失败，其他的磁盘可以继续提供数据访问，无需任何数据恢复过程。</p><h3 id="raid-2"><a class="markdownIt-Anchor" href="#raid-2"></a> RAID 2</h3><p>RAID 2 使用一种称为位级条带化的技术，并使用 Hamming 码进行错误检测和纠正。这种级别的 RAID 已经过时，因为现代磁盘驱动器已经内置了错误检测和纠正。</p><h3 id="raid-3"><a class="markdownIt-Anchor" href="#raid-3"></a> RAID 3</h3><p>RAID 3 使用字节级条带化，并在一个专用的磁盘上存储奇偶校验信息。如果一个磁盘失败，数据可以从奇偶校验信息中恢复。然而，由于所有的读写操作都需要访问奇偶校验磁盘，所以可能会成为瓶颈。</p><h3 id="raid-4"><a class="markdownIt-Anchor" href="#raid-4"></a> RAID 4</h3><p>RAID 4 使用块级条带化，并在一个专用的磁盘上存储奇偶校验信息。这允许同时读取多个磁盘，从而提高了读取性能。然而，写入性能可能会受到影响，因为每次写入都需要更新奇偶校验信息。</p><h3 id="raid-5"><a class="markdownIt-Anchor" href="#raid-5"></a> RAID 5</h3><p>RAID 5 在所有磁盘上分布数据和奇偶校验信息。这种配置提供了冗余保护，并允许在任何一个磁盘失败时继续运行。如果一个磁盘失败，数据可以从其他磁盘的数据和奇偶校验信息中重建。RAID 5 需要至少三个磁盘，但比 RAID 1 和 RAID 0 提供了更好的平衡性能和可靠性。</p><h3 id="raid-6"><a class="markdownIt-Anchor" href="#raid-6"></a> RAID 6</h3><p>RAID 6 类似于 RAID 5，但它在所有磁盘上分布两个独立的奇偶校验信息。这允许在两个磁盘同时失败时继续运行。RAID 6 需要至少四个磁盘，但提供了比 RAID 5 更高的数据保护级别。</p><h3 id="raid-dp"><a class="markdownIt-Anchor" href="#raid-dp"></a> RAID DP</h3><p>RAID DP（双奇偶冗余独立磁盘阵列）是一种特殊的 RAID 级别，主要用于提供额外的数据保护。它是由 NetApp 公司开发的，主要用于其存储系统。</p><p>RAID DP 与 RAID 6 类似，都使用两个奇偶校验块来提供冗余保护。这意味着，即使有两个磁盘同时失败，数据也能够被完整地恢复。</p><p>RAID DP 的一个主要优点是它提供了与 RAID 6 相同级别的数据保护，但是性能损失较小，存储效率更高。这是因为 RAID DP 使用了一种特殊的算法来计算第二个奇偶校验块，这种算法比 RAID 6 的算法更为高效。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组相关笔记②</title>
      <link href="/68e0ed44.html"/>
      <url>/68e0ed44.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W5-W6 指令</p></div><ol><li><a href="/174239bb.html" title="计组相关笔记①">计组相关笔记①</a></li><li><a href="/68e0ed44.html" title="计组相关笔记②">计组相关笔记②</a></li><li><a href="/8e4b6801.html" title="计组相关笔记③">计组相关笔记③</a></li><li><a href="/8e4b6846.html" title="计组相关笔记④">计组相关笔记④</a></li></ol><h2 id="vsc-微指令"><a class="markdownIt-Anchor" href="#vsc-微指令"></a> VSC 微指令</h2><p><img src="../attach/Pasted%20image%2020240416210716.png" alt="" /></p><table><thead><tr><th style="text-align:center">Binary</th><th style="text-align:center">Instruction</th><th style="text-align:center">Meaning</th><th style="text-align:left">RTL</th></tr></thead><tbody><tr><td style="text-align:center">0000</td><td style="text-align:center">Jns X</td><td style="text-align:center">store the PC at address X and jump to X + 1</td><td style="text-align:left">MBR ← PC<br>MAR ← X<br>M[MAR] ← MBR<br>MBR ← X<br>AC ← 1<br>AC ← AC + MBR<br>PC ← AC</td></tr><tr><td style="text-align:center">0001</td><td style="text-align:center">Load X</td><td style="text-align:center">Load contents of address X into AC.</td><td style="text-align:left">MAR ← X<br>MBR ← M[MAR]<br>AC ← MBR</td></tr><tr><td style="text-align:center">0010</td><td style="text-align:center">Store X</td><td style="text-align:center">Store the contents of AC at address X.</td><td style="text-align:left">MAR ← X<br>MBR ← AC<br>M[MAR] ← MBR</td></tr><tr><td style="text-align:center">0011</td><td style="text-align:center">Add X</td><td style="text-align:center">Add the contents of address X to AC.</td><td style="text-align:left">MAR ← X<br>MBR ← M[MAR] <br>AC ← AC + MBR</td></tr><tr><td style="text-align:center">0100</td><td style="text-align:center">Subt X</td><td style="text-align:center">Subtract the contents of address X from AC.</td><td style="text-align:left">MAR ← X<br>MBR ← M[MAR]<br>AC ← AC - MBR</td></tr><tr><td style="text-align:center">0101</td><td style="text-align:center">Input</td><td style="text-align:center">Input a value from the keyboard into AC.</td><td style="text-align:left">AC ← InREG</td></tr><tr><td style="text-align:center">0110</td><td style="text-align:center">Output</td><td style="text-align:center">Output the value in AC to the display.</td><td style="text-align:left">OutREG ← AC</td></tr><tr><td style="text-align:center">0111</td><td style="text-align:center">Halt</td><td style="text-align:center">Terminate program.</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">Skipcond</td><td style="text-align:center">Skip next instruction on condition.</td><td style="text-align:left">If IR[11-10] = 00 then<br>If AC &lt; 0 then PC ← PC + 1<br>Else If IR[11-10] = 01 then<br>If AC = 0 then PC ← PC + 1<br>Else If IR[11-10] = 10 then<br>If AC &gt; 0 then PC ← PC + 1</td></tr><tr><td style="text-align:center">1001</td><td style="text-align:center">Jump X</td><td style="text-align:center">Load the value of X into PC.</td><td style="text-align:left">PC ← IR[11-0]</td></tr><tr><td style="text-align:center">1010</td><td style="text-align:center">Clear</td><td style="text-align:center">set AC to 0</td><td style="text-align:left">AC ← 0</td></tr><tr><td style="text-align:center">1011</td><td style="text-align:center">AddI X</td><td style="text-align:center">Add Immediate with address X</td><td style="text-align:left">MAR ← X<br>MBR ← M[MAR]<br>MAR ← MBR<br>MBR ← M[MAR]<br>AC ← AC + MBR</td></tr><tr><td style="text-align:center">1100</td><td style="text-align:center">JumpI X</td><td style="text-align:center">Use the value at X as the actual address of the location to jump to</td><td style="text-align:left">MAR ← X<br>MBR ← M[MAR]<br>PC ← MBR</td></tr></tbody></table><table><thead><tr><th>Hex Address</th><th>Instruction</th><th>Binary Contents of Memory Address</th><th>Hex Contents of Memory</th></tr></thead><tbody><tr><td>100</td><td>Load 104</td><td>0001000100000100</td><td>1104</td></tr><tr><td>101</td><td>Add 105</td><td>0011000100000101</td><td>3105</td></tr><tr><td>102</td><td>Store 106</td><td>0010000100000110</td><td>2106</td></tr><tr><td>103</td><td>Halt</td><td>0111000000000000</td><td>7000</td></tr><tr><td>104</td><td>0023</td><td>0000000000100011</td><td>0023</td></tr><tr><td>105</td><td>FFE9</td><td>1111111111101001</td><td>FFE9</td></tr><tr><td>106</td><td>0000</td><td>0000000000000000</td><td>0000</td></tr></tbody></table><p>LOAD 104</p><table><thead><tr><th>Step</th><th>RTN</th><th>PC</th><th>IR</th><th>MAR</th><th>MBR</th><th>AC</th></tr></thead><tbody><tr><td>LOAD 104</td><td></td><td>100</td><td>----</td><td>—</td><td>----</td><td>----</td></tr><tr><td>Fetch</td><td>MAR ← PC</td><td>100</td><td>----</td><td>100</td><td>----</td><td>----</td></tr><tr><td></td><td>IR ← M[MAR]</td><td>100</td><td>1104</td><td>100</td><td>----</td><td>----</td></tr><tr><td></td><td>PC ← PC + 1</td><td>101</td><td>1104</td><td>100</td><td>----</td><td>----</td></tr><tr><td>Decode</td><td>MAR ← IR[11-0]</td><td>101</td><td>1104</td><td>104</td><td>----</td><td>----</td></tr><tr><td></td><td>(Decode IR[15-12])</td><td>101</td><td>1104</td><td>104</td><td>----</td><td>----</td></tr><tr><td>Get operand</td><td>MBR ← M[MAR]</td><td>101</td><td>1104</td><td>104</td><td>0023</td><td>----</td></tr><tr><td>Execute</td><td>AC ← MBR</td><td>101</td><td>1104</td><td>104</td><td>0023</td><td>0023</td></tr></tbody></table><p>ADD 105</p><table><thead><tr><th>Step</th><th>RTN</th><th>PC</th><th>IR</th><th>MAR</th><th>MBR</th><th>AC</th></tr></thead><tbody><tr><td>ADD 105</td><td></td><td>101</td><td>1104</td><td>104</td><td>0023</td><td>0023</td></tr><tr><td>Fetch</td><td>MAR ← PC</td><td>101</td><td>1104</td><td>101</td><td>0023</td><td>0023</td></tr><tr><td></td><td>IR ← M[MAR]</td><td>101</td><td>3105</td><td>101</td><td>0023</td><td>0023</td></tr><tr><td></td><td>PC ← PC + 1</td><td>102</td><td>3105</td><td>101</td><td>0023</td><td>0023</td></tr><tr><td>Decode</td><td>MAR ← IR[11–0]</td><td>102</td><td>3105</td><td>105</td><td>0023</td><td>0023</td></tr><tr><td></td><td>(Decode IR[15–12])</td><td>102</td><td>3105</td><td>105</td><td>0023</td><td>0023</td></tr><tr><td>Get operand</td><td>MBR ← M[MAR]</td><td>102</td><td>3105</td><td>105</td><td>FFE9</td><td>0023</td></tr><tr><td>Execute</td><td>AC ← AC + MBR</td><td>102</td><td>3105</td><td>105</td><td>FFE9</td><td>000C</td></tr></tbody></table><p>Store 106</p><table><thead><tr><th>Step</th><th>RTN</th><th>PC</th><th>IR</th><th>MAR</th><th>MBR</th><th>AC</th></tr></thead><tbody><tr><td>Store 106</td><td></td><td>102</td><td>3105</td><td>105</td><td>FFE9</td><td>000C</td></tr><tr><td>Fetch</td><td>MAR ← PC</td><td>102</td><td>3105</td><td>102</td><td>FFE9</td><td>000C</td></tr><tr><td></td><td>IR ← M[MAR]</td><td>102</td><td>2106</td><td>102</td><td>FFE9</td><td>000C</td></tr><tr><td></td><td>PC ← PC + 1</td><td>103</td><td>2106</td><td>102</td><td>FFE9</td><td>000C</td></tr><tr><td>Decode</td><td>MAR ← IR[11–0]</td><td>103</td><td>2106</td><td>106</td><td>FFE9</td><td>000C</td></tr><tr><td></td><td>(Decode IR[15–12])</td><td>103</td><td>2106</td><td>106</td><td>FFE9</td><td>000C</td></tr><tr><td>Get operand</td><td>(not necessary)</td><td>103</td><td>2106</td><td>106</td><td>FFE9</td><td>000C</td></tr><tr><td>Execute</td><td>MBR ← AC</td><td>103</td><td>2106</td><td>106</td><td>000C</td><td>000C</td></tr><tr><td></td><td>M[MAR] ← MBR</td><td>103</td><td>2106</td><td>106</td><td>000C</td><td>000C</td></tr></tbody></table><h2 id="字节序"><a class="markdownIt-Anchor" href="#字节序"></a> 字节序</h2><p><strong>小端序（Little Endian）</strong>：小端序是指数据的低位字节存放在低地址端，高位字节存放在高地址端。<br /><strong>大端序（Big Endian）</strong>：大端序是指数据的高位字节存放在低地址端，低位字节存放在高地址端。</p><p><img src="../attach/Pasted%20image%2020240416213212.png" alt="" /></p><h2 id="后缀表示法"><a class="markdownIt-Anchor" href="#后缀表示法"></a> 后缀表示法</h2><p>postfix notation</p><p>Z = (X × Y) + (W × U)</p><p>这个是？编译原理的？</p><p>Z = X Y × W U × +</p><p>one-address ISA like VSC infix expression：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUSH X</span><br><span class="line">PUSH Y</span><br><span class="line">MULT</span><br><span class="line">PUSH W</span><br><span class="line">PUSH U</span><br><span class="line">MULT ADD</span><br><span class="line">POP Z</span><br><span class="line">//数据结构的栈</span><br></pre></td></tr></table></figure><p>two-address ISA the infix expression：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD R1,X</span><br><span class="line">MULT R1,Y</span><br><span class="line">LOAD R2,W</span><br><span class="line">MULT R2,U</span><br><span class="line">ADD R1,R2</span><br><span class="line">STORE Z,R1</span><br></pre></td></tr></table></figure><p>three-address ISA</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MULT R1,X,Y</span><br><span class="line">MULT R2,W,U</span><br><span class="line">ADD Z,R1,R2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组相关笔记①</title>
      <link href="/174239bb.html"/>
      <url>/174239bb.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>W1-W5</p></div><ol><li><a href="/174239bb.html" title="计组相关笔记①">计组相关笔记①</a></li><li><a href="/68e0ed44.html" title="计组相关笔记②">计组相关笔记②</a></li><li><a href="/8e4b6801.html" title="计组相关笔记③">计组相关笔记③</a></li><li><a href="/8e4b6846.html" title="计组相关笔记④">计组相关笔记④</a></li></ol><h2 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换"></a> 进制转换</h2><p>各种各样的进制互相转化啦<br />repeated subtraction<br />division remainder<br />注意除余法是倒着来</p><p><img src="../attach/Pasted%20image%2020240513145745.png" alt="" /></p><p><img src="../attach/Pasted%20image%2020240513145801.png" alt="" /></p><h2 id="原码反码补码"><a class="markdownIt-Anchor" href="#原码反码补码"></a> 原码反码补码</h2><p>第一位是符号位 正数 0 负数 1<br />正数的原码反码补码都一样！<br />正数的原码反码补码都一样！<br />正数的原码反码补码都一样！</p><ol><li>signed magnitude 原码：转化成二进制</li><li>one’s complement 反码：正数的反码和原码一样 负数的反码是原码除了第一位以外 所有的位反转</li><li>two’s complement 补码：正数的补码和原码一样 负数的补码是在反码的基础上+1</li></ol><p><img src="../attach/Pasted%20image%2020240513150606.png" alt="" /></p><h2 id="浮点表示法"><a class="markdownIt-Anchor" href="#浮点表示法"></a> 浮点表示法</h2><p>在作业中，我们通常使用 14 位来表示浮点数，记住 158 就可以了。</p><p><img src="../attach/Pasted%20image%2020240513150907.png" alt="" /></p><p>如果你看到&quot;with a bias of 16&quot;，这是指我们在表示指数时使用了偏移量。偏移量是一个大约在可表示的指数范围中间的数。我们从指数中减去偏移量来确定其真实值。在我们的例子中，我们有一个 5 位的指数，我们使用 16 作为我们的偏移量。这被称为超过 16 的表示法。</p><p>也就是说，158 中的 5，这个部分加上 16，然后再转化成二进制，就是我们的指数部分。</p><p>关于小数部分 第一位必须是 1 没什么好解释的 也就是小数部分必须是 0.1xxxxx 再乘 2 的几次方<br />然后这个小数部分抄到 158 的 8 中从前面开始写 后面不够就补 0</p><p><img src="../attach/Pasted%20image%2020240513151018.png" alt="" /></p><h2 id="crc-循环冗余校验"><a class="markdownIt-Anchor" href="#crc-循环冗余校验"></a> crc 循环冗余校验</h2><p>话不多说 看例题就行</p><p><img src="../attach/Pasted%20image%2020240513151904.png" alt="" /><br /><img src="../attach/Pasted%20image%2020240513151850.png" alt="" /></p><h2 id="汉明码"><a class="markdownIt-Anchor" href="#汉明码"></a> 汉明码</h2><p>先鸽着</p><h2 id="真值表"><a class="markdownIt-Anchor" href="#真值表"></a> 真值表</h2><p>送分题 仔细点咯</p><p><img src="../attach/Pasted%20image%2020240513152051.png" alt="" /></p><h2 id="表达式化简"><a class="markdownIt-Anchor" href="#表达式化简"></a> 表达式化简</h2><p><img src="../attach/Pasted%20image%2020240513152142.png" alt="" /></p><h2 id="或与非逻辑门"><a class="markdownIt-Anchor" href="#或与非逻辑门"></a> 或与非逻辑门</h2><p>给出表达式照着画图就 ok</p><h2 id="寻址"><a class="markdownIt-Anchor" href="#寻址"></a> 寻址</h2><p>How many bits would you need to address a 2M × 32 memory if<br />a. The memory is byte-addressable?<br />b. The memory is word-addressable?</p><p>如果内存是：<br />a. 字节寻址的？<br />b. 字寻址的？</p><p>首先，我们需要明白 2M × 32 内存表示的是 2M 个 32 位的字，也就是 2M 个 4 字节 的字。</p><p>a. 如果内存是字节寻址的，那么我们需要寻址的是每一个字节。因此，总的字节数是 2M 个字 × 4 字节/字 = 8M 字节。为了寻址 8M 个字节，我们需要 log2(8M) = 23 位。</p><p>b. 如果内存是字寻址的，那么我们需要寻址的是每一个字。因此，总的字数是 2M 个。为了寻址 2M 个字，我们需要 log2(2M) = 21 位。</p><h2 id="芯片组"><a class="markdownIt-Anchor" href="#芯片组"></a> 芯片组</h2><p>Suppose that a 2M × 16 main memory is built using 256K × 8 RAM chips and memory is word-addressable.<br />假设使用 256K × 8 RAM 芯片构建了一个 2M × 16 的主存储器，并且内存是字寻址的。</p><p>a. How many RAM chips are necessary?<br />a. 需要多少 RAM 芯片？<br />主存储器的总位数是 2M × 16，而每个 RAM 芯片的位数是 256K × 8。所以，需要的 RAM 芯片数是(2M × 16) / (256K × 8) = 16。</p><p>b. How many RAM chips are there per memory word?<br />b. 每个内存字有多少 RAM 芯片？<br />因为内存是字寻址的，每个字的大小是 16 位。每个 RAM 芯片可以提供 8 位，所以每个内存字需要 2 个 RAM 芯片。</p><p>c. How many address bits are needed for each RAM chip?<br />c. 每个 RAM 芯片需要多少地址位？<br />每个 RAM 芯片的大小是 256K，所以需要 log2(256K) = 18 位地址。</p><p>d. How many banks will this memory have?<br />d. 这个内存会有多少个存储区？<br />因为每个内存字需要 2 个 RAM 芯片，所以总的存储区数是 RAM 芯片数 / 每个内存字的 RAM 芯片数 = 16 / 2 = 8。</p><p>e. How many address bits are needed for all of memory?<br />e. 所有内存需要多少地址位？<br />主存储器的大小是 2M 个字，因为内存是字寻址的，所以需要 log2(2M) = 21 位地址。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 快捷键</title>
      <link href="/ad2c1cd2.html"/>
      <url>/ad2c1cd2.html</url>
      
        <content type="html"><![CDATA[<p>ctrl + enter 行中换行<br />alt + up / down 上下移行<br />shift + alt + up / down 上下复制<br />ctrl + left / right 跳单词（跳块）<br />ctrl + delete / backspace 删单词（删块）<br />ctrl + l 多按几次 选单行，继续按选多行<br />shift + delete 删一行<br />ctrl + j 下栏<br />ctrl + b 左栏<br />ctrl + ` 终端<br />alt + LButton 多位编辑<br />ctrl + / 注释<br />ctrl + [/] 缩进<br />ctrl + +/- ui 缩放<br />ctrl + 0 定位文件<br />ctrl shift p 命令<br />ctrl p 在文件夹内搜索文件<br />f2 重命名变量</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>删除github中的提交历史记录</title>
      <link href="/c21463eb.html"/>
      <url>/c21463eb.html</url>
      
        <content type="html"><![CDATA[<h2 id="切换分支"><a class="markdownIt-Anchor" href="#切换分支"></a> 切换分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure><h2 id="暂存文件"><a class="markdownIt-Anchor" href="#暂存文件"></a> 暂存文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure><h2 id="提交更改"><a class="markdownIt-Anchor" href="#提交更改"></a> 提交更改</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -am &quot;commit message&quot;</span><br></pre></td></tr></table></figure><h2 id="删除原始分支"><a class="markdownIt-Anchor" href="#删除原始分支"></a> 删除原始分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -D main</span><br></pre></td></tr></table></figure><h2 id="重命名分支"><a class="markdownIt-Anchor" href="#重命名分支"></a> 重命名分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -m main</span><br></pre></td></tr></table></figure><h2 id="强制更新"><a class="markdownIt-Anchor" href="#强制更新"></a> 强制更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Matplotlib工具</title>
      <link href="/8cf19610.html"/>
      <url>/8cf19610.html</url>
      
        <content type="html"><![CDATA[<h2 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="comment"># Ignore warnings</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="line-chart"><a class="markdownIt-Anchor" href="#line-chart"></a> Line chart</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_data = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">100</span>)  <span class="comment"># Sample data</span></span><br><span class="line">y_data = x_data**<span class="number">2</span></span><br><span class="line">plt.plot(x_data,y_data)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;responding variable&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;independent variable&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../attach/Pasted%20image%2020240416133119.png" alt="" /></p><h3 id="bar-chart"><a class="markdownIt-Anchor" href="#bar-chart"></a> Bar chart</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots() <span class="comment">#to plot on same axes</span></span><br><span class="line"></span><br><span class="line">students = [<span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;Brenda&#x27;</span>, <span class="string">&#x27;Liz&#x27;</span>]</span><br><span class="line">height = [<span class="number">175</span>, <span class="number">190</span>, <span class="number">165</span>, <span class="number">158</span>]</span><br><span class="line">bar_labels = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">bar_colors = [<span class="string">&#x27;tab:red&#x27;</span>, <span class="string">&#x27;tab:blue&#x27;</span>, <span class="string">&#x27;tab:pink&#x27;</span>, <span class="string">&#x27;tab:green&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ax.bar(students, height, label=bar_labels, color=bar_colors)</span><br><span class="line"></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Height (cm)&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Students&#x27; height and their favourite colour&quot;</span>)</span><br><span class="line">ax.legend(title=<span class="string">&#x27;Colour&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../attach/Pasted%20image%2020240416133155.png" alt="" /></p><h3 id="pie-chart"><a class="markdownIt-Anchor" href="#pie-chart"></a> Pie chart</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [<span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;Brenda&#x27;</span>, <span class="string">&#x27;Liz&#x27;</span>]</span><br><span class="line">donation = [<span class="number">100</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">120</span>]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.pie(donation, labels=students)</span><br><span class="line">ax.set_title(<span class="string">&quot;Contribution of students in a fundraising&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Export figure as png</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;pie.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../attach/Pasted%20image%2020240416133240.png" alt="" /></p><h2 id="marker-and-linestyle"><a class="markdownIt-Anchor" href="#marker-and-linestyle"></a> marker and linestyle</h2><p>在 <code>matplotlib</code> 中，<code>marker</code> 参数用于指定图表上数据点的标记样式。<code>'o'</code> 是一个圆圈标记，用于在图表的每个数据点位置绘制一个小圆圈。除了圆圈外，还有许多其他类型的标记可供选择。</p><p>下面是一些常用的 <code>matplotlib</code> 标记类型：</p><ul><li><code>'.'</code>: 点</li><li><code>'o'</code>: 圆圈</li><li><code>'s'</code>: 正方形</li><li><code>'^'</code>: 向上的三角形</li><li><code>'&gt;'</code>: 向右的三角形</li><li><code>'&lt;'</code>: 向左的三角形</li><li><code>'v'</code>: 向下的三角形</li><li><code>'p'</code>: 五角星</li><li><code>'*'</code>: 星号</li><li><code>'+'</code>: 加号</li><li><code>'x'</code>: 叉号</li><li><code>'D'</code>: 菱形</li><li><code>'H'</code>: 六边形1</li><li><code>'8'</code>: 六边形2</li></ul><p>您可以在 <code>plot</code> 函数中使用 <code>marker</code> 参数来指定这些标记中的任何一个，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, y, marker=<span class="string">&#x27;*&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这将在图表的每个数据点上绘制一个星号。选择哪种标记类型通常取决于您的个人喜好，以及哪种标记能在您的图表中提供最好的可视化效果。</p><p>在 <code>matplotlib</code> 中，<code>linestyle</code> 参数用来定义线条的样式。这对于区分图表中的不同数据系列或改善图表的可读性非常有用。以下是一些可用的 <code>linestyle</code> 选项：</p><ul><li><code>'-'</code> 或 <code>'solid'</code>: 实线</li><li><code>'--'</code> 或 <code>'dashed'</code>: 虚线</li><li><code>'-.'</code> 或 <code>'dashdot'</code>: 点划线</li><li><code>':'</code> 或 <code>'dotted'</code>: 点线</li><li><code>''</code> 或 <code>'None'</code>: 不画线</li></ul><p>您可以根据需要选择其中的任何一个样式来自定义您的折线图。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, y, linestyle=<span class="string">&#x27;--&#x27;</span>)  <span class="comment"># 会绘制虚线</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云崽安装</title>
      <link href="/9759399f.html"/>
      <url>/9759399f.html</url>
      
        <content type="html"><![CDATA[<h2 id="换源"><a class="markdownIt-Anchor" href="#换源"></a> 换源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh)</span><br></pre></td></tr></table></figure><ol><li>选择 6 清华源</li><li>按 Y 使用 HTTP</li><li>更新软件包</li><li>一路回车</li><li>按 Y 清理缓存</li></ol><h2 id="安装-docker"><a class="markdownIt-Anchor" href="#安装-docker"></a> 安装 docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure><ol><li>按 Y 安装最新</li><li>选择清华源</li><li>选择官方源</li><li>一路回车</li></ol><h2 id="安装-napcat"><a class="markdownIt-Anchor" href="#安装-napcat"></a> 安装 NapCat</h2><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">  -e ACCOUNT=********** \</span></span><br><span class="line"><span class="language-bash">  -e WSR_ENABLE=<span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">  -e WS_URLS=<span class="string">&#x27;[&quot;ws://172.17.0.1:2536/OneBotv11&quot;]&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">  -e MESSAGE_POST_FORMAT=array \</span></span><br><span class="line"><span class="language-bash">  --name napcat \</span></span><br><span class="line"><span class="language-bash">  --net=bridge \</span></span><br><span class="line"><span class="language-bash">  --mac-address=<span class="string">&quot;02:42:ac:11:00:02&quot;</span> \</span></span><br><span class="line"><span class="language-bash">  --restart=always \</span></span><br><span class="line"><span class="language-bash">  -v /qq:/root/.config/QQ \</span></span><br><span class="line"><span class="language-bash">  -v /qq/napcat/config:/usr/src/app/napcat/config \</span></span><br><span class="line"><span class="language-bash">  registry.cn-hangzhou.aliyuncs.com/xiaotan-images/napcat-docker:latest</span></span><br></pre></td></tr></table></figure><h2 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs napcat</span><br></pre></td></tr></table></figure><h2 id="安装-trss_allbot"><a class="markdownIt-Anchor" href="#安装-trss_allbot"></a> 安装 TRSS_AllBot</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L gitee.com/xioatan/TRSS_AllBot/raw/main/Install-Docker.sh)</span><br></pre></td></tr></table></figure><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><h3 id="discord-plugin"><a class="markdownIt-Anchor" href="#discord-plugin"></a> Discord Plugin</h3><ol><li>准备：<a href="https://github.com/TimeRainStarSky/Yunzai">TRSS-Yunzai</a></li><li>输入：<code>#安装Discord-Plugin</code></li><li>打开：<a href="https://discord.com/developers">Discord Developer Portal</a>  创建 Bot：<br />① New Application<br />② Bot → Privileged Gateway Intents → 全部开启<br />③ Bot → Reset Token → 得到  <code>Token</code><br />④ OAuth2 → URL Generator → SCOPES 选择  <code>bot</code> → BOT PERMISSIONS 选择  <code>Administrator</code> → 打开 GENERATED URL → 邀请 Bot 进入服务器</li><li>输入：<code>#DC设置 + Token</code></li></ol><ul><li><code>#DC账号</code></li><li><code>#DC设置</code> + <code>Token</code></li><li><code>#DC代理/反代</code> + <code>scheme://[userinfo@]host[:port]</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
            <tag> #云崽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker运行Nginx反向代理</title>
      <link href="/c3eaed85.html"/>
      <url>/c3eaed85.html</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong></p><p>本指南介绍如何使用 Docker 运行 Nginx Proxy Manager，这是一个反向代理服务器，可用于管理和保护 Web 应用程序。</p><p>Nginx Proxy Manager <a href="https://nginxproxymanager.com/guide/">官网</a></p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name app --restart unless-stopped -p 80:80 -p 81:81 -p 443:443 -v ./data:/data -v ./letsencrypt:/etc/letsencrypt jc21/nginx-proxy-manager:latest</span></span><br></pre></td></tr></table></figure><p>Log in to the Admin UI</p><p>127.0.0.1:81</p><p>Default Admin User:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><p>Immediately after logging in with this default user you will be asked to modify your details and change your password</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux部署小雅</title>
      <link href="/ab23ea10.html"/>
      <url>/ab23ea10.html</url>
      
        <content type="html"><![CDATA[<p>整合安装脚本，内置所有相关软件的安装。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -sLk https://ddsrem.com/xiaoya_install.sh)&quot;</span><br></pre></td></tr></table></figure><p><a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">阿里云 32 位</a></p><p><a href="https://alist.nn.ci/tool/aliyundrive/request.html">阿里云 335 位</a></p><p>转存文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">65673c1d16d4dc27fe5d4ba9a5dd73647255939b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
            <tag> #Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1装青龙面板</title>
      <link href="/2647769e.html"/>
      <url>/2647769e.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -dit \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/config:/ql/config \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/log:/ql/log \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/db:/ql/db \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/scripts:/ql/scripts \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/repo:/ql/repo \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/raw:/ql/raw \</span></span><br><span class="line"><span class="language-bash">-v /mnt/sda1/qinglong/jbot:/ql/jbot \</span></span><br><span class="line"><span class="language-bash">-p 5700:5700 \</span></span><br><span class="line"><span class="language-bash">-e ENABLE_HANGUP=<span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">-e ENABLE_TG_BOT=<span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">-e ENABLE_WEB_PANEL=<span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">--name qinglong \</span></span><br><span class="line"><span class="language-bash">--hostname qinglong \</span></span><br><span class="line"><span class="language-bash">--restart always \</span></span><br><span class="line"><span class="language-bash">whyour/qinglong:latest</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小米手环7自定义表盘</title>
      <link href="/e7b5683a.html"/>
      <url>/e7b5683a.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于米坛社区"><a class="markdownIt-Anchor" href="#关于米坛社区"></a> 关于米坛社区</h2><p>米坛社区是大型中文智能穿戴设备交流社区，在这里交流你的极客思想，共同建造我们的智能世界</p><p><a href="https://www.bandbbs.cn/forums/mb7/">链接-小米手环7米坛社区 </a></p><h2 id="下载工具"><a class="markdownIt-Anchor" href="#下载工具"></a> 下载工具</h2><p><a href="https://www.bandbbs.cn/threads/3953/">小米手环7表盘图片转换工具</a></p><p><a href="https://www.bandbbs.cn/threads/4060/">小米手环7表盘/小程序模拟器v1.1 开发利器</a></p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><h3 id="图片转换工具"><a class="markdownIt-Anchor" href="#图片转换工具"></a> 图片转换工具</h3><p><img src="https://s2.loli.net/2024/04/01/e8DirQlZyn1GhUO.png" alt="image.png" /></p><p>怎么说呢 你要是不确定哪个是gt3哪个是png就先点上面的再点下面的</p><p>报错了就是不对了 点另外一个就行 反正只有两个选项</p><h3 id="表盘开发工具"><a class="markdownIt-Anchor" href="#表盘开发工具"></a> 表盘开发工具</h3><p>1.点击start.exe打开服务</p><p>2.打开浏览器地址 <a href="http://127.0.0.1:8088/">http://127.0.0.1:8088/</a>打开以下画面。</p><p>访问不了的看下是否解压路径包含中文，是否8088端口已被占用</p><p><img src="https://s2.loli.net/2024/04/01/g8ZxtjWfavTM7lh.png" alt="image.png" /></p><p>3.ok，模拟器已经启动完毕了，接下来就是修改表盘了。表盘文件在以下目录。里面的文件跟正常表盘解压出来的一样。但是注意，解压出来的图片要转成正常png，打包时也要手动转成tga格式的 转换工具见上文</p><p><img src="https://s2.loli.net/2024/04/01/NiPQzHxZJ1TytB5.png" alt="image.png" /></p><p>接着，可以使用任何开发工具进行修改，修改完刷新浏览器就行了。有的时候浏览器有缓存，把缓存清了刷新。</p><h3 id="在线图片编辑"><a class="markdownIt-Anchor" href="#在线图片编辑"></a> 在线图片编辑</h3><p><a href="https://www.photopea.com/">https://www.photopea.com/</a></p><p>使用的时候有可能会需要噢 很方便调整图片大小</p><p>当然如果你精通ps和其他的图片处理工具那当我没说</p><p>文字内容转载于米坛社区</p><p>关于工具开发者<a href="https://www.bandbbs.cn/members/2000/">大佬的主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小秘密</title>
      <link href="/ddfa939.html"/>
      <url>/ddfa939.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试噢~" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="12011b9af20f7dacd8af2369897a83a5ebed0e7fbf1157561d00a84b919dce14">34fa0f06fa3a97dbce5f60a54fd20eafc8597e97f8fc8cc54599a3e46bd8515efad9a88212f58ad29ab8868f15d5b0a3590b2e9b86414466e2a8c83f125b7b4bdfe564ee740a36299584f35374cae6cad5c618a82a0187762be387e2751d7f9d91ee7ef80227b20e063d579c1d0dae96987cdddc276b9419b0654992acf926d7c37b83dc60ef25f5ea08ab7bf33993ce45aebd6e7e90014d64494dc25f6065382effed42c566b3d09b505d298764a5271b5b9a51dd778fc6dcdb2bb716f62b4c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="要密码的噢~ 找博主要吧~">要密码的噢~ 找博主要吧~</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> #需要密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化博客</title>
      <link href="/a6bbcd15.html"/>
      <url>/a6bbcd15.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init **** //(自定义项目名)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ****  //进入blog-demo文件夹</span><br></pre></td></tr></table></figure><h2 id="删除-node-开头的文件"><a class="markdownIt-Anchor" href="#删除-node-开头的文件"></a> 删除 node 开头的文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h2 id="初始化完毕-启动"><a class="markdownIt-Anchor" href="#初始化完毕-启动"></a> 初始化完毕 启动！</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="关于其他省略步骤"><a class="markdownIt-Anchor" href="#关于其他省略步骤"></a> 关于其他省略步骤</h2><p><a href="https://www.fomal.cc/posts/e593433d.html#9-%E5%B0%86%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BD%E5%88%B0-GitHub-Pages">参考文档</a></p><p>怎么说呢 我只是怕自己以后重装电脑搞忘记了 备份一下 并没有写那么详细</p><hr /><h1 id="obsidian-设置"><a class="markdownIt-Anchor" href="#obsidian-设置"></a> Obsidian 设置</h1><h2 id="打开项目"><a class="markdownIt-Anchor" href="#打开项目"></a> 打开项目</h2><p>选择博客的文件位置<br /><img src="../attach/Pasted%20image%2020240402133216.png" alt="" /></p><h2 id="更改设置"><a class="markdownIt-Anchor" href="#更改设置"></a> 更改设置</h2><ol><li>照着改就行<br /><img src="../attach/Pasted%20image%2020240402134724.png" alt="" /></li><li>记得忽略这些<br /><img src="../attach/Pasted%20image%2020240402133648.png" alt="" /></li></ol><h2 id="修改模板"><a class="markdownIt-Anchor" href="#修改模板"></a> 修改模板</h2><ol><li>打开 scaffolds 的 <a href="http://page.md">page.md</a> 源文件</li><li>复制粘贴进去</li></ol><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line"></span><br><span class="line">date: &#123;&#123;date&#125;&#125; &#123;&#123;time&#125;&#125;</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="使用模板"><a class="markdownIt-Anchor" href="#使用模板"></a> 使用模板</h2><p>写完文章之后按这个就行 选 page（目前只用到了这个）<br /><img src="../attach/Pasted%20image%2020240402135006.png" alt="" /></p><h2 id="安装-git-插件"><a class="markdownIt-Anchor" href="#安装-git-插件"></a> 安装 Git 插件</h2><p>这就不多说了直接装就行</p><hr /><h1 id="github-设置"><a class="markdownIt-Anchor" href="#github-设置"></a> Github 设置</h1><h2 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> 创建仓库</h2><h3 id="共有仓库-博客展示"><a class="markdownIt-Anchor" href="#共有仓库-博客展示"></a> 共有仓库 博客展示</h3><ul><li>仓库的格式必须为：&lt;用户名&gt;.github.io</li></ul><h3 id="私有仓库-存放源码"><a class="markdownIt-Anchor" href="#私有仓库-存放源码"></a> 私有仓库 存放源码</h3><ul><li>这个随便起名字啦 <a href="http://xn--ihqt10cg2nlht.md">不要生成.md</a> 说明文档 最好不要 别问为什么</li></ul><h2 id="自动化"><a class="markdownIt-Anchor" href="#自动化"></a> 自动化</h2><p><a href="https://akilar.top/posts/f752c86d/">参考文档</a></p><hr /><h1 id="vercel-设置"><a class="markdownIt-Anchor" href="#vercel-设置"></a> vercel 设置</h1><h2 id="新建项目"><a class="markdownIt-Anchor" href="#新建项目"></a> 新建项目</h2><p>新建了从 GitHub 直接 import 那个共有仓库的项目就行<br />不要做任何设置直接 deploy<br />因为自动化的任务在 GitHub 已经完成了 参考上文自动化</p><h2 id="绑定域名"><a class="markdownIt-Anchor" href="#绑定域名"></a> 绑定域名</h2><p>Setting – 》Domains<br />输入自己的域名就行<br />后期可能出教程</p><h2 id="修改分支"><a class="markdownIt-Anchor" href="#修改分支"></a> 修改分支</h2><p>自动化部署到的分支是 master 我也不知道怎么改到 main 索性就把 vercel 的改成 master 就好了<br /><img src="../attach/Pasted%20image%2020240402140934.png" alt="" /></p><hr /><h1 id="关于博客迁移"><a class="markdownIt-Anchor" href="#关于博客迁移"></a> 关于博客迁移</h1><h2 id="复制文件"><a class="markdownIt-Anchor" href="#复制文件"></a> 复制文件</h2><p>创一个新文件夹 复制这些文件</p><p><img src="../attach/Pasted%20image%2020240402132605.png" alt="" /></p><h2 id="目录文件说明"><a class="markdownIt-Anchor" href="#目录文件说明"></a> 目录文件说明</h2><p>.github 用于自动化部署<br />.obsidian 当然是用来在 ob 里面写 md 文档<br />scaffolds 存放模板文件<br />source 博客源码 md 文件<br />themes 主题文件夹（魔改都在里面啦）<br />gitignore 说明在提交时哪些文件可以忽略|<br />config.butterfly.yml 主题配置文件，为了方便主题升级剥离出来的配置文件<br />config.yml 站点配置文件<br />package.json：说明使用哪些依赖包<br />其他的文件都可以通过命令自动再生成的啦<br />git：无论是在站点根目录下，还是主题目录下的.git 文件，都可以删掉<br />node_modules：<code>npm install</code>会根据 package.json 生成<br />public：<code>hexo g</code>会重新编译生成<br />deploy_git：在使用<code>hexo d</code>时也会重新生成<br />db.json 文件：<code>hexo s</code>快速启动所需的数据库<br />package-lock.json：记录依赖之间的内部依赖关系，可以根据<code>package.json</code>重新生成</p><hr /><h1 id="使用到的美化"><a class="markdownIt-Anchor" href="#使用到的美化"></a> 使用到的美化</h1><p><a href="https://www.fomal.cc/posts/2d7ac914.html#%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E6%8F%92%E4%BB%B6">文章加密插件</a></p><p><a href="https://www.fomal.cc/posts/5389e93f.html#%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E7%9A%84%E5%BC%95%E5%85%A5%EF%BC%88%E5%BA%97%E9%95%BF%EF%BC%89">外挂标签引入</a></p><p><a href="https://www.fomal.cc/posts/eec9786.html#%E9%A6%96%E9%A1%B5%E5%88%86%E7%B1%BB%E7%A3%81%E8%B4%B41-0%EF%BC%88%E5%B0%8F%E5%86%B0%EF%BC%89">磁帖</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于MBTI与荣格八维</title>
      <link href="/78061670.html"/>
      <url>/78061670.html</url>
      
        <content type="html"><![CDATA[<h2 id="十六型人格测试官网"><a class="markdownIt-Anchor" href="#十六型人格测试官网"></a> 十六型人格：<a href="https://www.16personalities.com/ch/%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95">测试官网</a></h2><h2 id="类型指标介绍"><a class="markdownIt-Anchor" href="#类型指标介绍"></a> 类型指标介绍</h2><table><thead><tr><th><strong>维度</strong></th><th><strong>类型</strong></th><th><strong>相对应类型英文及缩写</strong></th><th><strong>类型</strong></th><th><strong>相对应类型英文缩写</strong></th></tr></thead><tbody><tr><td>注意力方向（精力来源）</td><td>外倾</td><td>E（Extrovert）</td><td>内倾</td><td>I（Introvert）</td></tr><tr><td>认知方式（如何搜集信息）</td><td>实感</td><td>S（Sensing）</td><td>直觉</td><td>N（Intuition）</td></tr><tr><td>判断方式（如何做决定）</td><td>理智</td><td>T（Thinking）</td><td>情感</td><td>F（Feeling）</td></tr><tr><td>生活方式（如何应对外部世界）</td><td>判断</td><td>J（Judgment）</td><td>理解</td><td>P（Perceiving）</td></tr></tbody></table><ol><li><p><strong>注意力方向（精力来源）</strong>：</p><ul><li><strong>外倾（E）</strong>：从外部世界获取能量，更偏向社交和活动。</li><li><strong>内倾（I）</strong>：从内部世界获取能量，更偏向独处和沉思。</li></ul></li><li><p><strong>认知方式（如何搜集信息）</strong>：</p><ul><li><strong>实感（S）</strong>：通过五种感官感知世界，注重具体事实和细节。</li><li><strong>直觉（N）</strong>：通过模式识别和想象力感知世界，注重抽象概念和可能性。</li></ul></li><li><p><strong>判断方式（如何做决定）</strong>：</p><ul><li><strong>理智（T）</strong>：使用逻辑和客观标准做出决定，注重效率和一致性。</li><li><strong>情感（F）</strong>：使用价值观和个人感受做出决定，注重和谐和人际关系。</li></ul></li><li><p><strong>生活方式（如何应对外部世界）</strong>：</p><ul><li><strong>判断（J）</strong>：喜欢结构化和计划，注重完成任务和实现目标。</li><li><strong>理解（P）</strong>：喜欢灵活性，注重探索和体验，不急于做出决定。</li></ul></li></ol><h3 id="紫人nt"><a class="markdownIt-Anchor" href="#紫人nt"></a> 紫人（NT）</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/intj-architect.svg","alt":"INTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/intp-logician.svg","alt":"INTP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/entj-commander.svg","alt":"ENTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/entp-debater.svg","alt":"ENTP"}]</div>      <div class="gallery-items">      </div>    </div><h4 id="intj-建筑师型人格"><a class="markdownIt-Anchor" href="#intj-建筑师型人格"></a> INTJ - 建筑师型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/intj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E5%BB%BA%E7%AD%91%E5%B8%88%E5%9E%8B%E4%BA%BA%E6%A0%BC/60108634?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>建筑师型人格作为人数稀少且战略能力最强的人格类型之一，他们仅占人口的 2%，女性则更为稀少，只有 0.8%。这让他们很难找到志同道合能够与其过人的智慧和审慎的思考方式比肩的同类。建筑师人格类型的人想象力丰富却很果断，雄心壮志但注重隐私，充满好奇心但从不浪费精力。</p></blockquote><h4 id="intp-逻辑学家型人格"><a class="markdownIt-Anchor" href="#intp-逻辑学家型人格"></a> INTP - 逻辑学家型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/intp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E5%AD%A6%E5%AE%B6%E5%9E%8B%E4%BA%BA%E6%A0%BC/60108902?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>只有 3%的人口为逻辑学家型人格，极为罕见，尽管如此，他们也并不以为意，因为他们根本不屑与“平庸”为伍。 逻辑学家们展现出积极主动的创造性，异于常人的视角以及永不枯竭的智慧，这都令他们深感自豪。<br />人们常常将逻辑学家称为哲学家、思考者，或是爱空想的教授，在历史的长河中，许多科学发现就是他们的智慧之花结出的丰硕果实。</p></blockquote><h4 id="entj-指挥官型人格"><a class="markdownIt-Anchor" href="#entj-指挥官型人格"></a> ENTJ - 指挥官型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/entj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E6%8C%87%E6%8C%A5%E5%AE%98%E5%9E%8B%E4%BA%BA%E6%A0%BC/60127086?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>指挥官人格类型的人是天生的领导者。这种人格类型的人天生具有魅力和信心，他们所散发的权威性能召集大家为着一个共同目标努力。但与领导者人格类型有所不同的是，他们的性格中有着近乎残酷的理性，用强大的动力、坚定的决心和锋芒毕露的思想实现为自己制定的一切目标。</p></blockquote><h4 id="entp-辩论家型人格"><a class="markdownIt-Anchor" href="#entp-辩论家型人格"></a> ENTP - 辩论家型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/entp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E8%BE%A9%E8%AE%BA%E5%AE%B6%E5%9E%8B%E4%BA%BA%E6%A0%BC/60135666?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>辩论家人格类型的人是故意持相反意见的人，善于把观点和信条剪得支离破碎并撒在空中给所有人看。与更有决心的人格类型相比，“辩论家”这样做并非想要取得更深层的含义或战略性的目标，而仅仅因为有趣。 没人比“辩论家”们更喜欢头脑的交锋，因为这可以给他们一个运用聪明才智，连结不同想法来证明自己观点的机会。故意持相反意见不仅使辩论家人格类型的人更好地理解别人的思考方式，也更好地理解相反观点，因为辩论家就是与之争论的人。</p></blockquote><hr /><h3 id="绿人nf"><a class="markdownIt-Anchor" href="#绿人nf"></a> 绿人（NF）</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/infj-advocate.svg","alt":"INFJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/infp-mediator.svg","alt":"INFP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/enfj-protagonist.svg","alt":"ENFJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/enfp-campaigner.svg","alt":"ENFP"}]</div>      <div class="gallery-items">      </div>    </div><h4 id="infj-提倡者型人格"><a class="markdownIt-Anchor" href="#infj-提倡者型人格"></a> INFJ - 提倡者型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/infj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E6%8F%90%E5%80%A1%E8%80%85%E5%9E%8B%E4%BA%BA%E6%A0%BC/60158072?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>提倡者人格类型的人非常稀少，只有不到 1%的人口属于这种类型，但他们对世界的贡献不容忽视。 他们具有与生俱来的理想主义和道德感，但真正令他们与其他理想主义人格类型区分开来的是，他们果断决绝。他们不是懒散的空想家，而是能脚踏实地完成目标，留下深远的积极影响的人。</p></blockquote><h4 id="infp-调停者型人格"><a class="markdownIt-Anchor" href="#infp-调停者型人格"></a> INFP - 调停者型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/infp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E8%B0%83%E5%81%9C%E8%80%85%E5%9E%8B%E4%BA%BA%E6%A0%BC/60161849?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>调停者型人格往往是安静、思想开放和富有想象力的，他们对所做的每一件事都采用关怀和创造性的方法。尽管他们可能看起来安静或谦逊，但调停者拥有充满活力、充满激情的内心生活。他们富有创造力和想象力，很乐意在白日梦中迷失自我，在脑海中编造各种故事和对话。这些性格以敏感著称——调停者可以对音乐、艺术、自然和周围的人产生深刻的情感反应。</p></blockquote><h4 id="enfj-主人公型人格"><a class="markdownIt-Anchor" href="#enfj-主人公型人格"></a> ENFJ - 主人公型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/enfj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E4%B8%BB%E4%BA%BA%E5%85%AC%E5%9E%8B%E4%BA%BA%E6%A0%BC/60185498?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>主人公人格类型的人是天生的领导者，充满激情，魅力四射。这类型人格的人约占人口的 2%，他们常常是政客，教练和老师，帮助、启发他人取得成就并造福整个世界。 他们浑身散发着天然的自信，潜移默化地影响着周围的人，也能够指导他人团结协作，帮助他们提升自己并改进社区，而他们自己也可从中获得自豪感与快乐。</p></blockquote><h4 id="enfp-竞选者型人格"><a class="markdownIt-Anchor" href="#enfp-竞选者型人格"></a> ENFP - 竞选者型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/enfp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E7%AB%9E%E9%80%89%E8%80%85%E5%9E%8B%E4%BA%BA%E6%A0%BC/60185931?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>竞选者人格类型的人是真正富有自由精神的人。 他们常常是聚会上的焦点，但是与眼前的兴奋和快乐相比，他们更享受与人们建立的社会和情感联系。富有魅力，独立，精力充沛且有同情心，占人口 7% 的他们在人群中随处可见。</p></blockquote><hr /><h3 id="蓝人sj"><a class="markdownIt-Anchor" href="#蓝人sj"></a> 蓝人（SJ）</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/istj-logistician.svg","alt":"ISTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/isfj-defender.svg","alt":"ISFJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/estj-executive.svg","alt":"ESTJ"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/esfj-consul.svg","alt":"ESFJ"}]</div>      <div class="gallery-items">      </div>    </div><h4 id="istj-物流师型人格"><a class="markdownIt-Anchor" href="#istj-物流师型人格"></a> ISTJ - 物流师型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/istj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E7%89%A9%E6%B5%81%E5%B8%88%E5%9E%8B%E4%BA%BA%E6%A0%BC/60186698?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>物流师型人格类型的人被认为是数量最多的，大约占人口总数的 13%。 他们有很多明显的特征，例如正直，务实，恪尽职守，使他们深爱家庭以及拥护传统，规则，标准的组织的青睐，比如律所，监管部门和军队。 这种人格类型的人愿意为自己的行为负责，为努力完成目标所做的一切感到骄傲。他们会毫不吝啬时间和精力，耐心准确地完成每个任务。</p></blockquote><h4 id="isfj-守卫者型人格"><a class="markdownIt-Anchor" href="#isfj-守卫者型人格"></a> ISFJ - 守卫者型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/isfj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E5%AE%88%E5%8D%AB%E8%80%85%E5%9E%8B%E4%BA%BA%E6%A0%BC/60186971?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>守卫者型人格有能力、积极进取，又有多才多艺的天赋。他们不但敏感而富有爱心，还有着出色的分析能力和关注细节的眼力。他们虽然缄默寡言，却往往拥有发达的人际交往技能和稳固的人际关系。守卫者远大于这些特质的简单相加，而他们的各种长处甚至在日常生活中最普通的小事也能展现光彩。守卫者型人格是真正的利他主义者，他们回报善意以加倍的善意，以热情慷慨的态度对待他们相信的人与事。</p></blockquote><h4 id="estj-执政官型人格"><a class="markdownIt-Anchor" href="#estj-执政官型人格"></a> ESTJ - 执政官型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/estj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E6%80%BB%E7%BB%8F%E7%90%86%E5%9E%8B%E4%BA%BA%E6%A0%BC/60192598?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>总经理人格类型的人是传统和秩序的代表，利用他们对正确，错误，和社会标准的理解来团结家庭和社区。他们诚实，爱奉献，有尊严，他们的明确建议和指导被人看重，也愿意披荆斩棘，带领大家努力前行。 他们会因为团结大家而骄傲，常常承担起社区组织者的角色，努力组织大家一起庆祝当地重要的节日，或守护着那些使家庭和社区紧密相连的传统价值观</p></blockquote><h4 id="esfj-执政官型人格"><a class="markdownIt-Anchor" href="#esfj-执政官型人格"></a> ESFJ - 执政官型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E6%89%A7%E6%94%BF%E5%AE%98%E5%9E%8B%E4%BA%BA%E6%A0%BC/60199757?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>最适合形容“执政官”们的词就是“受欢迎”了——这也符合常理，因为他们大约占人口的 12%，是非常常见的类型。在中学里，他们常常是拉拉队员或四分卫，在聚光灯下带领着队伍走向胜利和荣誉。在以后的人生里，“执政官”同样享受去支持他们的朋友和爱着的人，组织聚会，尽一切可能让每个人开心。</p></blockquote><hr /><h3 id="黄人sp"><a class="markdownIt-Anchor" href="#黄人sp"></a> 黄人（SP）</h3><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.16personalities.com/static/images/personality-types/avatars/istp-virtuoso.svg","alt":"ISTP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/isfp-adventurer.svg","alt":"ISFP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/estp-entrepreneur.svg","alt":"ESTP"},{"url":"https://www.16personalities.com/static/images/personality-types/avatars/esfp-entertainer.svg","alt":"ESFP"}]</div>      <div class="gallery-items">      </div>    </div><h4 id="istp-鉴赏家型人格"><a class="markdownIt-Anchor" href="#istp-鉴赏家型人格"></a> ISTP - 鉴赏家型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/istp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E9%89%B4%E8%B5%8F%E5%AE%B6%E5%9E%8B%E4%BA%BA%E6%A0%BC/60211688?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>鉴赏家人格类型的人喜欢用双手和眼睛去探索事物，大约只占到人口总数的 5%。他们通过冷静的理性主义和精神饱满的好奇心来感知和体验这个世界。拥有这种人格的人是天生的制造者，他们在不同的项目中穿梭，从创造有用、充足的产物中获得乐趣，并在创造的过程中从外界学习。鉴赏家人格类型的人通常是机械师和工程师，他们亲手拆卸东西，并把它们安装还原到比之前更好一点的状态，从中获得极大的乐趣。</p></blockquote><h4 id="isfp-探险家型人格"><a class="markdownIt-Anchor" href="#isfp-探险家型人格"></a> ISFP - 探险家型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/isfp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E6%8E%A2%E9%99%A9%E5%AE%B6%E5%9E%8B%E4%BA%BA%E6%A0%BC/60211690?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>探险家人格类型的人是真正的艺术家，这并不是说他们是通常意义上的兴高采烈到郊外画几棵小树的画家。但他们通常都精于此道。他们会运用审美，设计，甚至选择和行动来打破社会常规。探险家人格类型的人喜欢用美感和行为方面的实验来颠覆传统的期望。</p></blockquote><h4 id="estp-企业家型人格"><a class="markdownIt-Anchor" href="#estp-企业家型人格"></a> ESTP - 企业家型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/estp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E4%BC%81%E4%B8%9A%E5%AE%B6%E5%9E%8B%E4%BA%BA%E6%A0%BC/60211689?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>企业家人格类型的人对周围的环境颇有影响—在聚会上发现他们的最好方式就是去找那些在人群中穿梭自如的人。他们带着直接而朴实的幽默谈笑风生，喜欢成为人群中的焦点。如果观众被邀请上台，他们会自荐，或推荐一个害羞的朋友。理论，抽象概念和单调乏味的关于全球问题及其影响的讨论很难令他们长时间保持兴趣。他们的对话充满活力，也不乏智慧，他们喜欢讨论此时此刻的事，或者干脆动身去做。</p></blockquote><h4 id="esfp-表演者型人格"><a class="markdownIt-Anchor" href="#esfp-表演者型人格"></a> ESFP - 表演者型人格</h4><blockquote><p>相关链接：<a href="https://www.16personalities.com/ch/esfp-%E4%BA%BA%E6%A0%BC">官方</a> &gt; <a href="https://baike.baidu.com/item/%E8%A1%A8%E6%BC%94%E8%80%85%E5%9E%8B%E4%BA%BA%E6%A0%BC/60211687?fromModule=lemma_inlink">百度百科</a></p></blockquote><blockquote><p>表演者人格类型的人会沉醉于当前的兴奋状态，而且希望人人如此。说起激励他人，给他人打气助威，表演者人格类型的人会毫不吝惜自己的时间和精力，令人难以招架，任何其他人格类型在这方面都不能与之相提并论</p></blockquote><hr /><h2 id="荣格八维测试官网"><a class="markdownIt-Anchor" href="#荣格八维测试官网"></a> 荣格八维：<a href="https://www.jungus.cn/zh-hans/test/">测试官网</a></h2><table><thead><tr><th><strong>维度</strong></th><th><strong>英文及其缩写</strong></th><th><strong>类型</strong></th><th><strong>英文简称</strong></th></tr></thead><tbody><tr><td>感知</td><td>s(Sensing)</td><td>外倾感知</td><td>Se</td></tr><tr><td></td><td></td><td>内倾感知</td><td>Si</td></tr><tr><td>思维</td><td>T(Thinking)</td><td>外倾思维</td><td>Te</td></tr><tr><td></td><td></td><td>内倾思维</td><td>Ti</td></tr><tr><td>直觉</td><td>N(iNtuition)</td><td>外倾直觉</td><td>Ne</td></tr><tr><td></td><td></td><td>内倾直觉</td><td>Ni</td></tr><tr><td>共情</td><td>F(Feeling)</td><td>外倾共情</td><td>Fe</td></tr><tr><td></td><td></td><td>内倾共情</td><td>Fi</td></tr></tbody></table><h3 id="se外倾感知"><a class="markdownIt-Anchor" href="#se外倾感知"></a> Se/外倾感知</h3><p>外倾感觉又称感官体验，指通过视觉、听觉、触觉、嗅觉等获取外部世界的信息，是较为原始的捕食者生存功能。该认知功能的使用者具有动作思维的特性，对外部世界高度敏感，能即时作出反馈，在回忆时能够生动地描绘出当时的情景，并擅长描述人或物的物理特征。</p><h3 id="si内倾感知"><a class="markdownIt-Anchor" href="#si内倾感知"></a> Si/内倾感知</h3><p>内倾感知又称经验感知，该功能的使用者通过过去已形成的、现有的经验来处世。他们具有常规性思维，擅长背诵记忆，重视细枝末节，对细节的敏锐度较高。</p><h3 id="te外倾思维"><a class="markdownIt-Anchor" href="#te外倾思维"></a> Te/外倾思维</h3><p>外倾思维可理解为宏观逻辑，该认知功能的使用者善于根据事物的差异进行分类归纳，不受情绪因素影响，追求实际效益，目标导向性较强，具有宏观战略性思维。</p><h3 id="ti内倾思维"><a class="markdownIt-Anchor" href="#ti内倾思维"></a> Ti/内倾思维</h3><p>内倾思维可理解为单—逻辑，该认知功能的使用者习惯于以自身持有的客观衡量标准对外部世界进行评估和判断，并作出深入分析。其视野不够宏观，具有一定的主观性和局限性。</p><h3 id="ne外倾直觉"><a class="markdownIt-Anchor" href="#ne外倾直觉"></a> Ne/外倾直觉</h3><p>外倾直觉即发散直觉，该功能的使用者会超前地预想出事情发展的多种可能性，热衷于展望未来，想象力丰富，具幽默感和创新性。</p><h3 id="ni内倾直觉"><a class="markdownIt-Anchor" href="#ni内倾直觉"></a> Ni/内倾直觉</h3><p>内倾直觉即结论直觉，该功能的使用者通常不假思索地直接下结论，并不为过程推理多作思考，或在结论出来之后再补全之前的逻辑。内倾直觉的使用者思路简明扼要，不喜繁杂的推理过程，从某种程度上看也具有一定的主观性。</p><h3 id="fe外倾共情"><a class="markdownIt-Anchor" href="#fe外倾共情"></a> Fe/外倾共情</h3><p>外倾共情的使用者是有大爱之心的人，他们善于共情并表达给对方，非常在意他人的感受，以至于经常忽略自己的实际需求。他们善于与周边人建立情感联系，并善于分辨他人的情绪变化。</p><h3 id="fi内倾共情"><a class="markdownIt-Anchor" href="#fi内倾共情"></a> Fi/内倾共情</h3><p>内倾共情的使用者具有强烈的自我意识，情感逻辑从个人意识出发，通过自身的情绪感受与他人产生共鸣。内倾共情的使用者通常具有投射心理，认为自己的认知便是他人所想，无法客观地正视他人的需求。</p><p><strong>值得注意的是，每个人格健全的人都能演绎八维功能，只是组合功能的运用有所不同，并不是说某种类型的人格就只能运用四个维度。</strong></p><h2 id="对照表"><a class="markdownIt-Anchor" href="#对照表"></a> 对照表</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">阳面</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">阴面</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:center">第一功能</td><td style="text-align:center">第二功能</td><td style="text-align:center">第三功能</td><td style="text-align:center">第四功能</td><td style="text-align:center">第五功能</td><td style="text-align:center">第六功能</td><td style="text-align:center">第七功能</td><td style="text-align:center">第八功能</td></tr><tr><td style="text-align:center">INTJ</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td></tr><tr><td style="text-align:center">INFJ</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">si</td></tr><tr><td style="text-align:center">ENTJ</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td></tr><tr><td style="text-align:center">ENFJ</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Te</td></tr><tr><td style="text-align:center">ISFP</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td></tr><tr><td style="text-align:center">ISTP</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td><td style="text-align:center">Te</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td></tr><tr><td style="text-align:center">ESFP</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td></tr><tr><td style="text-align:center">ESTP</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td><td style="text-align:center">si</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td></tr><tr><td style="text-align:center">ENFP</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">si</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td></tr><tr><td style="text-align:center">ENTP</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td></tr><tr><td style="text-align:center">INFP</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Te</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td></tr><tr><td style="text-align:center">INTP</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td></tr><tr><td style="text-align:center">ESTJ</td><td style="text-align:center">Te</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Fi</td><td style="text-align:center">Ti</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Fe</td></tr><tr><td style="text-align:center">ESFJ</td><td style="text-align:center">Fe</td><td style="text-align:center">si</td><td style="text-align:center">Ne</td><td style="text-align:center">Ti</td><td style="text-align:center">Fi</td><td style="text-align:center">Se</td><td style="text-align:center">Ni</td><td style="text-align:center">Te</td></tr><tr><td style="text-align:center">ISTJ</td><td style="text-align:center">si</td><td style="text-align:center">Te</td><td style="text-align:center">Fi</td><td style="text-align:center">Ne</td><td style="text-align:center">Se</td><td style="text-align:center">Ti</td><td style="text-align:center">Fe</td><td style="text-align:center">Ni</td></tr><tr><td style="text-align:center">ISFJ</td><td style="text-align:center">si</td><td style="text-align:center">Fe</td><td style="text-align:center">Ti</td><td style="text-align:center">Ne</td><td style="text-align:center">Se</td><td style="text-align:center">Fi</td><td style="text-align:center">Te</td><td style="text-align:center">Ni</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #MBTI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
